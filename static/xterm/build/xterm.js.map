{"version":3,"file":"xterm.js","sources":["../src/xterm.js","../src/utils/Mouse.ts","../src/utils/Generic.ts","../src/utils/DomElementObjectPool.ts","../src/utils/CircularList.ts","../src/utils/CharMeasure.ts","../src/utils/BufferLine.ts","../src/utils/Browser.ts","../src/handlers/Clipboard.ts","../src/Viewport.ts","../src/SelectionModel.ts","../src/SelectionManager.ts","../src/Renderer.ts","../src/Parser.ts","../src/Linkifier.ts","../src/InputHandler.ts","../src/EventEmitter.ts","../src/EscapeSequences.ts","../src/CompositionHelper.ts","../src/Charsets.ts","../src/BufferSet.ts","../src/Buffer.ts","../node_modules/_browser-pack@6.0.2@browser-pack/_prelude.js"],"sourcesContent":["/**\r\n * xterm.js: xterm, in the browser\r\n * Originally forked from (with the author's permission):\r\n *   Fabrice Bellard's javascript vt100 for jslinux:\r\n *   http://bellard.org/jslinux/\r\n *   Copyright (c) 2011 Fabrice Bellard\r\n *   The original design remains. The terminal itself\r\n *   has been extended to include xterm CSI codes, among\r\n *   other features.\r\n * @license MIT\r\n */\r\n\r\nimport { BufferSet } from './BufferSet';\r\nimport { CompositionHelper } from './CompositionHelper';\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { Viewport } from './Viewport';\r\nimport { rightClickHandler, moveTextAreaUnderMouseCursor, pasteHandler, copyHandler } from './handlers/Clipboard';\r\nimport { CircularList } from './utils/CircularList';\r\nimport { C0 } from './EscapeSequences';\r\nimport { InputHandler } from './InputHandler';\r\nimport { Parser } from './Parser';\r\nimport { Renderer } from './Renderer';\r\nimport { Linkifier } from './Linkifier';\r\nimport { SelectionManager } from './SelectionManager';\r\nimport { CharMeasure } from './utils/CharMeasure';\r\nimport * as Browser from './utils/Browser';\r\nimport * as Mouse from './utils/Mouse';\r\nimport { CHARSETS } from './Charsets';\r\nimport { getRawByteCoords } from './utils/Mouse';\r\nimport { translateBufferLineToString } from './utils/BufferLine';\r\n\r\n/**\r\n * Terminal Emulation References:\r\n *   http://vt100.net/\r\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\r\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n *   http://invisible-island.net/vttest/\r\n *   http://www.inwap.com/pdp10/ansicode.txt\r\n *   http://linux.die.net/man/4/console_codes\r\n *   http://linux.die.net/man/7/urxvt\r\n */\r\n\r\n// Let it work inside Node.js for automated testing purposes.\r\nvar document = (typeof window != 'undefined') ? window.document : null;\r\n\r\n/**\r\n * The amount of write requests to queue before sending an XOFF signal to the\r\n * pty process. This number must be small in order for ^C and similar sequences\r\n * to be responsive.\r\n */\r\nvar WRITE_BUFFER_PAUSE_THRESHOLD = 5;\r\n\r\n/**\r\n * The number of writes to perform in a single batch before allowing the\r\n * renderer to catch up with a 0ms setTimeout.\r\n */\r\nvar WRITE_BATCH_SIZE = 300;\r\n\r\n/**\r\n * The time between cursor blinks. This is driven by JS rather than a CSS\r\n * animation due to a bug in Chromium that causes it to use excessive CPU time.\r\n * See https://github.com/Microsoft/vscode/issues/22900\r\n */\r\nvar CURSOR_BLINK_INTERVAL = 600;\r\n\r\n/**\r\n * Terminal\r\n */\r\n\r\n/**\r\n * Creates a new `Terminal` object.\r\n *\r\n * @param {object} options An object containing a set of options, the available options are:\r\n *   - `cursorBlink` (boolean): Whether the terminal cursor blinks\r\n *   - `cols` (number): The number of columns of the terminal (horizontal size)\r\n *   - `rows` (number): The number of rows of the terminal (vertical size)\r\n *\r\n * @public\r\n * @class Xterm Xterm\r\n * @alias module:xterm/src/xterm\r\n */\r\nfunction Terminal(options) {\r\n  var self = this;\r\n\r\n  if (!(this instanceof Terminal)) {\r\n    return new Terminal(arguments[0], arguments[1], arguments[2]);\r\n  }\r\n\r\n  self.browser = Browser;\r\n  self.cancel = Terminal.cancel;\r\n\r\n  EventEmitter.call(this);\r\n\r\n  if (typeof options === 'number') {\r\n    options = {\r\n      cols: arguments[0],\r\n      rows: arguments[1],\r\n      handler: arguments[2]\r\n    };\r\n  }\r\n\r\n  options = options || {};\r\n\r\n\r\n  Object.keys(Terminal.defaults).forEach(function(key) {\r\n    if (options[key] == null) {\r\n      options[key] = Terminal.options[key];\r\n\r\n      if (Terminal[key] !== Terminal.defaults[key]) {\r\n        options[key] = Terminal[key];\r\n      }\r\n    }\r\n    self[key] = options[key];\r\n  });\r\n\r\n  if (options.colors.length === 8) {\r\n    options.colors = options.colors.concat(Terminal._colors.slice(8));\r\n  } else if (options.colors.length === 16) {\r\n    options.colors = options.colors.concat(Terminal._colors.slice(16));\r\n  } else if (options.colors.length === 10) {\r\n    options.colors = options.colors.slice(0, -2).concat(\r\n      Terminal._colors.slice(8, -2), options.colors.slice(-2));\r\n  } else if (options.colors.length === 18) {\r\n    options.colors = options.colors.concat(\r\n      Terminal._colors.slice(16, -2), options.colors.slice(-2));\r\n  }\r\n  this.colors = options.colors;\r\n\r\n  this.options = options;\r\n\r\n  // this.context = options.context || window;\r\n  // this.document = options.document || document;\r\n  this.parent = options.body || options.parent || (\r\n    document ? document.getElementsByTagName('body')[0] : null\r\n  );\r\n\r\n  this.cols = options.cols || options.geometry[0];\r\n  this.rows = options.rows || options.geometry[1];\r\n  this.geometry = [this.cols, this.rows];\r\n\r\n  if (options.handler) {\r\n    this.on('data', options.handler);\r\n  }\r\n\r\n  this.cursorState = 0;\r\n  this.cursorHidden = false;\r\n  this.convertEol;\r\n  this.queue = '';\r\n  this.customKeyEventHandler = null;\r\n  this.cursorBlinkInterval = null;\r\n\r\n  // modes\r\n  this.applicationKeypad = false;\r\n  this.applicationCursor = false;\r\n  this.originMode = false;\r\n  this.insertMode = false;\r\n  this.wraparoundMode = true; // defaults: xterm - true, vt100 - false\r\n\r\n  // charset\r\n  this.charset = null;\r\n  this.gcharset = null;\r\n  this.glevel = 0;\r\n  this.charsets = [null];\r\n\r\n  // mouse properties\r\n  this.decLocator;\r\n  this.x10Mouse;\r\n  this.vt200Mouse;\r\n  this.vt300Mouse;\r\n  this.normalMouse;\r\n  this.mouseEvents;\r\n  this.sendFocus;\r\n  this.utfMouse;\r\n  this.sgrMouse;\r\n  this.urxvtMouse;\r\n\r\n  // misc\r\n  this.element;\r\n  this.children;\r\n  this.refreshStart;\r\n  this.refreshEnd;\r\n  this.savedX;\r\n  this.savedY;\r\n  this.savedCols;\r\n\r\n  // stream\r\n  this.readable = true;\r\n  this.writable = true;\r\n\r\n  this.defAttr = (0 << 18) | (257 << 9) | (256 << 0);\r\n  this.curAttr = this.defAttr;\r\n\r\n  this.params = [];\r\n  this.currentParam = 0;\r\n  this.prefix = '';\r\n  this.postfix = '';\r\n\r\n  this.inputHandler = new InputHandler(this);\r\n  this.parser = new Parser(this.inputHandler, this);\r\n  // Reuse renderer if the Terminal is being recreated via a Terminal.reset call.\r\n  this.renderer = this.renderer || null;\r\n  this.selectionManager = this.selectionManager || null;\r\n  this.linkifier = this.linkifier || new Linkifier();\r\n\r\n  // user input states\r\n  this.writeBuffer = [];\r\n  this.writeInProgress = false;\r\n\r\n  /**\r\n   * Whether _xterm.js_ sent XOFF in order to catch up with the pty process.\r\n   * This is a distinct state from writeStopped so that if the user requested\r\n   * XOFF via ^S that it will not automatically resume when the writeBuffer goes\r\n   * below threshold.\r\n   */\r\n  this.xoffSentToCatchUp = false;\r\n\r\n  /** Whether writing has been stopped as a result of XOFF */\r\n  this.writeStopped = false;\r\n\r\n  // leftover surrogate high from previous write invocation\r\n  this.surrogate_high = '';\r\n\r\n  // Create the terminal's buffers and set the current buffer\r\n  this.buffers = new BufferSet(this);\r\n  this.buffer = this.buffers.active;  // Convenience shortcut;\r\n  this.buffers.on('activate', function (buffer) {\r\n    this._terminal.buffer = buffer;\r\n  });\r\n\r\n  // Ensure the selection manager has the correct buffer\r\n  if (this.selectionManager) {\r\n    this.selectionManager.setBuffer(this.buffer.lines);\r\n  }\r\n\r\n  this.setupStops();\r\n\r\n  // Store if user went browsing history in scrollback\r\n  this.userScrolling = false;\r\n}\r\n\r\ninherits(Terminal, EventEmitter);\r\n\r\n/**\r\n * back_color_erase feature for xterm.\r\n */\r\nTerminal.prototype.eraseAttr = function() {\r\n  // if (this.is('screen')) return this.defAttr;\r\n  return (this.defAttr & ~0x1ff) | (this.curAttr & 0x1ff);\r\n};\r\n\r\n/**\r\n * Colors\r\n */\r\n\r\n// Colors 0-15\r\nTerminal.tangoColors = [\r\n  // dark:\r\n  '#2e3436',\r\n  '#cc0000',\r\n  '#4e9a06',\r\n  '#c4a000',\r\n  '#3465a4',\r\n  '#75507b',\r\n  '#06989a',\r\n  '#d3d7cf',\r\n  // bright:\r\n  '#555753',\r\n  '#ef2929',\r\n  '#8ae234',\r\n  '#fce94f',\r\n  '#729fcf',\r\n  '#ad7fa8',\r\n  '#34e2e2',\r\n  '#eeeeec'\r\n];\r\n\r\n// Colors 0-15 + 16-255\r\n// Much thanks to TooTallNate for writing this.\r\nTerminal.colors = (function() {\r\n  var colors = Terminal.tangoColors.slice()\r\n  , r = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff]\r\n  , i;\r\n\r\n  // 16-231\r\n  i = 0;\r\n  for (; i < 216; i++) {\r\n    out(r[(i / 36) % 6 | 0], r[(i / 6) % 6 | 0], r[i % 6]);\r\n  }\r\n\r\n  // 232-255 (grey)\r\n  i = 0;\r\n  for (; i < 24; i++) {\r\n    r = 8 + i * 10;\r\n    out(r, r, r);\r\n  }\r\n\r\n  function out(r, g, b) {\r\n    colors.push('#' + hex(r) + hex(g) + hex(b));\r\n  }\r\n\r\n  function hex(c) {\r\n    c = c.toString(16);\r\n    return c.length < 2 ? '0' + c : c;\r\n  }\r\n\r\n  return colors;\r\n})();\r\n\r\nTerminal._colors = Terminal.colors.slice();\r\n\r\nTerminal.vcolors = (function() {\r\n  var out = []\r\n  , colors = Terminal.colors\r\n  , i = 0\r\n  , color;\r\n\r\n  for (; i < 256; i++) {\r\n    color = parseInt(colors[i].substring(1), 16);\r\n    out.push([\r\n      (color >> 16) & 0xff,\r\n      (color >> 8) & 0xff,\r\n      color & 0xff\r\n    ]);\r\n  }\r\n\r\n  return out;\r\n})();\r\n\r\n/**\r\n * Options\r\n */\r\n\r\nTerminal.defaults = {\r\n  colors: Terminal.colors,\r\n  theme: 'default',\r\n  convertEol: false,\r\n  termName: 'xterm',\r\n  geometry: [80, 24],\r\n  cursorBlink: false,\r\n  cursorStyle: 'block',\r\n  visualBell: false,\r\n  popOnBell: false,\r\n  scrollback: 1000,\r\n  screenKeys: false,\r\n  debug: false,\r\n  cancelEvents: false,\r\n  disableStdin: false,\r\n  useFlowControl: false,\r\n  tabStopWidth: 8\r\n  // programFeatures: false,\r\n  // focusKeys: false,\r\n};\r\n\r\nTerminal.options = {};\r\n\r\nTerminal.focus = null;\r\n\r\neach(keys(Terminal.defaults), function(key) {\r\n  Terminal[key] = Terminal.defaults[key];\r\n  Terminal.options[key] = Terminal.defaults[key];\r\n});\r\n\r\n/**\r\n * Focus the terminal. Delegates focus handling to the terminal's DOM element.\r\n */\r\nTerminal.prototype.focus = function() {\r\n  return this.textarea.focus();\r\n};\r\n\r\n/**\r\n * Retrieves an option's value from the terminal.\r\n * @param {string} key The option key.\r\n */\r\nTerminal.prototype.getOption = function(key) {\r\n  if (!(key in Terminal.defaults)) {\r\n    throw new Error('No option with key \"' + key + '\"');\r\n  }\r\n\r\n  if (typeof this.options[key] !== 'undefined') {\r\n    return this.options[key];\r\n  }\r\n\r\n  return this[key];\r\n};\r\n\r\n/**\r\n * Sets an option on the terminal.\r\n * @param {string} key The option key.\r\n * @param {string} value The option value.\r\n */\r\nTerminal.prototype.setOption = function(key, value) {\r\n  if (!(key in Terminal.defaults)) {\r\n    throw new Error('No option with key \"' + key + '\"');\r\n  }\r\n  switch (key) {\r\n    case 'scrollback':\r\n      if (value < this.rows) {\r\n        let msg = 'Setting the scrollback value less than the number of rows ';\r\n\r\n        msg += `(${this.rows}) is not allowed.`;\r\n\r\n        console.warn(msg);\r\n        return false;\r\n      }\r\n\r\n      if (this.options[key] !== value) {\r\n        if (this.buffer.lines.length > value) {\r\n          const amountToTrim = this.buffer.lines.length - value;\r\n          const needsRefresh = (this.buffer.ydisp - amountToTrim < 0);\r\n          this.buffer.lines.trimStart(amountToTrim);\r\n          this.buffer.ybase = Math.max(this.buffer.ybase - amountToTrim, 0);\r\n          this.buffer.ydisp = Math.max(this.buffer.ydisp - amountToTrim, 0);\r\n          if (needsRefresh) {\r\n            this.refresh(0, this.rows - 1);\r\n          }\r\n        }\r\n        this.buffer.lines.maxLength = value;\r\n        this.viewport.syncScrollArea();\r\n      }\r\n      break;\r\n  }\r\n  this[key] = value;\r\n  this.options[key] = value;\r\n  switch (key) {\r\n    case 'cursorBlink': this.setCursorBlinking(value); break;\r\n    case 'cursorStyle':\r\n      this.element.classList.toggle(`xterm-cursor-style-block`, value === 'block');\r\n      this.element.classList.toggle(`xterm-cursor-style-underline`, value === 'underline');\r\n      this.element.classList.toggle(`xterm-cursor-style-bar`, value === 'bar');\r\n      break;\r\n    case 'tabStopWidth': this.setupStops(); break;\r\n  }\r\n};\r\n\r\nTerminal.prototype.restartCursorBlinking = function () {\r\n  this.setCursorBlinking(this.options.cursorBlink);\r\n};\r\n\r\nTerminal.prototype.setCursorBlinking = function (enabled) {\r\n  this.element.classList.toggle('xterm-cursor-blink', enabled);\r\n  this.clearCursorBlinkingInterval();\r\n  if (enabled) {\r\n    var self = this;\r\n    this.cursorBlinkInterval = setInterval(function () {\r\n      self.element.classList.toggle('xterm-cursor-blink-on');\r\n    }, CURSOR_BLINK_INTERVAL);\r\n  }\r\n};\r\n\r\nTerminal.prototype.clearCursorBlinkingInterval = function () {\r\n  this.element.classList.remove('xterm-cursor-blink-on');\r\n  if (this.cursorBlinkInterval) {\r\n    clearInterval(this.cursorBlinkInterval);\r\n    this.cursorBlinkInterval = null;\r\n  }\r\n};\r\n\r\n/**\r\n * Binds the desired focus behavior on a given terminal object.\r\n *\r\n * @static\r\n */\r\nTerminal.bindFocus = function (term) {\r\n  on(term.textarea, 'focus', function (ev) {\r\n    if (term.sendFocus) {\r\n      term.send(C0.ESC + '[I');\r\n    }\r\n    term.element.classList.add('focus');\r\n    term.showCursor();\r\n    term.restartCursorBlinking.apply(term);\r\n    Terminal.focus = term;\r\n    term.emit('focus', {terminal: term});\r\n  });\r\n};\r\n\r\n/**\r\n * Blur the terminal. Delegates blur handling to the terminal's DOM element.\r\n */\r\nTerminal.prototype.blur = function() {\r\n  return this.textarea.blur();\r\n};\r\n\r\n/**\r\n * Binds the desired blur behavior on a given terminal object.\r\n *\r\n * @static\r\n */\r\nTerminal.bindBlur = function (term) {\r\n  on(term.textarea, 'blur', function (ev) {\r\n    term.refresh(term.buffer.y, term.buffer.y);\r\n    if (term.sendFocus) {\r\n      term.send(C0.ESC + '[O');\r\n    }\r\n    term.element.classList.remove('focus');\r\n    term.clearCursorBlinkingInterval.apply(term);\r\n    Terminal.focus = null;\r\n    term.emit('blur', {terminal: term});\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize default behavior\r\n */\r\nTerminal.prototype.initGlobal = function() {\r\n  var term = this;\r\n\r\n  Terminal.bindKeys(this);\r\n  Terminal.bindFocus(this);\r\n  Terminal.bindBlur(this);\r\n\r\n  // Bind clipboard functionality\r\n  on(this.element, 'copy', event => {\r\n    // If mouse events are active it means the selection manager is disabled and\r\n    // copy should be handled by the host program.\r\n    if (!term.hasSelection()) {\r\n      return;\r\n    }\r\n    copyHandler(event, term, this.selectionManager);\r\n  });\r\n  const pasteHandlerWrapper = event => pasteHandler(event, term);\r\n  on(this.textarea, 'paste', pasteHandlerWrapper);\r\n  on(this.element, 'paste', pasteHandlerWrapper);\r\n\r\n  // Handle right click context menus\r\n  if (term.browser.isFirefox) {\r\n    // Firefox doesn't appear to fire the contextmenu event on right click\r\n    on(this.element, 'mousedown', event => {\r\n      if (event.button == 2) {\r\n        rightClickHandler(event, this.textarea, this.selectionManager);\r\n      }\r\n    });\r\n  } else {\r\n    on(this.element, 'contextmenu', event => {\r\n      rightClickHandler(event, this.textarea, this.selectionManager);\r\n    });\r\n  }\r\n\r\n  // Move the textarea under the cursor when middle clicking on Linux to ensure\r\n  // middle click to paste selection works. This only appears to work in Chrome\r\n  // at the time is writing.\r\n  if (term.browser.isLinux) {\r\n    // Use auxclick event over mousedown the latter doesn't seem to work. Note\r\n    // that the regular click event doesn't fire for the middle mouse button.\r\n    on(this.element, 'auxclick', event => {\r\n      if (event.button === 1) {\r\n        moveTextAreaUnderMouseCursor(event, this.textarea, this.selectionManager);\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n/**\r\n * Apply key handling to the terminal\r\n */\r\nTerminal.bindKeys = function(term) {\r\n  on(term.element, 'keydown', function(ev) {\r\n    if (document.activeElement != this) {\r\n      return;\r\n    }\r\n    term.keyDown(ev);\r\n  }, true);\r\n\r\n  on(term.element, 'keypress', function(ev) {\r\n    if (document.activeElement != this) {\r\n      return;\r\n    }\r\n    term.keyPress(ev);\r\n  }, true);\r\n\r\n  on(term.element, 'keyup', function(ev) {\r\n    if (!wasMondifierKeyOnlyEvent(ev)) {\r\n      term.focus(term);\r\n    }\r\n  }, true);\r\n\r\n  on(term.textarea, 'keydown', function(ev) {\r\n    term.keyDown(ev);\r\n  }, true);\r\n\r\n  on(term.textarea, 'keypress', function(ev) {\r\n    term.keyPress(ev);\r\n    // Truncate the textarea's value, since it is not needed\r\n    this.value = '';\r\n  }, true);\r\n\r\n  on(term.textarea, 'compositionstart', term.compositionHelper.compositionstart.bind(term.compositionHelper));\r\n  on(term.textarea, 'compositionupdate', term.compositionHelper.compositionupdate.bind(term.compositionHelper));\r\n  on(term.textarea, 'compositionend', term.compositionHelper.compositionend.bind(term.compositionHelper));\r\n  term.on('refresh', term.compositionHelper.updateCompositionElements.bind(term.compositionHelper));\r\n  term.on('refresh', function (data) {\r\n    term.queueLinkification(data.start, data.end)\r\n  });\r\n};\r\n\r\n\r\n/**\r\n * Insert the given row to the terminal or produce a new one\r\n * if no row argument is passed. Return the inserted row.\r\n * @param {HTMLElement} row (optional) The row to append to the terminal.\r\n */\r\nTerminal.prototype.insertRow = function (row) {\r\n  if (typeof row != 'object') {\r\n    row = document.createElement('div');\r\n  }\r\n\r\n  this.rowContainer.appendChild(row);\r\n  this.children.push(row);\r\n\r\n  return row;\r\n};\r\n\r\n/**\r\n * Opens the terminal within an element.\r\n *\r\n * @param {HTMLElement} parent The element to create the terminal within.\r\n * @param {boolean} focus Focus the terminal, after it gets instantiated in the DOM\r\n */\r\nTerminal.prototype.open = function(parent, focus) {\r\n  var self=this, i=0, div;\r\n\r\n  this.parent = parent || this.parent;\r\n\r\n  if (!this.parent) {\r\n    throw new Error('Terminal requires a parent element.');\r\n  }\r\n\r\n  // Grab global elements\r\n  this.context = this.parent.ownerDocument.defaultView;\r\n  this.document = this.parent.ownerDocument;\r\n  this.body = this.document.getElementsByTagName('body')[0];\r\n\r\n  //Create main element container\r\n  this.element = this.document.createElement('div');\r\n  this.element.classList.add('terminal');\r\n  this.element.classList.add('xterm');\r\n  this.element.classList.add('xterm-theme-' + this.theme);\r\n  this.element.classList.add(`xterm-cursor-style-${this.options.cursorStyle}`);\r\n  this.setCursorBlinking(this.options.cursorBlink);\r\n\r\n  this.element.setAttribute('tabindex', 0);\r\n\r\n  this.viewportElement = document.createElement('div');\r\n  this.viewportElement.classList.add('xterm-viewport');\r\n  this.element.appendChild(this.viewportElement);\r\n  this.viewportScrollArea = document.createElement('div');\r\n  this.viewportScrollArea.classList.add('xterm-scroll-area');\r\n  this.viewportElement.appendChild(this.viewportScrollArea);\r\n\r\n  // Create the selection container.\r\n  this.selectionContainer = document.createElement('div');\r\n  this.selectionContainer.classList.add('xterm-selection');\r\n  this.element.appendChild(this.selectionContainer);\r\n\r\n  // Create the container that will hold the lines of the terminal and then\r\n  // produce the lines the lines.\r\n  this.rowContainer = document.createElement('div');\r\n  this.rowContainer.classList.add('xterm-rows');\r\n  this.element.appendChild(this.rowContainer);\r\n  this.children = [];\r\n  this.linkifier.attachToDom(document, this.children);\r\n\r\n  // Create the container that will hold helpers like the textarea for\r\n  // capturing DOM Events. Then produce the helpers.\r\n  this.helperContainer = document.createElement('div');\r\n  this.helperContainer.classList.add('xterm-helpers');\r\n  // TODO: This should probably be inserted once it's filled to prevent an additional layout\r\n  this.element.appendChild(this.helperContainer);\r\n  this.textarea = document.createElement('textarea');\r\n  this.textarea.classList.add('xterm-helper-textarea');\r\n  this.textarea.setAttribute('autocorrect', 'off');\r\n  this.textarea.setAttribute('autocapitalize', 'off');\r\n  this.textarea.setAttribute('spellcheck', 'false');\r\n  this.textarea.tabIndex = 0;\r\n  this.textarea.addEventListener('focus', function() {\r\n    self.emit('focus', {terminal: self});\r\n  });\r\n  this.textarea.addEventListener('blur', function() {\r\n    self.emit('blur', {terminal: self});\r\n  });\r\n  this.helperContainer.appendChild(this.textarea);\r\n\r\n  this.compositionView = document.createElement('div');\r\n  this.compositionView.classList.add('composition-view');\r\n  this.compositionHelper = new CompositionHelper(this.textarea, this.compositionView, this);\r\n  this.helperContainer.appendChild(this.compositionView);\r\n\r\n  this.charSizeStyleElement = document.createElement('style');\r\n  this.helperContainer.appendChild(this.charSizeStyleElement);\r\n\r\n  for (; i < this.rows; i++) {\r\n    this.insertRow();\r\n  }\r\n  this.parent.appendChild(this.element);\r\n\r\n  this.charMeasure = new CharMeasure(document, this.helperContainer);\r\n  this.charMeasure.on('charsizechanged', function () {\r\n    self.updateCharSizeStyles();\r\n  });\r\n  this.charMeasure.measure();\r\n\r\n  this.viewport = new Viewport(this, this.viewportElement, this.viewportScrollArea, this.charMeasure);\r\n  this.renderer = new Renderer(this);\r\n  this.selectionManager = new SelectionManager(\r\n    this, this.buffer.lines, this.rowContainer, this.charMeasure\r\n  );\r\n  this.selectionManager.on('refresh', data => {\r\n    this.renderer.refreshSelection(data.start, data.end);\r\n  });\r\n  this.selectionManager.on('newselection', text => {\r\n    // If there's a new selection, put it into the textarea, focus and select it\r\n    // in order to register it as a selection on the OS. This event is fired\r\n    // only on Linux to enable middle click to paste selection.\r\n    this.textarea.value = text;\r\n    this.textarea.focus();\r\n    this.textarea.select();\r\n  });\r\n  this.on('scroll', () => this.selectionManager.refresh());\r\n  this.viewportElement.addEventListener('scroll', () => this.selectionManager.refresh());\r\n\r\n  // Setup loop that draws to screen\r\n  this.refresh(0, this.rows - 1);\r\n\r\n  // Initialize global actions that\r\n  // need to be taken on the document.\r\n  this.initGlobal();\r\n\r\n  /**\r\n   * Automatic focus functionality.\r\n   * TODO: Default to `false` starting with xterm.js 3.0.\r\n   */\r\n  if (typeof focus == 'undefined') {\r\n    let message = 'You did not pass the `focus` argument in `Terminal.prototype.open()`.\\n';\r\n\r\n    message += 'The `focus` argument now defaults to `true` but starting with xterm.js 3.0 ';\r\n    message += 'it will default to `false`.';\r\n\r\n    console.warn(message);\r\n    focus = true;\r\n  }\r\n\r\n  if (focus) {\r\n    this.focus();\r\n  }\r\n\r\n  // Listen for mouse events and translate\r\n  // them into terminal mouse protocols.\r\n  this.bindMouse();\r\n\r\n  /**\r\n   * This event is emitted when terminal has completed opening.\r\n   *\r\n   * @event open\r\n   */\r\n  this.emit('open');\r\n};\r\n\r\n\r\n/**\r\n * Attempts to load an add-on using CommonJS or RequireJS (whichever is available).\r\n * @param {string} addon The name of the addon to load\r\n * @static\r\n */\r\nTerminal.loadAddon = function(addon, callback) {\r\n  if (typeof exports === 'object' && typeof module === 'object') {\r\n    // CommonJS\r\n    return require('./addons/' + addon + '/' + addon);\r\n  } else if (typeof define == 'function') {\r\n    // RequireJS\r\n    return require(['./addons/' + addon + '/' + addon], callback);\r\n  } else {\r\n    console.error('Cannot load a module without a CommonJS or RequireJS environment.');\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Updates the helper CSS class with any changes necessary after the terminal's\r\n * character width has been changed.\r\n */\r\nTerminal.prototype.updateCharSizeStyles = function() {\r\n  this.charSizeStyleElement.textContent =\r\n      `.xterm-wide-char{width:${this.charMeasure.width * 2}px;}` +\r\n      `.xterm-normal-char{width:${this.charMeasure.width}px;}` +\r\n      `.xterm-rows > div{height:${this.charMeasure.height}px;}`;\r\n}\r\n\r\n/**\r\n * XTerm mouse events\r\n * http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#Mouse%20Tracking\r\n * To better understand these\r\n * the xterm code is very helpful:\r\n * Relevant files:\r\n *   button.c, charproc.c, misc.c\r\n * Relevant functions in xterm/button.c:\r\n *   BtnCode, EmitButtonCode, EditorButton, SendMousePosition\r\n */\r\nTerminal.prototype.bindMouse = function() {\r\n  var el = this.element, self = this, pressed = 32;\r\n\r\n  // mouseup, mousedown, wheel\r\n  // left click: ^[[M 3<^[[M#3<\r\n  // wheel up: ^[[M`3>\r\n  function sendButton(ev) {\r\n    var button\r\n    , pos;\r\n\r\n    // get the xterm-style button\r\n    button = getButton(ev);\r\n\r\n    // get mouse coordinates\r\n    pos = getRawByteCoords(ev, self.rowContainer, self.charMeasure, self.cols, self.rows);\r\n    if (!pos) return;\r\n\r\n    sendEvent(button, pos);\r\n\r\n    switch (ev.overrideType || ev.type) {\r\n      case 'mousedown':\r\n        pressed = button;\r\n        break;\r\n      case 'mouseup':\r\n        // keep it at the left\r\n        // button, just in case.\r\n        pressed = 32;\r\n        break;\r\n      case 'wheel':\r\n        // nothing. don't\r\n        // interfere with\r\n        // `pressed`.\r\n        break;\r\n    }\r\n  }\r\n\r\n  // motion example of a left click:\r\n  // ^[[M 3<^[[M@4<^[[M@5<^[[M@6<^[[M@7<^[[M#7<\r\n  function sendMove(ev) {\r\n    var button = pressed\r\n    , pos;\r\n\r\n    pos = getRawByteCoords(ev, self.rowContainer, self.charMeasure, self.cols, self.rows);\r\n    if (!pos) return;\r\n\r\n    // buttons marked as motions\r\n    // are incremented by 32\r\n    button += 32;\r\n\r\n    sendEvent(button, pos);\r\n  }\r\n\r\n  // encode button and\r\n  // position to characters\r\n  function encode(data, ch) {\r\n    if (!self.utfMouse) {\r\n      if (ch === 255) return data.push(0);\r\n      if (ch > 127) ch = 127;\r\n      data.push(ch);\r\n    } else {\r\n      if (ch === 2047) return data.push(0);\r\n      if (ch < 127) {\r\n        data.push(ch);\r\n      } else {\r\n        if (ch > 2047) ch = 2047;\r\n        data.push(0xC0 | (ch >> 6));\r\n        data.push(0x80 | (ch & 0x3F));\r\n      }\r\n    }\r\n  }\r\n\r\n  // send a mouse event:\r\n  // regular/utf8: ^[[M Cb Cx Cy\r\n  // urxvt: ^[[ Cb ; Cx ; Cy M\r\n  // sgr: ^[[ Cb ; Cx ; Cy M/m\r\n  // vt300: ^[[ 24(1/3/5)~ [ Cx , Cy ] \\r\r\n  // locator: CSI P e ; P b ; P r ; P c ; P p & w\r\n  function sendEvent(button, pos) {\r\n    // self.emit('mouse', {\r\n    //   x: pos.x - 32,\r\n    //   y: pos.x - 32,\r\n    //   button: button\r\n    // });\r\n\r\n    if (self.vt300Mouse) {\r\n      // NOTE: Unstable.\r\n      // http://www.vt100.net/docs/vt3xx-gp/chapter15.html\r\n      button &= 3;\r\n      pos.x -= 32;\r\n      pos.y -= 32;\r\n      var data = C0.ESC + '[24';\r\n      if (button === 0) data += '1';\r\n      else if (button === 1) data += '3';\r\n      else if (button === 2) data += '5';\r\n      else if (button === 3) return;\r\n      else data += '0';\r\n      data += '~[' + pos.x + ',' + pos.y + ']\\r';\r\n      self.send(data);\r\n      return;\r\n    }\r\n\r\n    if (self.decLocator) {\r\n      // NOTE: Unstable.\r\n      button &= 3;\r\n      pos.x -= 32;\r\n      pos.y -= 32;\r\n      if (button === 0) button = 2;\r\n      else if (button === 1) button = 4;\r\n      else if (button === 2) button = 6;\r\n      else if (button === 3) button = 3;\r\n      self.send(C0.ESC + '['\r\n                + button\r\n                + ';'\r\n                + (button === 3 ? 4 : 0)\r\n                + ';'\r\n                + pos.y\r\n                + ';'\r\n                + pos.x\r\n                + ';'\r\n                + (pos.page || 0)\r\n                + '&w');\r\n      return;\r\n    }\r\n\r\n    if (self.urxvtMouse) {\r\n      pos.x -= 32;\r\n      pos.y -= 32;\r\n      pos.x++;\r\n      pos.y++;\r\n      self.send(C0.ESC + '[' + button + ';' + pos.x + ';' + pos.y + 'M');\r\n      return;\r\n    }\r\n\r\n    if (self.sgrMouse) {\r\n      pos.x -= 32;\r\n      pos.y -= 32;\r\n      self.send(C0.ESC + '[<'\r\n                + (((button & 3) === 3 ? button & ~3 : button) - 32)\r\n                + ';'\r\n                + pos.x\r\n                + ';'\r\n                + pos.y\r\n                + ((button & 3) === 3 ? 'm' : 'M'));\r\n      return;\r\n    }\r\n\r\n    var data = [];\r\n\r\n    encode(data, button);\r\n    encode(data, pos.x);\r\n    encode(data, pos.y);\r\n\r\n    self.send(C0.ESC + '[M' + String.fromCharCode.apply(String, data));\r\n  }\r\n\r\n  function getButton(ev) {\r\n    var button\r\n    , shift\r\n    , meta\r\n    , ctrl\r\n    , mod;\r\n\r\n    // two low bits:\r\n    // 0 = left\r\n    // 1 = middle\r\n    // 2 = right\r\n    // 3 = release\r\n    // wheel up/down:\r\n    // 1, and 2 - with 64 added\r\n    switch (ev.overrideType || ev.type) {\r\n      case 'mousedown':\r\n        button = ev.button != null\r\n          ? +ev.button\r\n        : ev.which != null\r\n          ? ev.which - 1\r\n        : null;\r\n\r\n        if (self.browser.isMSIE) {\r\n          button = button === 1 ? 0 : button === 4 ? 1 : button;\r\n        }\r\n        break;\r\n      case 'mouseup':\r\n        button = 3;\r\n        break;\r\n      case 'DOMMouseScroll':\r\n        button = ev.detail < 0\r\n          ? 64\r\n        : 65;\r\n        break;\r\n      case 'wheel':\r\n        button = ev.wheelDeltaY > 0\r\n          ? 64\r\n        : 65;\r\n        break;\r\n    }\r\n\r\n    // next three bits are the modifiers:\r\n    // 4 = shift, 8 = meta, 16 = control\r\n    shift = ev.shiftKey ? 4 : 0;\r\n    meta = ev.metaKey ? 8 : 0;\r\n    ctrl = ev.ctrlKey ? 16 : 0;\r\n    mod = shift | meta | ctrl;\r\n\r\n    // no mods\r\n    if (self.vt200Mouse) {\r\n      // ctrl only\r\n      mod &= ctrl;\r\n    } else if (!self.normalMouse) {\r\n      mod = 0;\r\n    }\r\n\r\n    // increment to SP\r\n    button = (32 + (mod << 2)) + button;\r\n\r\n    return button;\r\n  }\r\n\r\n  on(el, 'mousedown', function(ev) {\r\n\r\n    // Prevent the focus on the textarea from getting lost\r\n    // and make sure we get focused on mousedown\r\n    ev.preventDefault();\r\n    self.focus();\r\n\r\n    if (!self.mouseEvents) return;\r\n\r\n    // send the button\r\n    sendButton(ev);\r\n\r\n    // fix for odd bug\r\n    //if (self.vt200Mouse && !self.normalMouse) {\r\n    if (self.vt200Mouse) {\r\n      ev.overrideType = 'mouseup';\r\n      sendButton(ev);\r\n      return self.cancel(ev);\r\n    }\r\n\r\n    // bind events\r\n    if (self.normalMouse) on(self.document, 'mousemove', sendMove);\r\n\r\n    // x10 compatibility mode can't send button releases\r\n    if (!self.x10Mouse) {\r\n      on(self.document, 'mouseup', function up(ev) {\r\n        sendButton(ev);\r\n        if (self.normalMouse) off(self.document, 'mousemove', sendMove);\r\n        off(self.document, 'mouseup', up);\r\n        return self.cancel(ev);\r\n      });\r\n    }\r\n\r\n    return self.cancel(ev);\r\n  });\r\n\r\n  //if (self.normalMouse) {\r\n  //  on(self.document, 'mousemove', sendMove);\r\n  //}\r\n\r\n  on(el, 'wheel', function(ev) {\r\n    if (!self.mouseEvents) return;\r\n    if (self.x10Mouse\r\n        || self.vt300Mouse\r\n        || self.decLocator) return;\r\n    sendButton(ev);\r\n    return self.cancel(ev);\r\n  });\r\n\r\n  // allow wheel scrolling in\r\n  // the shell for example\r\n  on(el, 'wheel', function(ev) {\r\n    if (self.mouseEvents) return;\r\n    self.viewport.onWheel(ev);\r\n    return self.cancel(ev);\r\n  });\r\n\r\n  on(el, 'touchstart', function(ev) {\r\n    if (self.mouseEvents) return;\r\n    self.viewport.onTouchStart(ev);\r\n    return self.cancel(ev);\r\n  });\r\n\r\n  on(el, 'touchmove', function(ev) {\r\n    if (self.mouseEvents) return;\r\n    self.viewport.onTouchMove(ev);\r\n    return self.cancel(ev);\r\n  });\r\n};\r\n\r\n/**\r\n * Destroys the terminal.\r\n */\r\nTerminal.prototype.destroy = function() {\r\n  this.readable = false;\r\n  this.writable = false;\r\n  this._events = {};\r\n  this.handler = function() {};\r\n  this.write = function() {};\r\n  if (this.element && this.element.parentNode) {\r\n    this.element.parentNode.removeChild(this.element);\r\n  }\r\n  //this.emit('close');\r\n};\r\n\r\n/**\r\n * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\r\n * opportunity.\r\n * @param {number} start The row to start from (between 0 and this.rows - 1).\r\n * @param {number} end The row to end at (between start and this.rows - 1).\r\n */\r\nTerminal.prototype.refresh = function(start, end) {\r\n  if (this.renderer) {\r\n    this.renderer.queueRefresh(start, end);\r\n  }\r\n};\r\n\r\n/**\r\n * Queues linkification for the specified rows.\r\n * @param {number} start The row to start from (between 0 and this.rows - 1).\r\n * @param {number} end The row to end at (between start and this.rows - 1).\r\n */\r\nTerminal.prototype.queueLinkification = function(start, end) {\r\n  if (this.linkifier) {\r\n    for (let i = start; i <= end; i++) {\r\n      this.linkifier.linkifyRow(i);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Display the cursor element\r\n */\r\nTerminal.prototype.showCursor = function() {\r\n  if (!this.cursorState) {\r\n    this.cursorState = 1;\r\n    this.refresh(this.buffer.y, this.buffer.y);\r\n  }\r\n};\r\n\r\n/**\r\n * Scroll the terminal down 1 row, creating a blank line.\r\n * @param {boolean} isWrapped Whether the new line is wrapped from the previous\r\n * line.\r\n */\r\nTerminal.prototype.scroll = function(isWrapped) {\r\n  var row;\r\n\r\n  // Make room for the new row in lines\r\n  if (this.buffer.lines.length === this.buffer.lines.maxLength) {\r\n    this.buffer.lines.trimStart(1);\r\n    this.buffer.ybase--;\r\n    if (this.buffer.ydisp !== 0) {\r\n      this.buffer.ydisp--;\r\n    }\r\n  }\r\n\r\n  this.buffer.ybase++;\r\n\r\n  // TODO: Why is this done twice?\r\n  if (!this.userScrolling) {\r\n    this.buffer.ydisp = this.buffer.ybase;\r\n  }\r\n\r\n  // last line\r\n  row = this.buffer.ybase + this.rows - 1;\r\n\r\n  // subtract the bottom scroll region\r\n  row -= this.rows - 1 - this.buffer.scrollBottom;\r\n\r\n  if (row === this.buffer.lines.length) {\r\n    // Optimization: pushing is faster than splicing when they amount to the same behavior\r\n    this.buffer.lines.push(this.blankLine(undefined, isWrapped));\r\n  } else {\r\n    // add our new line\r\n    this.buffer.lines.splice(row, 0, this.blankLine(undefined, isWrapped));\r\n  }\r\n\r\n  if (this.buffer.scrollTop !== 0) {\r\n    if (this.buffer.ybase !== 0) {\r\n      this.buffer.ybase--;\r\n      if (!this.userScrolling) {\r\n        this.buffer.ydisp = this.buffer.ybase;\r\n      }\r\n    }\r\n    this.buffer.lines.splice(this.buffer.ybase + this.buffer.scrollTop, 1);\r\n  }\r\n\r\n  // this.maxRange();\r\n  this.updateRange(this.buffer.scrollTop);\r\n  this.updateRange(this.buffer.scrollBottom);\r\n\r\n  /**\r\n   * This event is emitted whenever the terminal is scrolled.\r\n   * The one parameter passed is the new y display position.\r\n   *\r\n   * @event scroll\r\n   */\r\n  this.emit('scroll', this.buffer.ydisp);\r\n};\r\n\r\n/**\r\n * Scroll the display of the terminal\r\n * @param {number} disp The number of lines to scroll down (negatives scroll up).\r\n * @param {boolean} suppressScrollEvent Don't emit the scroll event as scrollDisp. This is used\r\n * to avoid unwanted events being handled by the veiwport when the event was triggered from the\r\n * viewport originally.\r\n */\r\nTerminal.prototype.scrollDisp = function(disp, suppressScrollEvent) {\r\n  if (disp < 0) {\r\n    if (this.buffer.ydisp === 0) {\r\n      return;\r\n    }\r\n    this.userScrolling = true;\r\n  } else if (disp + this.buffer.ydisp >= this.buffer.ybase) {\r\n    this.userScrolling = false;\r\n  }\r\n\r\n  const oldYdisp = this.buffer.ydisp;\r\n  this.buffer.ydisp = Math.max(Math.min(this.buffer.ydisp + disp, this.buffer.ybase), 0);\r\n\r\n  // No change occurred, don't trigger scroll/refresh\r\n  if (oldYdisp === this.buffer.ydisp) {\r\n    return;\r\n  }\r\n\r\n  if (!suppressScrollEvent) {\r\n    this.emit('scroll', this.buffer.ydisp);\r\n  }\r\n\r\n  this.refresh(0, this.rows - 1);\r\n};\r\n\r\n/**\r\n * Scroll the display of the terminal by a number of pages.\r\n * @param {number} pageCount The number of pages to scroll (negative scrolls up).\r\n */\r\nTerminal.prototype.scrollPages = function(pageCount) {\r\n  this.scrollDisp(pageCount * (this.rows - 1));\r\n};\r\n\r\n/**\r\n * Scrolls the display of the terminal to the top.\r\n */\r\nTerminal.prototype.scrollToTop = function() {\r\n  this.scrollDisp(-this.buffer.ydisp);\r\n};\r\n\r\n/**\r\n * Scrolls the display of the terminal to the bottom.\r\n */\r\nTerminal.prototype.scrollToBottom = function() {\r\n  this.scrollDisp(this.buffer.ybase - this.buffer.ydisp);\r\n};\r\n\r\n/**\r\n * Writes text to the terminal.\r\n * @param {string} data The text to write to the terminal.\r\n */\r\nTerminal.prototype.write = function(data) {\r\n  this.writeBuffer.push(data);\r\n\r\n  // Send XOFF to pause the pty process if the write buffer becomes too large so\r\n  // xterm.js can catch up before more data is sent. This is necessary in order\r\n  // to keep signals such as ^C responsive.\r\n  if (this.options.useFlowControl && !this.xoffSentToCatchUp && this.writeBuffer.length >= WRITE_BUFFER_PAUSE_THRESHOLD) {\r\n    // XOFF - stop pty pipe\r\n    // XON will be triggered by emulator before processing data chunk\r\n    this.send(C0.DC3);\r\n    this.xoffSentToCatchUp = true;\r\n  }\r\n\r\n  if (!this.writeInProgress && this.writeBuffer.length > 0) {\r\n    // Kick off a write which will write all data in sequence recursively\r\n    this.writeInProgress = true;\r\n    // Kick off an async innerWrite so more writes can come in while processing data\r\n    var self = this;\r\n    setTimeout(function () {\r\n      self.innerWrite();\r\n    });\r\n  }\r\n};\r\n\r\nTerminal.prototype.innerWrite = function() {\r\n  var writeBatch = this.writeBuffer.splice(0, WRITE_BATCH_SIZE);\r\n  while (writeBatch.length > 0) {\r\n    var data = writeBatch.shift();\r\n    var l = data.length, i = 0, j, cs, ch, code, low, ch_width, row;\r\n\r\n    // If XOFF was sent in order to catch up with the pty process, resume it if\r\n    // the writeBuffer is empty to allow more data to come in.\r\n    if (this.xoffSentToCatchUp && writeBatch.length === 0 && this.writeBuffer.length === 0) {\r\n      this.send(C0.DC1);\r\n      this.xoffSentToCatchUp = false;\r\n    }\r\n\r\n    this.refreshStart = this.buffer.y;\r\n    this.refreshEnd = this.buffer.y;\r\n\r\n    // HACK: Set the parser state based on it's state at the time of return.\r\n    // This works around the bug #662 which saw the parser state reset in the\r\n    // middle of parsing escape sequence in two chunks. For some reason the\r\n    // state of the parser resets to 0 after exiting parser.parse. This change\r\n    // just sets the state back based on the correct return statement.\r\n    var state = this.parser.parse(data);\r\n    this.parser.setState(state);\r\n\r\n    this.updateRange(this.buffer.y);\r\n    this.refresh(this.refreshStart, this.refreshEnd);\r\n  }\r\n  if (this.writeBuffer.length > 0) {\r\n    // Allow renderer to catch up before processing the next batch\r\n    var self = this;\r\n    setTimeout(function () {\r\n      self.innerWrite();\r\n    }, 0);\r\n  } else {\r\n    this.writeInProgress = false;\r\n  }\r\n};\r\n\r\n/**\r\n * Writes text to the terminal, followed by a break line character (\\n).\r\n * @param {string} data The text to write to the terminal.\r\n */\r\nTerminal.prototype.writeln = function(data) {\r\n  this.write(data + '\\r\\n');\r\n};\r\n\r\n/**\r\n * DEPRECATED: only for backward compatibility. Please use attachCustomKeyEventHandler() instead.\r\n * @param {function} customKeydownHandler The custom KeyboardEvent handler to attach. This is a\r\n *   function that takes a KeyboardEvent, allowing consumers to stop propogation and/or prevent\r\n *   the default action. The function returns whether the event should be processed by xterm.js.\r\n */\r\nTerminal.prototype.attachCustomKeydownHandler = function(customKeydownHandler) {\r\n  let message = 'attachCustomKeydownHandler() is DEPRECATED and will be removed soon. Please use attachCustomKeyEventHandler() instead.';\r\n  console.warn(message);\r\n  this.attachCustomKeyEventHandler(customKeydownHandler);\r\n};\r\n\r\n/**\r\n * Attaches a custom key event handler which is run before keys are processed, giving consumers of\r\n * xterm.js ultimate control as to what keys should be processed by the terminal and what keys\r\n * should not.\r\n * @param {function} customKeyEventHandler The custom KeyboardEvent handler to attach. This is a\r\n *   function that takes a KeyboardEvent, allowing consumers to stop propogation and/or prevent\r\n *   the default action. The function returns whether the event should be processed by xterm.js.\r\n */\r\nTerminal.prototype.attachCustomKeyEventHandler = function(customKeyEventHandler) {\r\n  this.customKeyEventHandler = customKeyEventHandler;\r\n};\r\n\r\n/**\r\n * Attaches a http(s) link handler, forcing web links to behave differently to\r\n * regular <a> tags. This will trigger a refresh as links potentially need to be\r\n * reconstructed. Calling this with null will remove the handler.\r\n * @param {LinkMatcherHandler} handler The handler callback function.\r\n */\r\nTerminal.prototype.setHypertextLinkHandler = function(handler) {\r\n  if (!this.linkifier) {\r\n    throw new Error('Cannot attach a hypertext link handler before Terminal.open is called');\r\n  }\r\n  this.linkifier.setHypertextLinkHandler(handler);\r\n  // Refresh to force links to refresh\r\n  this.refresh(0, this.rows - 1);\r\n};\r\n\r\n/**\r\n * Attaches a validation callback for hypertext links. This is useful to use\r\n * validation logic or to do something with the link's element and url.\r\n * @param {LinkMatcherValidationCallback} callback The callback to use, this can\r\n * be cleared with null.\r\n */\r\nTerminal.prototype.setHypertextValidationCallback = function(callback) {\r\n  if (!this.linkifier) {\r\n    throw new Error('Cannot attach a hypertext validation callback before Terminal.open is called');\r\n  }\r\n  this.linkifier.setHypertextValidationCallback(callback);\r\n  // Refresh to force links to refresh\r\n  this.refresh(0, this.rows - 1);\r\n};\r\n\r\n/**\r\n   * Registers a link matcher, allowing custom link patterns to be matched and\r\n   * handled.\r\n   * @param {RegExp} regex The regular expression to search for, specifically\r\n   * this searches the textContent of the rows. You will want to use \\s to match\r\n   * a space ' ' character for example.\r\n   * @param {LinkMatcherHandler} handler The callback when the link is called.\r\n   * @param {LinkMatcherOptions} [options] Options for the link matcher.\r\n   * @return {number} The ID of the new matcher, this can be used to deregister.\r\n */\r\nTerminal.prototype.registerLinkMatcher = function(regex, handler, options) {\r\n  if (this.linkifier) {\r\n    var matcherId = this.linkifier.registerLinkMatcher(regex, handler, options);\r\n    this.refresh(0, this.rows - 1);\r\n    return matcherId;\r\n  }\r\n};\r\n\r\n/**\r\n * Deregisters a link matcher if it has been registered.\r\n * @param {number} matcherId The link matcher's ID (returned after register)\r\n */\r\nTerminal.prototype.deregisterLinkMatcher = function(matcherId) {\r\n  if (this.linkifier) {\r\n    if (this.linkifier.deregisterLinkMatcher(matcherId)) {\r\n      this.refresh(0, this.rows - 1);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Gets whether the terminal has an active selection.\r\n */\r\nTerminal.prototype.hasSelection = function() {\r\n  return this.selectionManager ? this.selectionManager.hasSelection : false;\r\n};\r\n\r\n/**\r\n * Gets the terminal's current selection, this is useful for implementing copy\r\n * behavior outside of xterm.js.\r\n */\r\nTerminal.prototype.getSelection = function() {\r\n  return this.selectionManager ? this.selectionManager.selectionText : '';\r\n};\r\n\r\n/**\r\n * Clears the current terminal selection.\r\n */\r\nTerminal.prototype.clearSelection = function() {\r\n  if (this.selectionManager) {\r\n    this.selectionManager.clearSelection();\r\n  }\r\n};\r\n\r\n/**\r\n * Selects all text within the terminal.\r\n */\r\nTerminal.prototype.selectAll = function() {\r\n  if (this.selectionManager) {\r\n    this.selectionManager.selectAll();\r\n  }\r\n};\r\n\r\n/**\r\n * Handle a keydown event\r\n * Key Resources:\r\n *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\r\n * @param {KeyboardEvent} ev The keydown event to be handled.\r\n */\r\nTerminal.prototype.keyDown = function(ev) {\r\n  if (this.customKeyEventHandler && this.customKeyEventHandler(ev) === false) {\r\n    return false;\r\n  }\r\n\r\n  this.restartCursorBlinking();\r\n\r\n  if (!this.compositionHelper.keydown.bind(this.compositionHelper)(ev)) {\r\n    if (this.buffer.ybase !== this.buffer.ydisp) {\r\n      this.scrollToBottom();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  var self = this;\r\n  var result = this.evaluateKeyEscapeSequence(ev);\r\n\r\n  if (result.key === C0.DC3) { // XOFF\r\n    this.writeStopped = true;\r\n  } else if (result.key === C0.DC1) { // XON\r\n    this.writeStopped = false;\r\n  }\r\n\r\n  if (result.scrollDisp) {\r\n    this.scrollDisp(result.scrollDisp);\r\n    return this.cancel(ev, true);\r\n  }\r\n\r\n  if (isThirdLevelShift(this, ev)) {\r\n    return true;\r\n  }\r\n\r\n  if (result.cancel) {\r\n    // The event is canceled at the end already, is this necessary?\r\n    this.cancel(ev, true);\r\n  }\r\n\r\n  if (!result.key) {\r\n    return true;\r\n  }\r\n\r\n  this.emit('keydown', ev);\r\n  this.emit('key', result.key, ev);\r\n  this.showCursor();\r\n  this.handler(result.key);\r\n\r\n  return this.cancel(ev, true);\r\n};\r\n\r\n/**\r\n * Returns an object that determines how a KeyboardEvent should be handled. The key of the\r\n * returned value is the new key code to pass to the PTY.\r\n *\r\n * Reference: http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\r\n * @param {KeyboardEvent} ev The keyboard event to be translated to key escape sequence.\r\n */\r\nTerminal.prototype.evaluateKeyEscapeSequence = function(ev) {\r\n  var result = {\r\n    // Whether to cancel event propogation (NOTE: this may not be needed since the event is\r\n    // canceled at the end of keyDown\r\n    cancel: false,\r\n    // The new key even to emit\r\n    key: undefined,\r\n    // The number of characters to scroll, if this is defined it will cancel the event\r\n    scrollDisp: undefined\r\n  };\r\n  var modifiers = ev.shiftKey << 0 | ev.altKey << 1 | ev.ctrlKey << 2 | ev.metaKey << 3;\r\n  switch (ev.keyCode) {\r\n    case 8:\r\n      // backspace\r\n      if (ev.shiftKey) {\r\n        result.key = C0.BS; // ^H\r\n        break;\r\n      }\r\n      result.key = C0.DEL; // ^?\r\n      break;\r\n    case 9:\r\n      // tab\r\n      if (ev.shiftKey) {\r\n        result.key = C0.ESC + '[Z';\r\n        break;\r\n      }\r\n      result.key = C0.HT;\r\n      result.cancel = true;\r\n      break;\r\n    case 13:\r\n      // return/enter\r\n      result.key = C0.CR;\r\n      result.cancel = true;\r\n      break;\r\n    case 27:\r\n      // escape\r\n      result.key = C0.ESC;\r\n      result.cancel = true;\r\n      break;\r\n    case 37:\r\n      // left-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\r\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\r\n        // http://unix.stackexchange.com/a/108106\r\n        // macOS uses different escape sequences than linux\r\n        if (result.key == C0.ESC + '[1;3D') {\r\n          result.key = (this.browser.isMac) ? C0.ESC + 'b' : C0.ESC + '[1;5D';\r\n        }\r\n      } else if (this.applicationCursor) {\r\n        result.key = C0.ESC + 'OD';\r\n      } else {\r\n        result.key = C0.ESC + '[D';\r\n      }\r\n      break;\r\n    case 39:\r\n      // right-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\r\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\r\n        // http://unix.stackexchange.com/a/108106\r\n        // macOS uses different escape sequences than linux\r\n        if (result.key == C0.ESC + '[1;3C') {\r\n          result.key = (this.browser.isMac) ? C0.ESC + 'f' : C0.ESC + '[1;5C';\r\n        }\r\n      } else if (this.applicationCursor) {\r\n        result.key = C0.ESC + 'OC';\r\n      } else {\r\n        result.key = C0.ESC + '[C';\r\n      }\r\n      break;\r\n    case 38:\r\n      // up-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\r\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\r\n        // http://unix.stackexchange.com/a/108106\r\n        if (result.key == C0.ESC + '[1;3A') {\r\n          result.key = C0.ESC + '[1;5A';\r\n        }\r\n      } else if (this.applicationCursor) {\r\n        result.key = C0.ESC + 'OA';\r\n      } else {\r\n        result.key = C0.ESC + '[A';\r\n      }\r\n      break;\r\n    case 40:\r\n      // down-arrow\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\r\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\r\n        // http://unix.stackexchange.com/a/108106\r\n        if (result.key == C0.ESC + '[1;3B') {\r\n          result.key = C0.ESC + '[1;5B';\r\n        }\r\n      } else if (this.applicationCursor) {\r\n        result.key = C0.ESC + 'OB';\r\n      } else {\r\n        result.key = C0.ESC + '[B';\r\n      }\r\n      break;\r\n    case 45:\r\n      // insert\r\n      if (!ev.shiftKey && !ev.ctrlKey) {\r\n        // <Ctrl> or <Shift> + <Insert> are used to\r\n        // copy-paste on some systems.\r\n        result.key = C0.ESC + '[2~';\r\n      }\r\n      break;\r\n    case 46:\r\n      // delete\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[3~';\r\n      }\r\n      break;\r\n    case 36:\r\n      // home\r\n      if (modifiers)\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\r\n      else if (this.applicationCursor)\r\n        result.key = C0.ESC + 'OH';\r\n      else\r\n        result.key = C0.ESC + '[H';\r\n      break;\r\n    case 35:\r\n      // end\r\n      if (modifiers)\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\r\n      else if (this.applicationCursor)\r\n        result.key = C0.ESC + 'OF';\r\n      else\r\n        result.key = C0.ESC + '[F';\r\n      break;\r\n    case 33:\r\n      // page up\r\n      if (ev.shiftKey) {\r\n        result.scrollDisp = -(this.rows - 1);\r\n      } else {\r\n        result.key = C0.ESC + '[5~';\r\n      }\r\n      break;\r\n    case 34:\r\n      // page down\r\n      if (ev.shiftKey) {\r\n        result.scrollDisp = this.rows - 1;\r\n      } else {\r\n        result.key = C0.ESC + '[6~';\r\n      }\r\n      break;\r\n    case 112:\r\n      // F1-F12\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\r\n      } else {\r\n        result.key = C0.ESC + 'OP';\r\n      }\r\n      break;\r\n    case 113:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\r\n      } else {\r\n        result.key = C0.ESC + 'OQ';\r\n      }\r\n      break;\r\n    case 114:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\r\n      } else {\r\n        result.key = C0.ESC + 'OR';\r\n      }\r\n      break;\r\n    case 115:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\r\n      } else {\r\n        result.key = C0.ESC + 'OS';\r\n      }\r\n      break;\r\n    case 116:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[15~';\r\n      }\r\n      break;\r\n    case 117:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[17~';\r\n      }\r\n      break;\r\n    case 118:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[18~';\r\n      }\r\n      break;\r\n    case 119:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[19~';\r\n      }\r\n      break;\r\n    case 120:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[20~';\r\n      }\r\n      break;\r\n    case 121:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[21~';\r\n      }\r\n      break;\r\n    case 122:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[23~';\r\n      }\r\n      break;\r\n    case 123:\r\n      if (modifiers) {\r\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\r\n      } else {\r\n        result.key = C0.ESC + '[24~';\r\n      }\r\n      break;\r\n    default:\r\n      // a-z and space\r\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\r\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n          result.key = String.fromCharCode(ev.keyCode - 64);\r\n        } else if (ev.keyCode === 32) {\r\n          // NUL\r\n          result.key = String.fromCharCode(0);\r\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\r\n          // escape, file sep, group sep, record sep, unit sep\r\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\r\n        } else if (ev.keyCode === 56) {\r\n          // delete\r\n          result.key = String.fromCharCode(127);\r\n        } else if (ev.keyCode === 219) {\r\n          // ^[ - Control Sequence Introducer (CSI)\r\n          result.key = String.fromCharCode(27);\r\n        } else if (ev.keyCode === 220) {\r\n          // ^\\ - String Terminator (ST)\r\n          result.key = String.fromCharCode(28);\r\n        } else if (ev.keyCode === 221) {\r\n          // ^] - Operating System Command (OSC)\r\n          result.key = String.fromCharCode(29);\r\n        }\r\n      } else if (!this.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) {\r\n        // On Mac this is a third level shift. Use <Esc> instead.\r\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\r\n          result.key = C0.ESC + String.fromCharCode(ev.keyCode + 32);\r\n        } else if (ev.keyCode === 192) {\r\n          result.key = C0.ESC + '`';\r\n        } else if (ev.keyCode >= 48 && ev.keyCode <= 57) {\r\n          result.key = C0.ESC + (ev.keyCode - 48);\r\n        }\r\n      } else if (this.browser.isMac && !ev.altKey && !ev.ctrlKey && ev.metaKey) {\r\n        if (ev.keyCode === 65) { // cmd + a\r\n          this.selectAll();\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Set the G level of the terminal\r\n * @param g\r\n */\r\nTerminal.prototype.setgLevel = function(g) {\r\n  this.glevel = g;\r\n  this.charset = this.charsets[g];\r\n};\r\n\r\n/**\r\n * Set the charset for the given G level of the terminal\r\n * @param g\r\n * @param charset\r\n */\r\nTerminal.prototype.setgCharset = function(g, charset) {\r\n  this.charsets[g] = charset;\r\n  if (this.glevel === g) {\r\n    this.charset = charset;\r\n  }\r\n};\r\n\r\n/**\r\n * Handle a keypress event.\r\n * Key Resources:\r\n *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\r\n * @param {KeyboardEvent} ev The keypress event to be handled.\r\n */\r\nTerminal.prototype.keyPress = function(ev) {\r\n  var key;\r\n\r\n  if (this.customKeyEventHandler && this.customKeyEventHandler(ev) === false) {\r\n    return false;\r\n  }\r\n\r\n  this.cancel(ev);\r\n\r\n  if (ev.charCode) {\r\n    key = ev.charCode;\r\n  } else if (ev.which == null) {\r\n    key = ev.keyCode;\r\n  } else if (ev.which !== 0 && ev.charCode !== 0) {\r\n    key = ev.which;\r\n  } else {\r\n    return false;\r\n  }\r\n\r\n  if (!key || (\r\n    (ev.altKey || ev.ctrlKey || ev.metaKey) && !isThirdLevelShift(this, ev)\r\n  )) {\r\n    return false;\r\n  }\r\n\r\n  key = String.fromCharCode(key);\r\n\r\n  this.emit('keypress', key, ev);\r\n  this.emit('key', key, ev);\r\n  this.showCursor();\r\n  this.handler(key);\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Send data for handling to the terminal\r\n * @param {string} data\r\n */\r\nTerminal.prototype.send = function(data) {\r\n  var self = this;\r\n\r\n  if (!this.queue) {\r\n    setTimeout(function() {\r\n      self.handler(self.queue);\r\n      self.queue = '';\r\n    }, 1);\r\n  }\r\n\r\n  this.queue += data;\r\n};\r\n\r\n/**\r\n * Ring the bell.\r\n * Note: We could do sweet things with webaudio here\r\n */\r\nTerminal.prototype.bell = function() {\r\n  if (!this.visualBell) return;\r\n  var self = this;\r\n  this.element.style.borderColor = 'white';\r\n  setTimeout(function() {\r\n    self.element.style.borderColor = '';\r\n  }, 10);\r\n  if (this.popOnBell) this.focus();\r\n};\r\n\r\n/**\r\n * Log the current state to the console.\r\n */\r\nTerminal.prototype.log = function() {\r\n  if (!this.debug) return;\r\n  if (!this.context.console || !this.context.console.log) return;\r\n  var args = Array.prototype.slice.call(arguments);\r\n  this.context.console.log.apply(this.context.console, args);\r\n};\r\n\r\n/**\r\n * Log the current state as error to the console.\r\n */\r\nTerminal.prototype.error = function() {\r\n  if (!this.debug) return;\r\n  if (!this.context.console || !this.context.console.error) return;\r\n  var args = Array.prototype.slice.call(arguments);\r\n  this.context.console.error.apply(this.context.console, args);\r\n};\r\n\r\n/**\r\n * Resizes the terminal.\r\n *\r\n * @param {number} x The number of columns to resize to.\r\n * @param {number} y The number of rows to resize to.\r\n */\r\nTerminal.prototype.resize = function(x, y) {\r\n  if (isNaN(x) || isNaN(y)) {\r\n    return;\r\n  }\r\n\r\n  if (y > this.getOption('scrollback')) {\r\n    this.setOption('scrollback', y)\r\n  }\r\n\r\n  var line\r\n  , el\r\n  , i\r\n  , j\r\n  , ch\r\n  , addToY;\r\n\r\n  if (x === this.cols && y === this.rows) {\r\n    // Check if we still need to measure the char size (fixes #785).\r\n    if (!this.charMeasure.width || !this.charMeasure.height) {\r\n      this.charMeasure.measure();\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (x < 1) x = 1;\r\n  if (y < 1) y = 1;\r\n\r\n  this.buffers.resize(x, y);\r\n\r\n  // Adjust rows in the DOM to accurately reflect the new dimensions\r\n  while (this.children.length < y) {\r\n    this.insertRow();\r\n  }\r\n  while (this.children.length > y) {\r\n    el = this.children.shift();\r\n    if (!el) continue;\r\n    el.parentNode.removeChild(el);\r\n  }\r\n\r\n  this.cols = x;\r\n  this.rows = y;\r\n  this.setupStops(this.cols);\r\n\r\n  this.charMeasure.measure();\r\n\r\n  this.refresh(0, this.rows - 1);\r\n\r\n  this.geometry = [this.cols, this.rows];\r\n  this.emit('resize', {terminal: this, cols: x, rows: y});\r\n};\r\n\r\n/**\r\n * Updates the range of rows to refresh\r\n * @param {number} y The number of rows to refresh next.\r\n */\r\nTerminal.prototype.updateRange = function(y) {\r\n  if (y < this.refreshStart) this.refreshStart = y;\r\n  if (y > this.refreshEnd) this.refreshEnd = y;\r\n  // if (y > this.refreshEnd) {\r\n  //   this.refreshEnd = y;\r\n  //   if (y > this.rows - 1) {\r\n  //     this.refreshEnd = this.rows - 1;\r\n  //   }\r\n  // }\r\n};\r\n\r\n/**\r\n * Set the range of refreshing to the maximum value\r\n */\r\nTerminal.prototype.maxRange = function() {\r\n  this.refreshStart = 0;\r\n  this.refreshEnd = this.rows - 1;\r\n};\r\n\r\n\r\n\r\n/**\r\n * Setup the tab stops.\r\n * @param {number} i\r\n */\r\nTerminal.prototype.setupStops = function(i) {\r\n  if (i != null) {\r\n    if (!this.buffer.tabs[i]) {\r\n      i = this.prevStop(i);\r\n    }\r\n  } else {\r\n    this.buffer.tabs = {};\r\n    i = 0;\r\n  }\r\n\r\n  for (; i < this.cols; i += this.getOption('tabStopWidth')) {\r\n    this.buffer.tabs[i] = true;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Move the cursor to the previous tab stop from the given position (default is current).\r\n * @param {number} x The position to move the cursor to the previous tab stop.\r\n */\r\nTerminal.prototype.prevStop = function(x) {\r\n  if (x == null) x = this.buffer.x;\r\n  while (!this.buffer.tabs[--x] && x > 0);\r\n  return x >= this.cols\r\n    ? this.cols - 1\r\n  : x < 0 ? 0 : x;\r\n};\r\n\r\n\r\n/**\r\n * Move the cursor one tab stop forward from the given position (default is current).\r\n * @param {number} x The position to move the cursor one tab stop forward.\r\n */\r\nTerminal.prototype.nextStop = function(x) {\r\n  if (x == null) x = this.buffer.x;\r\n  while (!this.buffer.tabs[++x] && x < this.cols);\r\n  return x >= this.cols\r\n    ? this.cols - 1\r\n  : x < 0 ? 0 : x;\r\n};\r\n\r\n\r\n/**\r\n * Erase in the identified line everything from \"x\" to the end of the line (right).\r\n * @param {number} x The column from which to start erasing to the end of the line.\r\n * @param {number} y The line in which to operate.\r\n */\r\nTerminal.prototype.eraseRight = function(x, y) {\r\n  var line = this.buffer.lines.get(this.buffer.ybase + y);\r\n  if (!line) {\r\n    return;\r\n  }\r\n  var ch = [this.eraseAttr(), ' ', 1]; // xterm\r\n  for (; x < this.cols; x++) {\r\n    line[x] = ch;\r\n  }\r\n  this.updateRange(y);\r\n};\r\n\r\n\r\n\r\n/**\r\n * Erase in the identified line everything from \"x\" to the start of the line (left).\r\n * @param {number} x The column from which to start erasing to the start of the line.\r\n * @param {number} y The line in which to operate.\r\n */\r\nTerminal.prototype.eraseLeft = function(x, y) {\r\n  var line = this.buffer.lines.get(this.buffer.ybase + y);\r\n  if (!line) {\r\n    return;\r\n  }\r\n  var ch = [this.eraseAttr(), ' ', 1]; // xterm\r\n  x++;\r\n  while (x--) {\r\n    line[x] = ch;\r\n  }\r\n  this.updateRange(y);\r\n};\r\n\r\n/**\r\n * Clears the entire buffer, making the prompt line the new first line.\r\n */\r\nTerminal.prototype.clear = function() {\r\n  if (this.buffer.ybase === 0 && this.buffer.y === 0) {\r\n    // Don't clear if it's already clear\r\n    return;\r\n  }\r\n  this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y));\r\n  this.buffer.lines.length = 1;\r\n  this.buffer.ydisp = 0;\r\n  this.buffer.ybase = 0;\r\n  this.buffer.y = 0;\r\n  for (var i = 1; i < this.rows; i++) {\r\n    this.buffer.lines.push(this.blankLine());\r\n  }\r\n  this.refresh(0, this.rows - 1);\r\n  this.emit('scroll', this.buffer.ydisp);\r\n};\r\n\r\n/**\r\n * Erase all content in the given line\r\n * @param {number} y The line to erase all of its contents.\r\n */\r\nTerminal.prototype.eraseLine = function(y) {\r\n  this.eraseRight(0, y);\r\n};\r\n\r\n\r\n/**\r\n * Return the data array of a blank line\r\n * @param {number} cur First bunch of data for each \"blank\" character.\r\n * @param {boolean} isWrapped Whether the new line is wrapped from the previous line.\r\n */\r\nTerminal.prototype.blankLine = function(cur, isWrapped, cols) {\r\n  var attr = cur\r\n  ? this.eraseAttr()\r\n  : this.defAttr;\r\n\r\n  var ch = [attr, ' ', 1]  // width defaults to 1 halfwidth character\r\n  , line = []\r\n  , i = 0;\r\n\r\n  // TODO: It is not ideal that this is a property on an array, a buffer line\r\n  // class should be added that will hold this data and other useful functions.\r\n  if (isWrapped) {\r\n    line.isWrapped = isWrapped;\r\n  }\r\n\r\n  cols = cols || this.cols;\r\n  for (; i < cols; i++) {\r\n    line[i] = ch;\r\n  }\r\n\r\n  return line;\r\n};\r\n\r\n\r\n/**\r\n * If cur return the back color xterm feature attribute. Else return defAttr.\r\n * @param {object} cur\r\n */\r\nTerminal.prototype.ch = function(cur) {\r\n  return cur\r\n    ? [this.eraseAttr(), ' ', 1]\r\n  : [this.defAttr, ' ', 1];\r\n};\r\n\r\n\r\n/**\r\n * Evaluate if the current terminal is the given argument.\r\n * @param {object} term The terminal to evaluate\r\n */\r\nTerminal.prototype.is = function(term) {\r\n  var name = this.termName;\r\n  return (name + '').indexOf(term) === 0;\r\n};\r\n\r\n\r\n/**\r\n * Emit the 'data' event and populate the given data.\r\n * @param {string} data The data to populate in the event.\r\n */\r\nTerminal.prototype.handler = function(data) {\r\n  // Prevents all events to pty process if stdin is disabled\r\n  if (this.options.disableStdin) {\r\n    return;\r\n  }\r\n\r\n  // Clear the selection if the selection manager is available and has an active selection\r\n  if (this.selectionManager && this.selectionManager.hasSelection) {\r\n    this.selectionManager.clearSelection();\r\n  }\r\n\r\n  // Input is being sent to the terminal, the terminal should focus the prompt.\r\n  if (this.buffer.ybase !== this.buffer.ydisp) {\r\n    this.scrollToBottom();\r\n  }\r\n  this.emit('data', data);\r\n};\r\n\r\n\r\n/**\r\n * Emit the 'title' event and populate the given title.\r\n * @param {string} title The title to populate in the event.\r\n */\r\nTerminal.prototype.handleTitle = function(title) {\r\n  /**\r\n   * This event is emitted when the title of the terminal is changed\r\n   * from inside the terminal. The parameter is the new title.\r\n   *\r\n   * @event title\r\n   */\r\n  this.emit('title', title);\r\n};\r\n\r\n\r\n/**\r\n * ESC\r\n */\r\n\r\n/**\r\n * ESC D Index (IND is 0x84).\r\n */\r\nTerminal.prototype.index = function() {\r\n  this.buffer.y++;\r\n  if (this.buffer.y > this.buffer.scrollBottom) {\r\n    this.buffer.y--;\r\n    this.scroll();\r\n  }\r\n  // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n  if (this.buffer.x >= this.cols) {\r\n    this.buffer.x--;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * ESC M Reverse Index (RI is 0x8d).\r\n *\r\n * Move the cursor up one row, inserting a new blank line if necessary.\r\n */\r\nTerminal.prototype.reverseIndex = function() {\r\n  var j;\r\n  if (this.buffer.y === this.buffer.scrollTop) {\r\n    // possibly move the code below to term.reverseScroll();\r\n    // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\r\n    // blankLine(true) is xterm/linux behavior\r\n    this.buffer.lines.shiftElements(this.buffer.y + this.buffer.ybase, this.rows - 1, 1);\r\n    this.buffer.lines.set(this.buffer.y + this.buffer.ybase, this.blankLine(true));\r\n    this.updateRange(this.buffer.scrollTop);\r\n    this.updateRange(this.buffer.scrollBottom);\r\n  } else {\r\n    this.buffer.y--;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * ESC c Full Reset (RIS).\r\n */\r\nTerminal.prototype.reset = function() {\r\n  this.options.rows = this.rows;\r\n  this.options.cols = this.cols;\r\n  var customKeyEventHandler = this.customKeyEventHandler;\r\n  var cursorBlinkInterval = this.cursorBlinkInterval;\r\n  var inputHandler = this.inputHandler;\r\n  Terminal.call(this, this.options);\r\n  this.customKeyEventHandler = customKeyEventHandler;\r\n  this.cursorBlinkInterval = cursorBlinkInterval;\r\n  this.inputHandler = inputHandler;\r\n  this.refresh(0, this.rows - 1);\r\n  this.viewport.syncScrollArea();\r\n};\r\n\r\n\r\n/**\r\n * ESC H Tab Set (HTS is 0x88).\r\n */\r\nTerminal.prototype.tabSet = function() {\r\n  this.buffer.tabs[this.buffer.x] = true;\r\n};\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nfunction on(el, type, handler, capture) {\r\n  if (!Array.isArray(el)) {\r\n    el = [el];\r\n  }\r\n  el.forEach(function (element) {\r\n    element.addEventListener(type, handler, capture || false);\r\n  });\r\n}\r\n\r\nfunction off(el, type, handler, capture) {\r\n  el.removeEventListener(type, handler, capture || false);\r\n}\r\n\r\nfunction cancel(ev, force) {\r\n  if (!this.cancelEvents && !force) {\r\n    return;\r\n  }\r\n  ev.preventDefault();\r\n  ev.stopPropagation();\r\n  return false;\r\n}\r\n\r\nfunction inherits(child, parent) {\r\n  function f() {\r\n    this.constructor = child;\r\n  }\r\n  f.prototype = parent.prototype;\r\n  child.prototype = new f;\r\n}\r\n\r\nfunction indexOf(obj, el) {\r\n  var i = obj.length;\r\n  while (i--) {\r\n    if (obj[i] === el) return i;\r\n  }\r\n  return -1;\r\n}\r\n\r\nfunction isThirdLevelShift(term, ev) {\r\n  var thirdLevelKey =\r\n      (term.browser.isMac && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\r\n      (term.browser.isMSWindows && ev.altKey && ev.ctrlKey && !ev.metaKey);\r\n\r\n  if (ev.type == 'keypress') {\r\n    return thirdLevelKey;\r\n  }\r\n\r\n  // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\r\n  return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\r\n}\r\n\r\n// Expose to InputHandler (temporary)\r\nTerminal.prototype.matchColor = matchColor;\r\n\r\nfunction matchColor(r1, g1, b1) {\r\n  var hash = (r1 << 16) | (g1 << 8) | b1;\r\n\r\n  if (matchColor._cache[hash] != null) {\r\n    return matchColor._cache[hash];\r\n  }\r\n\r\n  var ldiff = Infinity\r\n  , li = -1\r\n  , i = 0\r\n  , c\r\n  , r2\r\n  , g2\r\n  , b2\r\n  , diff;\r\n\r\n  for (; i < Terminal.vcolors.length; i++) {\r\n    c = Terminal.vcolors[i];\r\n    r2 = c[0];\r\n    g2 = c[1];\r\n    b2 = c[2];\r\n\r\n    diff = matchColor.distance(r1, g1, b1, r2, g2, b2);\r\n\r\n    if (diff === 0) {\r\n      li = i;\r\n      break;\r\n    }\r\n\r\n    if (diff < ldiff) {\r\n      ldiff = diff;\r\n      li = i;\r\n    }\r\n  }\r\n\r\n  return matchColor._cache[hash] = li;\r\n}\r\n\r\nmatchColor._cache = {};\r\n\r\n// http://stackoverflow.com/questions/1633828\r\nmatchColor.distance = function(r1, g1, b1, r2, g2, b2) {\r\n  return Math.pow(30 * (r1 - r2), 2)\r\n    + Math.pow(59 * (g1 - g2), 2)\r\n    + Math.pow(11 * (b1 - b2), 2);\r\n};\r\n\r\nfunction each(obj, iter, con) {\r\n  if (obj.forEach) return obj.forEach(iter, con);\r\n  for (var i = 0; i < obj.length; i++) {\r\n    iter.call(con, obj[i], i, obj);\r\n  }\r\n}\r\n\r\nfunction wasMondifierKeyOnlyEvent(ev) {\r\n  return ev.keyCode === 16 || // Shift\r\n    ev.keyCode === 17 || // Ctrl\r\n    ev.keyCode === 18; // Alt\r\n}\r\n\r\nfunction keys(obj) {\r\n  if (Object.keys) return Object.keys(obj);\r\n  var key, keys = [];\r\n  for (key in obj) {\r\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n      keys.push(key);\r\n    }\r\n  }\r\n  return keys;\r\n}\r\n\r\n/**\r\n * Expose\r\n */\r\n\r\nTerminal.translateBufferLineToString = translateBufferLineToString;\r\nTerminal.EventEmitter = EventEmitter;\r\nTerminal.inherits = inherits;\r\n\r\n/**\r\n * Adds an event listener to the terminal.\r\n *\r\n * @param {string} event The name of the event. TODO: Document all event types\r\n * @param {function} callback The function to call when the event is triggered.\r\n */\r\nTerminal.on = on;\r\nTerminal.off = off;\r\nTerminal.cancel = cancel;\r\n\r\nmodule.exports = Terminal;\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { CharMeasure } from './CharMeasure';\r\n\r\nexport function getCoordsRelativeToElement(event: MouseEvent, element: HTMLElement): [number, number] {\r\n  // Ignore browsers that don't support MouseEvent.pageX\r\n  if (event.pageX == null) {\r\n    return null;\r\n  }\r\n\r\n  let x = event.pageX;\r\n  let y = event.pageY;\r\n\r\n  // Converts the coordinates from being relative to the document to being\r\n  // relative to the terminal.\r\n  while (element && element !== self.document.documentElement) {\r\n    x -= element.offsetLeft;\r\n    y -= element.offsetTop;\r\n    element = 'offsetParent' in element ? <HTMLElement>element.offsetParent : <HTMLElement>element.parentElement;\r\n  }\r\n  return [x, y];\r\n}\r\n\r\n/**\r\n * Gets coordinates within the terminal for a particular mouse event. The result\r\n * is returned as an array in the form [x, y] instead of an object as it's a\r\n * little faster and this function is used in some low level code.\r\n * @param event The mouse event.\r\n * @param rowContainer The terminal's row container.\r\n * @param charMeasure The char measure object used to determine character sizes.\r\n * @param colCount The number of columns in the terminal.\r\n * @param rowCount The number of rows n the terminal.\r\n * @param isSelection Whether the request is for the selection or not. This will\r\n * apply an offset to the x value such that the left half of the cell will\r\n * select that cell and the right half will select the next cell.\r\n */\r\nexport function getCoords(event: MouseEvent, rowContainer: HTMLElement, charMeasure: CharMeasure, colCount: number, rowCount: number, isSelection?: boolean): [number, number] {\r\n  // Coordinates cannot be measured if charMeasure has not been initialized\r\n  if (!charMeasure.width || !charMeasure.height) {\r\n    return null;\r\n  }\r\n\r\n  const coords = getCoordsRelativeToElement(event, rowContainer);\r\n  if (!coords) {\r\n    return null;\r\n  }\r\n\r\n  // Convert to cols/rows.\r\n  coords[0] = Math.ceil((coords[0] + (isSelection ? charMeasure.width / 2 : 0)) / charMeasure.width);\r\n  coords[1] = Math.ceil(coords[1] / charMeasure.height);\r\n\r\n  // Ensure coordinates are within the terminal viewport.\r\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + 1);\r\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount + 1);\r\n\r\n  return coords;\r\n}\r\n\r\n/**\r\n * Gets coordinates within the terminal for a particular mouse event, wrapping\r\n * them to the bounds of the terminal and adding 32 to both the x and y values\r\n * as expected by xterm.\r\n * @param event The mouse event.\r\n * @param rowContainer The terminal's row container.\r\n * @param charMeasure The char measure object used to determine character sizes.\r\n * @param colCount The number of columns in the terminal.\r\n * @param rowCount The number of rows in the terminal.\r\n */\r\nexport function getRawByteCoords(event: MouseEvent, rowContainer: HTMLElement, charMeasure: CharMeasure, colCount: number, rowCount: number): { x: number, y: number } {\r\n  const coords = getCoords(event, rowContainer, charMeasure, colCount, rowCount);\r\n  let x = coords[0];\r\n  let y = coords[1];\r\n\r\n  // xterm sends raw bytes and starts at 32 (SP) for each.\r\n  x += 32;\r\n  y += 32;\r\n\r\n  return { x, y };\r\n}\r\n","/**\r\n * Generic utilities module with methods that can be helpful at different parts of the code base.\r\n * @module xterm/utils/Generic\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * Return if the given array contains the given element\r\n * @param {Array} array The array to search for the given element.\r\n * @param {Object} el The element to look for into the array\r\n */\r\nexport function contains(arr: any[], el: any) {\r\n  return arr.indexOf(el) >= 0;\r\n};\r\n","/**\r\n * @module xterm/utils/DomElementObjectPool\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * An object pool that manages acquisition and releasing of DOM elements for\r\n * when reuse is desirable.\r\n */\r\nexport class DomElementObjectPool {\r\n  private static readonly OBJECT_ID_ATTRIBUTE = 'data-obj-id';\r\n\r\n  private static _objectCount = 0;\r\n\r\n  private _type: string;\r\n  private _pool: HTMLElement[];\r\n  private _inUse: {[key: string]: HTMLElement};\r\n\r\n  /**\r\n   * @param type The DOM element type (div, span, etc.).\r\n   */\r\n  constructor(private type: string) {\r\n    this._type = type;\r\n    this._pool = [];\r\n    this._inUse = {};\r\n  }\r\n\r\n  /**\r\n   * Acquire an element from the pool, creating it if the pool is empty.\r\n   */\r\n  public acquire(): HTMLElement {\r\n    let element: HTMLElement;\r\n    if (this._pool.length === 0) {\r\n      element = this._createNew();\r\n    } else {\r\n      element = this._pool.pop();\r\n    }\r\n    this._inUse[element.getAttribute(DomElementObjectPool.OBJECT_ID_ATTRIBUTE)] = element;\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Release an element back into the pool. It's up to the caller of this\r\n   * function to ensure that all external references to the element have been\r\n   * removed.\r\n   * @param element The element being released.\r\n   */\r\n  public release(element: HTMLElement): void {\r\n    if (!this._inUse[element.getAttribute(DomElementObjectPool.OBJECT_ID_ATTRIBUTE)]) {\r\n      throw new Error('Could not release an element not yet acquired');\r\n    }\r\n    delete this._inUse[element.getAttribute(DomElementObjectPool.OBJECT_ID_ATTRIBUTE)];\r\n    this._cleanElement(element);\r\n    this._pool.push(element);\r\n  }\r\n\r\n  /**\r\n   * Creates a new element for the pool.\r\n   */\r\n  private _createNew(): HTMLElement {\r\n    const element = document.createElement(this._type);\r\n    const id = DomElementObjectPool._objectCount++;\r\n    element.setAttribute(DomElementObjectPool.OBJECT_ID_ATTRIBUTE, id.toString(10));\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Resets an element back to a \"clean state\".\r\n   * @param element The element to be cleaned.\r\n   */\r\n  private _cleanElement(element: HTMLElement): void {\r\n    element.className = '';\r\n    element.innerHTML = '';\r\n  }\r\n}\r\n","/**\r\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\r\n * overriding values at the start of the list.\r\n * @module xterm/utils/CircularList\r\n * @license MIT\r\n */\r\nimport { EventEmitter } from '../EventEmitter';\r\nimport { ICircularList } from '../Interfaces';\r\n\r\nexport class CircularList<T> extends EventEmitter implements ICircularList<T> {\r\n  private _array: T[];\r\n  private _startIndex: number;\r\n  private _length: number;\r\n\r\n  constructor(maxLength: number) {\r\n    super();\r\n    this._array = new Array<T>(maxLength);\r\n    this._startIndex = 0;\r\n    this._length = 0;\r\n  }\r\n\r\n  public get maxLength(): number {\r\n    return this._array.length;\r\n  }\r\n\r\n  public set maxLength(newMaxLength: number) {\r\n    // Reconstruct array, starting at index 0. Only transfer values from the\r\n    // indexes 0 to length.\r\n    let newArray = new Array<T>(newMaxLength);\r\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\r\n      newArray[i] = this._array[this._getCyclicIndex(i)];\r\n    }\r\n    this._array = newArray;\r\n    this._startIndex = 0;\r\n  }\r\n\r\n  public get length(): number {\r\n    return this._length;\r\n  }\r\n\r\n  public set length(newLength: number) {\r\n    if (newLength > this._length) {\r\n      for (let i = this._length; i < newLength; i++) {\r\n        this._array[i] = undefined;\r\n      }\r\n    }\r\n    this._length = newLength;\r\n  }\r\n\r\n  public get forEach(): (callbackfn: (value: T, index: number) => void) => void {\r\n    return (callbackfn: (value: T, index: number) => void) => {\r\n      let i = 0;\r\n      let length = this.length;\r\n      for (let i = 0; i < length; i++) {\r\n        callbackfn(this.get(i), i);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Gets the value at an index.\r\n   *\r\n   * Note that for performance reasons there is no bounds checking here, the index reference is\r\n   * circular so this should always return a value and never throw.\r\n   * @param index The index of the value to get.\r\n   * @return The value corresponding to the index.\r\n   */\r\n  public get(index: number): T {\r\n    return this._array[this._getCyclicIndex(index)];\r\n  }\r\n\r\n  /**\r\n   * Sets the value at an index.\r\n   *\r\n   * Note that for performance reasons there is no bounds checking here, the index reference is\r\n   * circular so this should always return a value and never throw.\r\n   * @param index The index to set.\r\n   * @param value The value to set.\r\n   */\r\n  public set(index: number, value: T): void {\r\n    this._array[this._getCyclicIndex(index)] = value;\r\n  }\r\n\r\n  /**\r\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\r\n   * if the maximum length is reached.\r\n   * @param value The value to push onto the list.\r\n   */\r\n  public push(value: T): void {\r\n    this._array[this._getCyclicIndex(this._length)] = value;\r\n    if (this._length === this.maxLength) {\r\n      this._startIndex++;\r\n      if (this._startIndex === this.maxLength) {\r\n        this._startIndex = 0;\r\n      }\r\n      this.emit('trim', 1);\r\n    } else {\r\n      this._length++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes and returns the last value on the list.\r\n   * @return The popped value.\r\n   */\r\n  public pop(): T {\r\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\r\n  }\r\n\r\n  /**\r\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\r\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\r\n   * order to save creating a new array. Note that this operation may shift all values in the list\r\n   * in the worst case.\r\n   * @param start The index to delete and/or insert.\r\n   * @param deleteCount The number of elements to delete.\r\n   * @param items The items to insert.\r\n   */\r\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\r\n    // Delete items\r\n    if (deleteCount) {\r\n      for (let i = start; i < this._length - deleteCount; i++) {\r\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\r\n      }\r\n      this._length -= deleteCount;\r\n    }\r\n\r\n    if (items && items.length) {\r\n      // Add items\r\n      for (let i = this._length - 1; i >= start; i--) {\r\n        this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\r\n      }\r\n      for (let i = 0; i < items.length; i++) {\r\n        this._array[this._getCyclicIndex(start + i)] = items[i];\r\n      }\r\n\r\n      // Adjust length as needed\r\n      if (this._length + items.length > this.maxLength) {\r\n        const countToTrim = (this._length + items.length) - this.maxLength;\r\n        this._startIndex += countToTrim;\r\n        this._length = this.maxLength;\r\n        this.emit('trim', countToTrim);\r\n      } else {\r\n        this._length += items.length;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trims a number of items from the start of the list.\r\n   * @param count The number of items to remove.\r\n   */\r\n  public trimStart(count: number): void {\r\n    if (count > this._length) {\r\n      count = this._length;\r\n    }\r\n    this._startIndex += count;\r\n    this._length -= count;\r\n    this.emit('trim', count);\r\n  }\r\n\r\n  public shiftElements(start: number, count: number, offset: number): void {\r\n    if (count <= 0) {\r\n      return;\r\n    }\r\n    if (start < 0 || start >= this._length) {\r\n      throw new Error('start argument out of range');\r\n    }\r\n    if (start + offset < 0) {\r\n      throw new Error('Cannot shift elements in list beyond index 0');\r\n    }\r\n\r\n    if (offset > 0) {\r\n      for (let i = count - 1; i >= 0; i--) {\r\n        this.set(start + i + offset, this.get(start + i));\r\n      }\r\n      const expandListBy = (start + count + offset) - this._length;\r\n      if (expandListBy > 0) {\r\n        this._length += expandListBy;\r\n        while (this._length > this.maxLength) {\r\n          this._length--;\r\n          this._startIndex++;\r\n          this.emit('trim', 1);\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < count; i++) {\r\n        this.set(start + i + offset, this.get(start + i));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\r\n   * backing array to get the element associated with the regular index.\r\n   * @param index The regular index.\r\n   * @returns The cyclic index.\r\n   */\r\n  private _getCyclicIndex(index: number): number {\r\n    return (this._startIndex + index) % this.maxLength;\r\n  }\r\n}\r\n","/**\r\n * @module xterm/utils/CharMeasure\r\n * @license MIT\r\n */\r\n\r\nimport { EventEmitter } from '../EventEmitter.js';\r\n\r\n/**\r\n * Utility class that measures the size of a character.\r\n */\r\nexport class CharMeasure extends EventEmitter {\r\n  private _document: Document;\r\n  private _parentElement: HTMLElement;\r\n  private _measureElement: HTMLElement;\r\n  private _width: number;\r\n  private _height: number;\r\n\r\n  constructor(document: Document, parentElement: HTMLElement) {\r\n    super();\r\n    this._document = document;\r\n    this._parentElement = parentElement;\r\n  }\r\n\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  public measure(): void {\r\n    if (!this._measureElement) {\r\n      this._measureElement = this._document.createElement('span');\r\n      this._measureElement.style.position = 'absolute';\r\n      this._measureElement.style.top = '0';\r\n      this._measureElement.style.left = '-9999em';\r\n      this._measureElement.textContent = 'W';\r\n      this._measureElement.setAttribute('aria-hidden', 'true');\r\n      this._parentElement.appendChild(this._measureElement);\r\n      // Perform _doMeasure async if the element was just attached as sometimes\r\n      // getBoundingClientRect does not return accurate values without this.\r\n      setTimeout(() => this._doMeasure(), 0);\r\n    } else {\r\n      this._doMeasure();\r\n    }\r\n  }\r\n\r\n  private _doMeasure(): void {\r\n    const geometry = this._measureElement.getBoundingClientRect();\r\n    // The element is likely currently display:none, we should retain the\r\n    // previous value.\r\n    if (geometry.width === 0 || geometry.height === 0) {\r\n      return;\r\n    }\r\n    if (this._width !== geometry.width || this._height !== geometry.height) {\r\n      this._width = geometry.width;\r\n      this._height = geometry.height;\r\n      this.emit('charsizechanged');\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\n// TODO: This module should be merged into a buffer or buffer line class\r\n\r\nconst LINE_DATA_CHAR_INDEX = 1;\r\nconst LINE_DATA_WIDTH_INDEX = 2;\r\n\r\n/**\r\n * Translates a buffer line to a string, with optional start and end columns.\r\n * Wide characters will count as two columns in the resulting string. This\r\n * function is useful for getting the actual text underneath the raw selection\r\n * position.\r\n * @param line The line being translated.\r\n * @param trimRight Whether to trim whitespace to the right.\r\n * @param startCol The column to start at.\r\n * @param endCol The column to end at.\r\n */\r\nexport function translateBufferLineToString(line: any, trimRight: boolean, startCol: number = 0, endCol: number = null): string {\r\n  // Get full line\r\n  let lineString = '';\r\n  let widthAdjustedStartCol = startCol;\r\n  let widthAdjustedEndCol = endCol;\r\n  for (let i = 0; i < line.length; i++) {\r\n    const char = line[i];\r\n    lineString += char[LINE_DATA_CHAR_INDEX];\r\n    // Adjust start and end cols for wide characters if they affect their\r\n    // column indexes\r\n    if (char[LINE_DATA_WIDTH_INDEX] === 0) {\r\n      if (startCol >= i) {\r\n        widthAdjustedStartCol--;\r\n      }\r\n      if (endCol >= i) {\r\n        widthAdjustedEndCol--;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Calculate the final end col by trimming whitespace on the right of the\r\n  // line if needed.\r\n  let finalEndCol = widthAdjustedEndCol || line.length;\r\n  if (trimRight) {\r\n    const rightWhitespaceIndex = lineString.search(/\\s+$/);\r\n    if (rightWhitespaceIndex !== -1) {\r\n      finalEndCol = Math.min(finalEndCol, rightWhitespaceIndex);\r\n    }\r\n    // Return the empty string if only trimmed whitespace is selected\r\n    if (finalEndCol <= widthAdjustedStartCol) {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  return lineString.substring(widthAdjustedStartCol, finalEndCol);\r\n}\r\n","/**\r\n * Attributes and methods to help with identifying the current browser and platform.\r\n * @module xterm/utils/Browser\r\n * @license MIT\r\n */\r\n\r\nimport { contains } from './Generic';\r\n\r\nconst isNode = (typeof navigator === 'undefined') ? true : false;\r\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\r\nconst platform = (isNode) ? 'node' : navigator.platform;\r\n\r\nexport const isFirefox = !!~userAgent.indexOf('Firefox');\r\nexport const isMSIE = !!~userAgent.indexOf('MSIE') || !!~userAgent.indexOf('Trident');\r\n\r\n// Find the users platform. We use this to interpret the meta key\r\n// and ISO third level shifts.\r\n// http://stackoverflow.com/q/19877924/577598\r\nexport const isMac = contains(['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'], platform);\r\nexport const isIpad = platform === 'iPad';\r\nexport const isIphone = platform === 'iPhone';\r\nexport const isMSWindows = contains(['Windows', 'Win16', 'Win32', 'WinCE'], platform);\r\nexport const isLinux = platform.indexOf('Linux') >= 0;\r\n","/**\r\n * Clipboard handler module: exports methods for handling all clipboard-related events in the\r\n * terminal.\r\n * @module xterm/handlers/Clipboard\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, ISelectionManager } from '../Interfaces';\r\n\r\ninterface IWindow extends Window {\r\n  clipboardData?: {\r\n    getData(format: string): string;\r\n    setData(format: string, data: string);\r\n  };\r\n}\r\n\r\ndeclare var window: IWindow;\r\n\r\n/**\r\n * Prepares text to be pasted into the terminal by normalizing the line endings\r\n * @param text The pasted text that needs processing before inserting into the terminal\r\n */\r\nexport function prepareTextForTerminal(text: string, isMSWindows: boolean): string {\r\n  if (isMSWindows) {\r\n    return text.replace(/\\r?\\n/g, '\\r');\r\n  }\r\n  return text;\r\n}\r\n\r\n/**\r\n * Binds copy functionality to the given terminal.\r\n * @param {ClipboardEvent} ev The original copy event to be handled\r\n */\r\nexport function copyHandler(ev: ClipboardEvent, term: ITerminal, selectionManager: ISelectionManager) {\r\n  if (term.browser.isMSIE) {\r\n    window.clipboardData.setData('Text', selectionManager.selectionText);\r\n  } else {\r\n    ev.clipboardData.setData('text/plain', selectionManager.selectionText);\r\n  }\r\n\r\n  // Prevent or the original text will be copied.\r\n  ev.preventDefault();\r\n}\r\n\r\n/**\r\n * Redirect the clipboard's data to the terminal's input handler.\r\n * @param {ClipboardEvent} ev The original paste event to be handled\r\n * @param {Terminal} term The terminal on which to apply the handled paste event\r\n */\r\nexport function pasteHandler(ev: ClipboardEvent, term: ITerminal) {\r\n  ev.stopPropagation();\r\n\r\n  let text: string;\r\n\r\n  let dispatchPaste = function(text) {\r\n    text = prepareTextForTerminal(text, term.browser.isMSWindows);\r\n    term.handler(text);\r\n    term.textarea.value = '';\r\n    term.emit('paste', text);\r\n\r\n    return term.cancel(ev);\r\n  };\r\n\r\n  if (term.browser.isMSIE) {\r\n    if (window.clipboardData) {\r\n      text = window.clipboardData.getData('Text');\r\n      dispatchPaste(text);\r\n    }\r\n  } else {\r\n    if (ev.clipboardData) {\r\n      text = ev.clipboardData.getData('text/plain');\r\n      dispatchPaste(text);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Moves the textarea under the mouse cursor and focuses it.\r\n * @param ev The original right click event to be handled.\r\n * @param textarea The terminal's textarea.\r\n */\r\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement) {\r\n  // Bring textarea at the cursor position\r\n  textarea.style.position = 'fixed';\r\n  textarea.style.width = '20px';\r\n  textarea.style.height = '20px';\r\n  textarea.style.left = (ev.clientX - 10) + 'px';\r\n  textarea.style.top = (ev.clientY - 10) + 'px';\r\n  textarea.style.zIndex = '1000';\r\n\r\n  textarea.focus();\r\n\r\n  // Reset the terminal textarea's styling\r\n  setTimeout(function () {\r\n    textarea.style.position = null;\r\n    textarea.style.width = null;\r\n    textarea.style.height = null;\r\n    textarea.style.left = null;\r\n    textarea.style.top = null;\r\n    textarea.style.zIndex = null;\r\n  }, 4);\r\n}\r\n\r\n/**\r\n * Bind to right-click event and allow right-click copy and paste.\r\n * @param ev The original right click event to be handled.\r\n * @param textarea The terminal's textarea.\r\n * @param selectionManager The terminal's selection manager.\r\n */\r\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, selectionManager: ISelectionManager) {\r\n  moveTextAreaUnderMouseCursor(ev, textarea);\r\n\r\n  // Get textarea ready to copy from the context menu\r\n  textarea.value = selectionManager.selectionText;\r\n  textarea.select();\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from './Interfaces';\r\nimport { CharMeasure } from './utils/CharMeasure';\r\n\r\n/**\r\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\r\n * Logic for the virtual scroll bar is included in this object.\r\n */\r\nexport class Viewport {\r\n  private currentRowHeight: number;\r\n  private lastRecordedBufferLength: number;\r\n  private lastRecordedViewportHeight: number;\r\n  private lastTouchY: number;\r\n\r\n  /**\r\n   * Creates a new Viewport.\r\n   * @param terminal The terminal this viewport belongs to.\r\n   * @param viewportElement The DOM element acting as the viewport.\r\n   * @param scrollArea The DOM element acting as the scroll area.\r\n   * @param charMeasure A DOM element used to measure the character size of. the terminal.\r\n   */\r\n  constructor(\r\n    private terminal: ITerminal,\r\n    private viewportElement: HTMLElement,\r\n    private scrollArea: HTMLElement,\r\n    private charMeasure: CharMeasure\r\n  ) {\r\n    this.currentRowHeight = 0;\r\n    this.lastRecordedBufferLength = 0;\r\n    this.lastRecordedViewportHeight = 0;\r\n\r\n    this.terminal.on('scroll', this.syncScrollArea.bind(this));\r\n    this.terminal.on('resize', this.syncScrollArea.bind(this));\r\n    this.viewportElement.addEventListener('scroll', this.onScroll.bind(this));\r\n\r\n    // Perform this async to ensure the CharMeasure is ready.\r\n    setTimeout(() => this.syncScrollArea(), 0);\r\n  }\r\n\r\n  /**\r\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\r\n   * necessary.\r\n   */\r\n  private refresh(): void {\r\n    if (this.charMeasure.height > 0) {\r\n      const rowHeightChanged = this.charMeasure.height !== this.currentRowHeight;\r\n      if (rowHeightChanged) {\r\n        this.currentRowHeight = this.charMeasure.height;\r\n        this.viewportElement.style.lineHeight = this.charMeasure.height + 'px';\r\n        this.terminal.rowContainer.style.lineHeight = this.charMeasure.height + 'px';\r\n      }\r\n      const viewportHeightChanged = this.lastRecordedViewportHeight !== this.terminal.rows;\r\n      if (rowHeightChanged || viewportHeightChanged) {\r\n        this.lastRecordedViewportHeight = this.terminal.rows;\r\n        this.viewportElement.style.height = this.charMeasure.height * this.terminal.rows + 'px';\r\n        this.terminal.selectionContainer.style.height = this.viewportElement.style.height;\r\n      }\r\n      this.scrollArea.style.height = (this.charMeasure.height * this.lastRecordedBufferLength) + 'px';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates dimensions and synchronizes the scroll area if necessary.\r\n   */\r\n  public syncScrollArea(): void {\r\n    if (this.lastRecordedBufferLength !== this.terminal.buffer.lines.length) {\r\n      // If buffer height changed\r\n      this.lastRecordedBufferLength = this.terminal.buffer.lines.length;\r\n      this.refresh();\r\n    } else if (this.lastRecordedViewportHeight !== this.terminal.rows) {\r\n      // If viewport height changed\r\n      this.refresh();\r\n    } else {\r\n      // If size has changed, refresh viewport\r\n      if (this.charMeasure.height !== this.currentRowHeight) {\r\n        this.refresh();\r\n      }\r\n    }\r\n\r\n    // Sync scrollTop\r\n    const scrollTop = this.terminal.buffer.ydisp * this.currentRowHeight;\r\n    if (this.viewportElement.scrollTop !== scrollTop) {\r\n      this.viewportElement.scrollTop = scrollTop;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\r\n   * terminal to scroll to it.\r\n   * @param ev The scroll event.\r\n   */\r\n  private onScroll(ev: Event) {\r\n    const newRow = Math.round(this.viewportElement.scrollTop / this.currentRowHeight);\r\n    const diff = newRow - this.terminal.buffer.ydisp;\r\n    this.terminal.scrollDisp(diff, true);\r\n  }\r\n\r\n  /**\r\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\r\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\r\n   * `Viewport`.\r\n   * @param ev The mouse wheel event.\r\n   */\r\n  public onWheel(ev: WheelEvent) {\r\n    if (ev.deltaY === 0) {\r\n      // Do nothing if it's not a vertical scroll event\r\n      return;\r\n    }\r\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\r\n    let multiplier = 1;\r\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\r\n      multiplier = this.currentRowHeight;\r\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\r\n      multiplier = this.currentRowHeight * this.terminal.rows;\r\n    }\r\n    this.viewportElement.scrollTop += ev.deltaY * multiplier;\r\n    // Prevent the page from scrolling when the terminal scrolls\r\n    ev.preventDefault();\r\n  };\r\n\r\n  /**\r\n   * Handles the touchstart event, recording the touch occurred.\r\n   * @param ev The touch event.\r\n   */\r\n  public onTouchStart(ev: TouchEvent) {\r\n    this.lastTouchY = ev.touches[0].pageY;\r\n  };\r\n\r\n  /**\r\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\r\n   * @param ev The touch event.\r\n   */\r\n  public onTouchMove(ev: TouchEvent) {\r\n    let deltaY = this.lastTouchY - ev.touches[0].pageY;\r\n    this.lastTouchY = ev.touches[0].pageY;\r\n    if (deltaY === 0) {\r\n      return;\r\n    }\r\n    this.viewportElement.scrollTop += deltaY;\r\n    ev.preventDefault();\r\n  };\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from './Interfaces';\r\n\r\n/**\r\n * Represents a selection within the buffer. This model only cares about column\r\n * and row coordinates, not wide characters.\r\n */\r\nexport class SelectionModel {\r\n  /**\r\n   * Whether select all is currently active.\r\n   */\r\n  public isSelectAllActive: boolean;\r\n\r\n  /**\r\n   * The [x, y] position the selection starts at.\r\n   */\r\n  public selectionStart: [number, number];\r\n\r\n  /**\r\n   * The minimal length of the selection from the start position. When double\r\n   * clicking on a word, the word will be selected which makes the selection\r\n   * start at the start of the word and makes this variable the length.\r\n   */\r\n  public selectionStartLength: number;\r\n\r\n  /**\r\n   * The [x, y] position the selection ends at.\r\n   */\r\n  public selectionEnd: [number, number];\r\n\r\n  constructor(\r\n    private _terminal: ITerminal\r\n  ) {\r\n    this.clearSelection();\r\n  }\r\n\r\n  /**\r\n   * Clears the current selection.\r\n   */\r\n  public clearSelection(): void {\r\n    this.selectionStart = null;\r\n    this.selectionEnd = null;\r\n    this.isSelectAllActive = false;\r\n    this.selectionStartLength = 0;\r\n  }\r\n\r\n  /**\r\n   * The final selection start, taking into consideration select all.\r\n   */\r\n  public get finalSelectionStart(): [number, number] {\r\n    if (this.isSelectAllActive) {\r\n      return [0, 0];\r\n    }\r\n\r\n    if (!this.selectionEnd || !this.selectionStart) {\r\n      return this.selectionStart;\r\n    }\r\n\r\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\r\n  }\r\n\r\n  /**\r\n   * The final selection end, taking into consideration select all, double click\r\n   * word selection and triple click line selection.\r\n   */\r\n  public get finalSelectionEnd(): [number, number] {\r\n    if (this.isSelectAllActive) {\r\n      return [this._terminal.cols, this._terminal.buffer.ybase + this._terminal.rows - 1];\r\n    }\r\n\r\n    if (!this.selectionStart) {\r\n      return null;\r\n    }\r\n\r\n    // Use the selection start if the end doesn't exist or they're reversed\r\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\r\n      return [this.selectionStart[0] + this.selectionStartLength, this.selectionStart[1]];\r\n    }\r\n\r\n    // Ensure the the word/line is selected after a double/triple click\r\n    if (this.selectionStartLength) {\r\n      // Select the larger of the two when start and end are on the same line\r\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\r\n        return [Math.max(this.selectionStart[0] + this.selectionStartLength, this.selectionEnd[0]), this.selectionEnd[1]];\r\n      }\r\n    }\r\n    return this.selectionEnd;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the selection start and end are reversed.\r\n   */\r\n  public areSelectionValuesReversed(): boolean {\r\n    const start = this.selectionStart;\r\n    const end = this.selectionEnd;\r\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\r\n  }\r\n\r\n  /**\r\n   * Handle the buffer being trimmed, adjust the selection position.\r\n   * @param amount The amount the buffer is being trimmed.\r\n   * @return Whether a refresh is necessary.\r\n   */\r\n  public onTrim(amount: number): boolean {\r\n    // Adjust the selection position based on the trimmed amount.\r\n    if (this.selectionStart) {\r\n      this.selectionStart[1] -= amount;\r\n    }\r\n    if (this.selectionEnd) {\r\n      this.selectionEnd[1] -= amount;\r\n    }\r\n\r\n    // The selection has moved off the buffer, clear it.\r\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\r\n      this.clearSelection();\r\n      return true;\r\n    }\r\n\r\n    // If the selection start is trimmed, ensure the start column is 0.\r\n    if (this.selectionStart && this.selectionStart[1] < 0) {\r\n      this.selectionStart[1] = 0;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport * as Mouse from './utils/Mouse';\r\nimport * as Browser from './utils/Browser';\r\nimport { CharMeasure } from './utils/CharMeasure';\r\nimport { CircularList } from './utils/CircularList';\r\nimport { EventEmitter } from './EventEmitter';\r\nimport { ITerminal, ICircularList } from './Interfaces';\r\nimport { SelectionModel } from './SelectionModel';\r\nimport { translateBufferLineToString } from './utils/BufferLine';\r\n\r\n/**\r\n * The number of pixels the mouse needs to be above or below the viewport in\r\n * order to scroll at the maximum speed.\r\n */\r\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\r\n\r\n/**\r\n * The maximum scrolling speed\r\n */\r\nconst DRAG_SCROLL_MAX_SPEED = 15;\r\n\r\n/**\r\n * The number of milliseconds between drag scroll updates.\r\n */\r\nconst DRAG_SCROLL_INTERVAL = 50;\r\n\r\n/**\r\n * A string containing all characters that are considered word separated by the\r\n * double click to select work logic.\r\n */\r\nconst WORD_SEPARATORS = ' ()[]{}\\'\"';\r\n\r\n// TODO: Move these constants elsewhere, they belong in a buffer or buffer\r\n//       data/line class.\r\nconst LINE_DATA_CHAR_INDEX = 1;\r\nconst LINE_DATA_WIDTH_INDEX = 2;\r\n\r\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\r\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\r\n\r\n/**\r\n * Represents a position of a word on a line.\r\n */\r\ninterface IWordPosition {\r\n  start: number;\r\n  length: number;\r\n}\r\n\r\n/**\r\n * A selection mode, this drives how the selection behaves on mouse move.\r\n */\r\nenum SelectionMode {\r\n  NORMAL,\r\n  WORD,\r\n  LINE\r\n}\r\n\r\n/**\r\n * A class that manages the selection of the terminal. With help from\r\n * SelectionModel, SelectionManager handles with all logic associated with\r\n * dealing with the selection, including handling mouse interaction, wide\r\n * characters and fetching the actual text within the selection. Rendering is\r\n * not handled by the SelectionManager but a 'refresh' event is fired when the\r\n * selection is ready to be redrawn.\r\n */\r\nexport class SelectionManager extends EventEmitter {\r\n  protected _model: SelectionModel;\r\n\r\n  /**\r\n   * The amount to scroll every drag scroll update (depends on how far the mouse\r\n   * drag is above or below the terminal).\r\n   */\r\n  private _dragScrollAmount: number;\r\n\r\n  /**\r\n   * The current selection mode.\r\n   */\r\n  private _activeSelectionMode: SelectionMode;\r\n\r\n  /**\r\n   * A setInterval timer that is active while the mouse is down whose callback\r\n   * scrolls the viewport when necessary.\r\n   */\r\n  private _dragScrollIntervalTimer: NodeJS.Timer;\r\n\r\n  /**\r\n   * The animation frame ID used for refreshing the selection.\r\n   */\r\n  private _refreshAnimationFrame: number;\r\n\r\n  /**\r\n   * Whether selection is enabled.\r\n   */\r\n  private _enabled = true;\r\n\r\n  private _mouseMoveListener: EventListener;\r\n  private _mouseUpListener: EventListener;\r\n\r\n  constructor(\r\n    private _terminal: ITerminal,\r\n    private _buffer: ICircularList<[number, string, number][]>,\r\n    private _rowContainer: HTMLElement,\r\n    private _charMeasure: CharMeasure\r\n  ) {\r\n    super();\r\n    this._initListeners();\r\n    this.enable();\r\n\r\n    this._model = new SelectionModel(_terminal);\r\n    this._activeSelectionMode = SelectionMode.NORMAL;\r\n  }\r\n\r\n  /**\r\n   * Initializes listener variables.\r\n   */\r\n  private _initListeners() {\r\n    this._mouseMoveListener = event => this._onMouseMove(<MouseEvent>event);\r\n    this._mouseUpListener = event => this._onMouseUp(<MouseEvent>event);\r\n\r\n    this._rowContainer.addEventListener('mousedown', event => this._onMouseDown(<MouseEvent>event));\r\n\r\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\r\n    // reverseIndex) and delete in a splice is only ever used when the same\r\n    // number of elements was just added. Given this is could actually be\r\n    // beneficial to leave the selection as is for these cases.\r\n    this._buffer.on('trim', (amount: number) => this._onTrim(amount));\r\n  }\r\n\r\n  /**\r\n   * Disables the selection manager. This is useful for when terminal mouse\r\n   * are enabled.\r\n   */\r\n  public disable() {\r\n    this.clearSelection();\r\n    this._enabled = false;\r\n  }\r\n\r\n  /**\r\n   * Enable the selection manager.\r\n   */\r\n  public enable() {\r\n    this._enabled = true;\r\n  }\r\n\r\n  /**\r\n   * Sets the active buffer, this should be called when the alt buffer is\r\n   * switched in or out.\r\n   * @param buffer The active buffer.\r\n   */\r\n  public setBuffer(buffer: ICircularList<[number, string, number][]>): void {\r\n    this._buffer = buffer;\r\n    this.clearSelection();\r\n  }\r\n\r\n  public get selectionStart(): [number, number] { return this._model.finalSelectionStart; }\r\n  public get selectionEnd(): [number, number] { return this._model.finalSelectionEnd; }\r\n\r\n  /**\r\n   * Gets whether there is an active text selection.\r\n   */\r\n  public get hasSelection(): boolean {\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n    if (!start || !end) {\r\n      return false;\r\n    }\r\n    return start[0] !== end[0] || start[1] !== end[1];\r\n  }\r\n\r\n  /**\r\n   * Gets the text currently selected.\r\n   */\r\n  public get selectionText(): string {\r\n    const start = this._model.finalSelectionStart;\r\n    const end = this._model.finalSelectionEnd;\r\n    if (!start || !end) {\r\n      return '';\r\n    }\r\n\r\n    // Get first row\r\n    const startRowEndCol = start[1] === end[1] ? end[0] : null;\r\n    let result: string[] = [];\r\n    result.push(translateBufferLineToString(this._buffer.get(start[1]), true, start[0], startRowEndCol));\r\n\r\n    // Get middle rows\r\n    for (let i = start[1] + 1; i <= end[1] - 1; i++) {\r\n      const bufferLine = this._buffer.get(i);\r\n      const lineText = translateBufferLineToString(bufferLine, true);\r\n      if ((<any>bufferLine).isWrapped) {\r\n        result[result.length - 1] += lineText;\r\n      } else {\r\n        result.push(lineText);\r\n      }\r\n    }\r\n\r\n    // Get final row\r\n    if (start[1] !== end[1]) {\r\n      const bufferLine = this._buffer.get(end[1]);\r\n      const lineText = translateBufferLineToString(bufferLine, true, 0, end[0]);\r\n      if ((<any>bufferLine).isWrapped) {\r\n        result[result.length - 1] += lineText;\r\n      } else {\r\n        result.push(lineText);\r\n      }\r\n    }\r\n\r\n    // Format string by replacing non-breaking space chars with regular spaces\r\n    // and joining the array into a multi-line string.\r\n    const formattedResult = result.map(line => {\r\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\r\n    }).join(Browser.isMSWindows ? '\\r\\n' : '\\n');\r\n\r\n    return formattedResult;\r\n  }\r\n\r\n  /**\r\n   * Clears the current terminal selection.\r\n   */\r\n  public clearSelection(): void {\r\n    this._model.clearSelection();\r\n    this._removeMouseDownListeners();\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Queues a refresh, redrawing the selection on the next opportunity.\r\n   * @param isNewSelection Whether the selection should be registered as a new\r\n   * selection on Linux.\r\n   */\r\n  public refresh(isNewSelection?: boolean): void {\r\n    // Queue the refresh for the renderer\r\n    if (!this._refreshAnimationFrame) {\r\n      this._refreshAnimationFrame = window.requestAnimationFrame(() => this._refresh());\r\n    }\r\n\r\n    // If the platform is Linux and the refresh call comes from a mouse event,\r\n    // we need to update the selection for middle click to paste selection.\r\n    if (Browser.isLinux && isNewSelection) {\r\n      const selectionText = this.selectionText;\r\n      if (selectionText.length) {\r\n        this.emit('newselection', this.selectionText);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fires the refresh event, causing consumers to pick it up and redraw the\r\n   * selection state.\r\n   */\r\n  private _refresh(): void {\r\n    this._refreshAnimationFrame = null;\r\n    this.emit('refresh', { start: this._model.finalSelectionStart, end: this._model.finalSelectionEnd });\r\n  }\r\n\r\n  /**\r\n   * Selects all text within the terminal.\r\n   */\r\n  public selectAll(): void {\r\n    this._model.isSelectAllActive = true;\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Handle the buffer being trimmed, adjust the selection position.\r\n   * @param amount The amount the buffer is being trimmed.\r\n   */\r\n  private _onTrim(amount: number) {\r\n    const needsRefresh = this._model.onTrim(amount);\r\n    if (needsRefresh) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\r\n   * @param event The mouse event.\r\n   */\r\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] {\r\n    const coords = Mouse.getCoords(event, this._rowContainer, this._charMeasure, this._terminal.cols, this._terminal.rows, true);\r\n    if (!coords) {\r\n      return null;\r\n    }\r\n\r\n    // Convert to 0-based\r\n    coords[0]--;\r\n    coords[1]--;\r\n    // Convert viewport coords to buffer coords\r\n    coords[1] += this._terminal.buffer.ydisp;\r\n    return coords;\r\n  }\r\n\r\n  /**\r\n   * Gets the amount the viewport should be scrolled based on how far out of the\r\n   * terminal the mouse is.\r\n   * @param event The mouse event.\r\n   */\r\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\r\n    let offset = Mouse.getCoordsRelativeToElement(event, this._rowContainer)[1];\r\n    const terminalHeight = this._terminal.rows * this._charMeasure.height;\r\n    if (offset >= 0 && offset <= terminalHeight) {\r\n      return 0;\r\n    }\r\n    if (offset > terminalHeight) {\r\n      offset -= terminalHeight;\r\n    }\r\n\r\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\r\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\r\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\r\n  }\r\n\r\n  /**\r\n   * Handles te mousedown event, setting up for a new selection.\r\n   * @param event The mousedown event.\r\n   */\r\n  private _onMouseDown(event: MouseEvent) {\r\n    // If we have selection, we want the context menu on right click even if the\r\n    // terminal is in mouse mode.\r\n    if (event.button === 2 && this.hasSelection) {\r\n      event.stopPropagation();\r\n      return;\r\n    }\r\n\r\n    // Only action the primary button\r\n    if (event.button !== 0) {\r\n      return;\r\n    }\r\n\r\n    // Allow selection when using a specific modifier key, even when disabled\r\n    if (!this._enabled) {\r\n      const shouldForceSelection = Browser.isMac && event.altKey;\r\n\r\n      if (!shouldForceSelection) {\r\n        return;\r\n      }\r\n\r\n      // Don't send the mouse down event to the current process, we want to select\r\n      event.stopPropagation();\r\n    }\r\n\r\n    // Tell the browser not to start a regular selection\r\n    event.preventDefault();\r\n\r\n    // Reset drag scroll state\r\n    this._dragScrollAmount = 0;\r\n\r\n    if (this._enabled && event.shiftKey) {\r\n      this._onIncrementalClick(event);\r\n    } else {\r\n      if (event.detail === 1) {\r\n        this._onSingleClick(event);\r\n      } else if (event.detail === 2) {\r\n        this._onDoubleClick(event);\r\n      } else if (event.detail === 3) {\r\n        this._onTripleClick(event);\r\n      }\r\n    }\r\n\r\n    this._addMouseDownListeners();\r\n    this.refresh(true);\r\n  }\r\n\r\n  /**\r\n   * Adds listeners when mousedown is triggered.\r\n   */\r\n  private _addMouseDownListeners(): void {\r\n    // Listen on the document so that dragging outside of viewport works\r\n    this._rowContainer.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\r\n    this._rowContainer.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\r\n    this._dragScrollIntervalTimer = setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\r\n  }\r\n\r\n  /**\r\n   * Removes the listeners that are registered when mousedown is triggered.\r\n   */\r\n  private _removeMouseDownListeners(): void {\r\n    this._rowContainer.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\r\n    this._rowContainer.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\r\n    clearInterval(this._dragScrollIntervalTimer);\r\n    this._dragScrollIntervalTimer = null;\r\n  }\r\n\r\n  /**\r\n   * Performs an incremental click, setting the selection end position to the mouse\r\n   * position.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onIncrementalClick(event: MouseEvent): void {\r\n    if (this._model.selectionStart) {\r\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a single click, resetting relevant state and setting the selection\r\n   * start position.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onSingleClick(event: MouseEvent): void {\r\n    this._model.selectionStartLength = 0;\r\n    this._model.isSelectAllActive = false;\r\n    this._activeSelectionMode = SelectionMode.NORMAL;\r\n\r\n    // Initialize the new selection\r\n    this._model.selectionStart = this._getMouseBufferCoords(event);\r\n    if (!this._model.selectionStart) {\r\n      return;\r\n    }\r\n    this._model.selectionEnd = null;\r\n\r\n    // Ensure the line exists\r\n    const line = this._buffer.get(this._model.selectionStart[1]);\r\n    if (!line) {\r\n      return;\r\n    }\r\n\r\n    // If the mouse is over the second half of a wide character, adjust the\r\n    // selection to cover the whole character\r\n    const char = line[this._model.selectionStart[0]];\r\n    if (char[LINE_DATA_WIDTH_INDEX] === 0) {\r\n      this._model.selectionStart[0]++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a double click, selecting the current work.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onDoubleClick(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._activeSelectionMode = SelectionMode.WORD;\r\n      this._selectWordAt(coords);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs a triple click, selecting the current line and activating line\r\n   * select mode.\r\n   * @param event The mouse event.\r\n   */\r\n  private _onTripleClick(event: MouseEvent): void {\r\n    const coords = this._getMouseBufferCoords(event);\r\n    if (coords) {\r\n      this._activeSelectionMode = SelectionMode.LINE;\r\n      this._selectLineAt(coords[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the mousemove event when the mouse button is down, recording the\r\n   * end of the selection and refreshing the selection.\r\n   * @param event The mousemove event.\r\n   */\r\n  private _onMouseMove(event: MouseEvent) {\r\n    // Record the previous position so we know whether to redraw the selection\r\n    // at the end.\r\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\r\n\r\n    // Set the initial selection end based on the mouse coordinates\r\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\r\n    if (!this._model.selectionEnd) {\r\n      this.refresh(true);\r\n      return;\r\n    }\r\n\r\n    // Select the entire line if line select mode is active.\r\n    if (this._activeSelectionMode === SelectionMode.LINE) {\r\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\r\n        this._model.selectionEnd[0] = 0;\r\n      } else {\r\n        this._model.selectionEnd[0] = this._terminal.cols;\r\n      }\r\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\r\n      this._selectToWordAt(this._model.selectionEnd);\r\n    }\r\n\r\n    // Determine the amount of scrolling that will happen.\r\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\r\n\r\n    // If the cursor was above or below the viewport, make sure it's at the\r\n    // start or end of the viewport respectively.\r\n    if (this._dragScrollAmount > 0) {\r\n      this._model.selectionEnd[0] = this._terminal.cols - 1;\r\n    } else if (this._dragScrollAmount < 0) {\r\n      this._model.selectionEnd[0] = 0;\r\n    }\r\n\r\n    // If the character is a wide character include the cell to the right in the\r\n    // selection. Note that selections at the very end of the line will never\r\n    // have a character.\r\n    if (this._model.selectionEnd[1] < this._buffer.length) {\r\n      const char = this._buffer.get(this._model.selectionEnd[1])[this._model.selectionEnd[0]];\r\n      if (char && char[2] === 0) {\r\n        this._model.selectionEnd[0]++;\r\n      }\r\n    }\r\n\r\n    // Only draw here if the selection changes.\r\n    if (!previousSelectionEnd ||\r\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\r\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\r\n      this.refresh(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\r\n   * scrolling of the viewport.\r\n   */\r\n  private _dragScroll() {\r\n    if (this._dragScrollAmount) {\r\n      this._terminal.scrollDisp(this._dragScrollAmount, false);\r\n      // Re-evaluate selection\r\n      if (this._dragScrollAmount > 0) {\r\n        this._model.selectionEnd = [this._terminal.cols - 1, this._terminal.buffer.ydisp + this._terminal.rows];\r\n      } else {\r\n        this._model.selectionEnd = [0, this._terminal.buffer.ydisp];\r\n      }\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles the mouseup event, removing the mousedown listeners.\r\n   * @param event The mouseup event.\r\n   */\r\n  private _onMouseUp(event: MouseEvent) {\r\n    this._removeMouseDownListeners();\r\n  }\r\n\r\n  /**\r\n   * Converts a viewport column to the character index on the buffer line, the\r\n   * latter takes into account wide characters.\r\n   * @param coords The coordinates to find the 2 index for.\r\n   */\r\n  private _convertViewportColToCharacterIndex(bufferLine: any, coords: [number, number]): number {\r\n    let charIndex = coords[0];\r\n    for (let i = 0; coords[0] >= i; i++) {\r\n      const char = bufferLine[i];\r\n      if (char[LINE_DATA_WIDTH_INDEX] === 0) {\r\n        charIndex--;\r\n      }\r\n    }\r\n    return charIndex;\r\n  }\r\n\r\n  public setSelection(col: number, row: number, length: number): void {\r\n    this._model.clearSelection();\r\n    this._removeMouseDownListeners();\r\n    this._model.selectionStart = [col, row];\r\n    this._model.selectionStartLength = length;\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Gets positional information for the word at the coordinated specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  private _getWordAt(coords: [number, number]): IWordPosition {\r\n    const bufferLine = this._buffer.get(coords[1]);\r\n    if (!bufferLine) {\r\n      return null;\r\n    }\r\n\r\n    const line = translateBufferLineToString(bufferLine, false);\r\n\r\n    // Get actual index, taking into consideration wide characters\r\n    let endIndex = this._convertViewportColToCharacterIndex(bufferLine, coords);\r\n    let startIndex = endIndex;\r\n\r\n    // Record offset to be used later\r\n    const charOffset = coords[0] - startIndex;\r\n    let leftWideCharCount = 0;\r\n    let rightWideCharCount = 0;\r\n\r\n    if (line.charAt(startIndex) === ' ') {\r\n      // Expand until non-whitespace is hit\r\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\r\n        startIndex--;\r\n      }\r\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\r\n        endIndex++;\r\n      }\r\n    } else {\r\n      // Expand until whitespace is hit. This algorithm works by scanning left\r\n      // and right from the starting position, keeping both the index format\r\n      // (line) and the column format (bufferLine) in sync. When a wide\r\n      // character is hit, it is recorded and the column index is adjusted.\r\n      let startCol = coords[0];\r\n      let endCol = coords[0];\r\n      // Consider the initial position, skip it and increment the wide char\r\n      // variable\r\n      if (bufferLine[startCol][LINE_DATA_WIDTH_INDEX] === 0) {\r\n        leftWideCharCount++;\r\n        startCol--;\r\n      }\r\n      if (bufferLine[endCol][LINE_DATA_WIDTH_INDEX] === 2) {\r\n        rightWideCharCount++;\r\n        endCol++;\r\n      }\r\n      // Expand the string in both directions until a space is hit\r\n      while (startIndex > 0 && !this._isCharWordSeparator(line.charAt(startIndex - 1))) {\r\n        if (bufferLine[startCol - 1][LINE_DATA_WIDTH_INDEX] === 0) {\r\n          // If the next character is a wide char, record it and skip the column\r\n          leftWideCharCount++;\r\n          startCol--;\r\n        }\r\n        startIndex--;\r\n        startCol--;\r\n      }\r\n      while (endIndex + 1 < line.length && !this._isCharWordSeparator(line.charAt(endIndex + 1))) {\r\n        if (bufferLine[endCol + 1][LINE_DATA_WIDTH_INDEX] === 2) {\r\n          // If the next character is a wide char, record it and skip the column\r\n          rightWideCharCount++;\r\n          endCol++;\r\n        }\r\n        endIndex++;\r\n        endCol++;\r\n      }\r\n    }\r\n\r\n    const start = startIndex + charOffset - leftWideCharCount;\r\n    const length = Math.min(endIndex - startIndex + leftWideCharCount + rightWideCharCount + 1/*include endIndex char*/, this._terminal.cols);\r\n    return { start, length };\r\n  }\r\n\r\n  /**\r\n   * Selects the word at the coordinates specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  protected _selectWordAt(coords: [number, number]): void {\r\n    const wordPosition = this._getWordAt(coords);\r\n    if (wordPosition) {\r\n      this._model.selectionStart = [wordPosition.start, coords[1]];\r\n      this._model.selectionStartLength = wordPosition.length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection end to the word at the coordinated specified.\r\n   * @param coords The coordinates to get the word at.\r\n   */\r\n  private _selectToWordAt(coords: [number, number]): void {\r\n    const wordPosition = this._getWordAt(coords);\r\n    if (wordPosition) {\r\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : (wordPosition.start + wordPosition.length), coords[1]];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets whether the character is considered a word separator by the select\r\n   * word logic.\r\n   * @param char The character to check.\r\n   */\r\n  private _isCharWordSeparator(char: string): boolean {\r\n    return WORD_SEPARATORS.indexOf(char) >= 0;\r\n  }\r\n\r\n  /**\r\n   * Selects the line specified.\r\n   * @param line The line index.\r\n   */\r\n  protected _selectLineAt(line: number): void {\r\n    this._model.selectionStart = [0, line];\r\n    this._model.selectionStartLength = this._terminal.cols;\r\n  }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from './Interfaces';\r\nimport { DomElementObjectPool } from './utils/DomElementObjectPool';\r\n\r\n/**\r\n * The maximum number of refresh frames to skip when the write buffer is non-\r\n * empty. Note that these frames may be intermingled with frames that are\r\n * skipped via requestAnimationFrame's mechanism.\r\n */\r\nconst MAX_REFRESH_FRAME_SKIP = 5;\r\n\r\n/**\r\n * Flags used to render terminal text properly.\r\n */\r\nenum FLAGS {\r\n  BOLD = 1,\r\n  UNDERLINE = 2,\r\n  BLINK = 4,\r\n  INVERSE = 8,\r\n  INVISIBLE = 16\r\n};\r\n\r\nlet brokenBold: boolean = null;\r\n\r\nexport class Renderer {\r\n  /** A queue of the rows to be refreshed */\r\n  private _refreshRowsQueue: {start: number, end: number}[] = [];\r\n  private _refreshFramesSkipped = 0;\r\n  private _refreshAnimationFrame = null;\r\n\r\n  private _spanElementObjectPool = new DomElementObjectPool('span');\r\n\r\n  constructor(private _terminal: ITerminal) {\r\n    // Figure out whether boldness affects\r\n    // the character width of monospace fonts.\r\n    if (brokenBold === null) {\r\n      brokenBold = checkBoldBroken((<any>this._terminal).element);\r\n    }\r\n    this._spanElementObjectPool = new DomElementObjectPool('span');\r\n\r\n    // TODO: Pull more DOM interactions into Renderer.constructor, element for\r\n    // example should be owned by Renderer (and also exposed by Terminal due to\r\n    // to established public API).\r\n  }\r\n\r\n  /**\r\n   * Queues a refresh between two rows (inclusive), to be done on next animation\r\n   * frame.\r\n   * @param {number} start The start row.\r\n   * @param {number} end The end row.\r\n   */\r\n  public queueRefresh(start: number, end: number): void {\r\n    this._refreshRowsQueue.push({ start: start, end: end });\r\n    if (!this._refreshAnimationFrame) {\r\n      this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs the refresh loop callback, calling refresh only if a refresh is\r\n   * necessary before queueing up the next one.\r\n   */\r\n  private _refreshLoop(): void {\r\n    // Skip MAX_REFRESH_FRAME_SKIP frames if the writeBuffer is non-empty as it\r\n    // will need to be immediately refreshed anyway. This saves a lot of\r\n    // rendering time as the viewport DOM does not need to be refreshed, no\r\n    // scroll events, no layouts, etc.\r\n    const skipFrame = this._terminal.writeBuffer.length > 0 && this._refreshFramesSkipped++ <= MAX_REFRESH_FRAME_SKIP;\r\n    if (skipFrame) {\r\n      this._refreshAnimationFrame = window.requestAnimationFrame(this._refreshLoop.bind(this));\r\n      return;\r\n    }\r\n\r\n    this._refreshFramesSkipped = 0;\r\n    let start;\r\n    let end;\r\n    if (this._refreshRowsQueue.length > 4) {\r\n      // Just do a full refresh when 5+ refreshes are queued\r\n      start = 0;\r\n      end = this._terminal.rows - 1;\r\n    } else {\r\n      // Get start and end rows that need refreshing\r\n      start = this._refreshRowsQueue[0].start;\r\n      end = this._refreshRowsQueue[0].end;\r\n      for (let i = 1; i < this._refreshRowsQueue.length; i++) {\r\n        if (this._refreshRowsQueue[i].start < start) {\r\n          start = this._refreshRowsQueue[i].start;\r\n        }\r\n        if (this._refreshRowsQueue[i].end > end) {\r\n          end = this._refreshRowsQueue[i].end;\r\n        }\r\n      }\r\n    }\r\n    this._refreshRowsQueue = [];\r\n    this._refreshAnimationFrame = null;\r\n    this._refresh(start, end);\r\n  }\r\n\r\n  /**\r\n   * Refreshes (re-renders) terminal content within two rows (inclusive)\r\n   *\r\n   * Rendering Engine:\r\n   *\r\n   * In the screen buffer, each character is stored as a an array with a character\r\n   * and a 32-bit integer:\r\n   *   - First value: a utf-16 character.\r\n   *   - Second value:\r\n   *   - Next 9 bits: background color (0-511).\r\n   *   - Next 9 bits: foreground color (0-511).\r\n   *   - Next 14 bits: a mask for misc. flags:\r\n   *     - 1=bold\r\n   *     - 2=underline\r\n   *     - 4=blink\r\n   *     - 8=inverse\r\n   *     - 16=invisible\r\n   *\r\n   * @param {number} start The row to start from (between 0 and terminal's height terminal - 1)\r\n   * @param {number} end The row to end at (between fromRow and terminal's height terminal - 1)\r\n   */\r\n  private _refresh(start: number, end: number): void {\r\n    // If this is a big refresh, remove the terminal rows from the DOM for faster calculations\r\n    let parent;\r\n    if (end - start >= this._terminal.rows / 2) {\r\n      parent = this._terminal.element.parentNode;\r\n      if (parent) {\r\n        this._terminal.element.removeChild(this._terminal.rowContainer);\r\n      }\r\n    }\r\n\r\n    let width = this._terminal.cols;\r\n    let y = start;\r\n\r\n    if (end >= this._terminal.rows) {\r\n      this._terminal.log('`end` is too large. Most likely a bad CSR.');\r\n      end = this._terminal.rows - 1;\r\n    }\r\n\r\n    for (; y <= end; y++) {\r\n      let row = y + this._terminal.buffer.ydisp;\r\n\r\n      let line = this._terminal.buffer.lines.get(row);\r\n\r\n      let x;\r\n      if (this._terminal.buffer.y === y - (this._terminal.buffer.ybase - this._terminal.buffer.ydisp) &&\r\n          this._terminal.cursorState &&\r\n          !this._terminal.cursorHidden) {\r\n        x = this._terminal.buffer.x;\r\n      } else {\r\n        x = -1;\r\n      }\r\n\r\n      let attr = this._terminal.defAttr;\r\n\r\n      const documentFragment = document.createDocumentFragment();\r\n      let innerHTML = '';\r\n      let currentElement;\r\n\r\n      // Return the row's spans to the pool\r\n      while (this._terminal.children[y].children.length) {\r\n        const child = this._terminal.children[y].children[0];\r\n        this._terminal.children[y].removeChild(child);\r\n        this._spanElementObjectPool.release(<HTMLElement>child);\r\n      }\r\n\r\n      for (let i = 0; i < width; i++) {\r\n        // TODO: Could data be a more specific type?\r\n        let data: any = line[i][0];\r\n        const ch = line[i][1];\r\n        const ch_width: any = line[i][2];\r\n        const isCursor: boolean = i === x;\r\n        if (!ch_width) {\r\n          continue;\r\n        }\r\n\r\n        if (data !== attr || isCursor) {\r\n          if (attr !== this._terminal.defAttr && !isCursor) {\r\n            if (innerHTML) {\r\n              currentElement.innerHTML = innerHTML;\r\n              innerHTML = '';\r\n            }\r\n            documentFragment.appendChild(currentElement);\r\n            currentElement = null;\r\n          }\r\n          if (data !== this._terminal.defAttr || isCursor) {\r\n            if (innerHTML && !currentElement) {\r\n              currentElement = this._spanElementObjectPool.acquire();\r\n            }\r\n            if (currentElement) {\r\n              if (innerHTML) {\r\n                currentElement.innerHTML = innerHTML;\r\n                innerHTML = '';\r\n              }\r\n              documentFragment.appendChild(currentElement);\r\n            }\r\n            currentElement = this._spanElementObjectPool.acquire();\r\n\r\n            let bg = data & 0x1ff;\r\n            let fg = (data >> 9) & 0x1ff;\r\n            let flags = data >> 18;\r\n\r\n            if (isCursor) {\r\n              currentElement.classList.add('reverse-video');\r\n              currentElement.classList.add('terminal-cursor');\r\n            }\r\n\r\n            if (flags & FLAGS.BOLD) {\r\n              if (!brokenBold) {\r\n                currentElement.classList.add('xterm-bold');\r\n              }\r\n              // See: XTerm*boldColors\r\n              if (fg < 8) {\r\n                fg += 8;\r\n              }\r\n            }\r\n\r\n            if (flags & FLAGS.UNDERLINE) {\r\n              currentElement.classList.add('xterm-underline');\r\n            }\r\n\r\n            if (flags & FLAGS.BLINK) {\r\n              currentElement.classList.add('xterm-blink');\r\n            }\r\n\r\n            // If inverse flag is on, then swap the foreground and background variables.\r\n            if (flags & FLAGS.INVERSE) {\r\n              let temp = bg;\r\n              bg = fg;\r\n              fg = temp;\r\n              // Should inverse just be before the above boldColors effect instead?\r\n              if ((flags & 1) && fg < 8) {\r\n                fg += 8;\r\n              }\r\n            }\r\n\r\n            if (flags & FLAGS.INVISIBLE && !isCursor) {\r\n              currentElement.classList.add('xterm-hidden');\r\n            }\r\n\r\n            /**\r\n             * Weird situation: Invert flag used black foreground and white background results\r\n             * in invalid background color, positioned at the 256 index of the 256 terminal\r\n             * color map. Pin the colors manually in such a case.\r\n             *\r\n             * Source: https://github.com/sourcelair/xterm.js/issues/57\r\n             */\r\n            if (flags & FLAGS.INVERSE) {\r\n              if (bg === 257) {\r\n                bg = 15;\r\n              }\r\n              if (fg === 256) {\r\n                fg = 0;\r\n              }\r\n            }\r\n\r\n            if (bg < 256) {\r\n              currentElement.classList.add(`xterm-bg-color-${bg}`);\r\n            }\r\n\r\n            if (fg < 256) {\r\n              currentElement.classList.add(`xterm-color-${fg}`);\r\n            }\r\n\r\n          }\r\n        }\r\n\r\n        if (ch_width === 2) {\r\n          // Wrap wide characters so they're sized correctly. It's more difficult to release these\r\n          // from the object pool so just create new ones via innerHTML.\r\n          innerHTML += `<span class=\"xterm-wide-char\">${ch}</span>`;\r\n        } else if (ch.charCodeAt(0) > 255) {\r\n          // Wrap any non-wide unicode character as some fonts size them badly\r\n          innerHTML += `<span class=\"xterm-normal-char\">${ch}</span>`;\r\n        } else {\r\n          switch (ch) {\r\n            case '&':\r\n              innerHTML += '&amp;';\r\n              break;\r\n            case '<':\r\n              innerHTML += '&lt;';\r\n              break;\r\n            case '>':\r\n              innerHTML += '&gt;';\r\n              break;\r\n            default:\r\n              if (ch <= ' ') {\r\n                innerHTML += '&nbsp;';\r\n              } else {\r\n                innerHTML += ch;\r\n              }\r\n              break;\r\n          }\r\n        }\r\n\r\n        // The cursor needs its own element, therefore we set attr to -1\r\n        // which will cause the next character to be rendered in a new element\r\n        attr = isCursor ? -1 : data;\r\n\r\n      }\r\n\r\n      if (innerHTML && !currentElement) {\r\n        currentElement = this._spanElementObjectPool.acquire();\r\n      }\r\n      if (currentElement) {\r\n        if (innerHTML) {\r\n          currentElement.innerHTML = innerHTML;\r\n          innerHTML = '';\r\n        }\r\n        documentFragment.appendChild(currentElement);\r\n        currentElement = null;\r\n      }\r\n\r\n      this._terminal.children[y].appendChild(documentFragment);\r\n    }\r\n\r\n    if (parent) {\r\n      this._terminal.element.appendChild(this._terminal.rowContainer);\r\n    }\r\n\r\n    this._terminal.emit('refresh', {element: this._terminal.element, start: start, end: end});\r\n  };\r\n\r\n  /**\r\n   * Refreshes the selection in the DOM.\r\n   * @param start The selection start.\r\n   * @param end The selection end.\r\n   */\r\n  public refreshSelection(start: [number, number], end: [number, number]) {\r\n    // Remove all selections\r\n    while (this._terminal.selectionContainer.children.length) {\r\n      this._terminal.selectionContainer.removeChild(this._terminal.selectionContainer.children[0]);\r\n    }\r\n\r\n    // Selection does not exist\r\n    if (!start || !end) {\r\n      return;\r\n    }\r\n\r\n    // Translate from buffer position to viewport position\r\n    const viewportStartRow = start[1] - this._terminal.buffer.ydisp;\r\n    const viewportEndRow = end[1] - this._terminal.buffer.ydisp;\r\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\r\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._terminal.rows - 1);\r\n\r\n    // No need to draw the selection\r\n    if (viewportCappedStartRow >= this._terminal.rows || viewportCappedEndRow < 0) {\r\n      return;\r\n    }\r\n\r\n    // Create the selections\r\n    const documentFragment = document.createDocumentFragment();\r\n    // Draw first row\r\n    const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\r\n    const endCol = viewportCappedStartRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\r\n    documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\r\n    // Draw middle rows\r\n    const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\r\n    documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._terminal.cols, middleRowsCount));\r\n    // Draw final row\r\n    if (viewportCappedStartRow !== viewportCappedEndRow) {\r\n      // Only draw viewportEndRow if it's not the same as viewporttartRow\r\n      const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._terminal.cols;\r\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\r\n    }\r\n    this._terminal.selectionContainer.appendChild(documentFragment);\r\n  }\r\n\r\n  /**\r\n   * Creates a selection element at the specified position.\r\n   * @param row The row of the selection.\r\n   * @param colStart The start column.\r\n   * @param colEnd The end columns.\r\n   */\r\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\r\n    const element = document.createElement('div');\r\n    element.style.height = `${rowCount * this._terminal.charMeasure.height}px`;\r\n    element.style.top = `${row * this._terminal.charMeasure.height}px`;\r\n    element.style.left = `${colStart * this._terminal.charMeasure.width}px`;\r\n    element.style.width = `${this._terminal.charMeasure.width * (colEnd - colStart)}px`;\r\n    return element;\r\n  }\r\n}\r\n\r\n\r\n// If bold is broken, we can't use it in the terminal.\r\nfunction checkBoldBroken(terminal) {\r\n  const document = terminal.ownerDocument;\r\n  const el = document.createElement('span');\r\n  el.innerHTML = 'hello world';\r\n  terminal.appendChild(el);\r\n  const w1 = el.offsetWidth;\r\n  const h1 = el.offsetHeight;\r\n  el.style.fontWeight = 'bold';\r\n  const w2 = el.offsetWidth;\r\n  const h2 = el.offsetHeight;\r\n  terminal.removeChild(el);\r\n  return w1 !== w2 || h1 !== h2;\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { C0 } from './EscapeSequences';\r\nimport { IInputHandler } from './Interfaces';\r\nimport { CHARSETS, DEFAULT_CHARSET } from './Charsets';\r\n\r\nconst normalStateHandler: {[key: string]: (parser: Parser, handler: IInputHandler) => void} = {};\r\nnormalStateHandler[C0.BEL] = (parser, handler) => handler.bell();\r\nnormalStateHandler[C0.LF] = (parser, handler) => handler.lineFeed();\r\nnormalStateHandler[C0.VT] = normalStateHandler[C0.LF];\r\nnormalStateHandler[C0.FF] = normalStateHandler[C0.LF];\r\nnormalStateHandler[C0.CR] = (parser, handler) => handler.carriageReturn();\r\nnormalStateHandler[C0.BS] = (parser, handler) => handler.backspace();\r\nnormalStateHandler[C0.HT] = (parser, handler) => handler.tab();\r\nnormalStateHandler[C0.SO] = (parser, handler) => handler.shiftOut();\r\nnormalStateHandler[C0.SI] = (parser, handler) => handler.shiftIn();\r\nnormalStateHandler[C0.ESC] = (parser, handler) => parser.setState(ParserState.ESCAPED);\r\n\r\n// TODO: Remove terminal when parser owns params and currentParam\r\nconst escapedStateHandler: {[key: string]: (parser: Parser, terminal: any) => void} = {};\r\nescapedStateHandler['['] = (parser, terminal) => {\r\n  // ESC [ Control Sequence Introducer (CSI  is 0x9b)\r\n  terminal.params = [];\r\n  terminal.currentParam = 0;\r\n  parser.setState(ParserState.CSI_PARAM);\r\n};\r\nescapedStateHandler[']'] = (parser, terminal) => {\r\n  // ESC ] Operating System Command (OSC is 0x9d)\r\n  terminal.params = [];\r\n  terminal.currentParam = 0;\r\n  parser.setState(ParserState.OSC);\r\n};\r\nescapedStateHandler['P'] = (parser, terminal) => {\r\n  // ESC P Device Control String (DCS is 0x90)\r\n  terminal.params = [];\r\n  terminal.currentParam = 0;\r\n  parser.setState(ParserState.DCS);\r\n};\r\nescapedStateHandler['_'] = (parser, terminal) => {\r\n  // ESC _ Application Program Command ( APC is 0x9f).\r\n  parser.setState(ParserState.IGNORE);\r\n};\r\nescapedStateHandler['^'] = (parser, terminal) => {\r\n  // ESC ^ Privacy Message ( PM is 0x9e).\r\n  parser.setState(ParserState.IGNORE);\r\n};\r\nescapedStateHandler['c'] = (parser, terminal) => {\r\n  // ESC c Full Reset (RIS).\r\n  terminal.reset();\r\n};\r\nescapedStateHandler['E'] = (parser, terminal) => {\r\n  // ESC E Next Line ( NEL is 0x85).\r\n  terminal.buffer.x = 0;\r\n  terminal.index();\r\n  parser.setState(ParserState.NORMAL);\r\n};\r\nescapedStateHandler['D'] = (parser, terminal) => {\r\n  // ESC D Index ( IND is 0x84).\r\n  terminal.index();\r\n  parser.setState(ParserState.NORMAL);\r\n};\r\nescapedStateHandler['M'] = (parser, terminal) => {\r\n  // ESC M Reverse Index ( RI is 0x8d).\r\n  terminal.reverseIndex();\r\n  parser.setState(ParserState.NORMAL);\r\n};\r\nescapedStateHandler['%'] = (parser, terminal) => {\r\n  // ESC % Select default/utf-8 character set.\r\n  // @ = default, G = utf-8\r\n  terminal.setgLevel(0);\r\n  terminal.setgCharset(0, DEFAULT_CHARSET); // US (default)\r\n  parser.setState(ParserState.NORMAL);\r\n  parser.skipNextChar();\r\n};\r\nescapedStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\r\n\r\nconst csiParamStateHandler: {[key: string]: (parser: Parser) => void} = {};\r\ncsiParamStateHandler['?'] = (parser) => parser.setPrefix('?');\r\ncsiParamStateHandler['>'] = (parser) => parser.setPrefix('>');\r\ncsiParamStateHandler['!'] = (parser) => parser.setPrefix('!');\r\ncsiParamStateHandler['0'] = (parser) => parser.setParam(parser.getParam() * 10);\r\ncsiParamStateHandler['1'] = (parser) => parser.setParam(parser.getParam() * 10 + 1);\r\ncsiParamStateHandler['2'] = (parser) => parser.setParam(parser.getParam() * 10 + 2);\r\ncsiParamStateHandler['3'] = (parser) => parser.setParam(parser.getParam() * 10 + 3);\r\ncsiParamStateHandler['4'] = (parser) => parser.setParam(parser.getParam() * 10 + 4);\r\ncsiParamStateHandler['5'] = (parser) => parser.setParam(parser.getParam() * 10 + 5);\r\ncsiParamStateHandler['6'] = (parser) => parser.setParam(parser.getParam() * 10 + 6);\r\ncsiParamStateHandler['7'] = (parser) => parser.setParam(parser.getParam() * 10 + 7);\r\ncsiParamStateHandler['8'] = (parser) => parser.setParam(parser.getParam() * 10 + 8);\r\ncsiParamStateHandler['9'] = (parser) => parser.setParam(parser.getParam() * 10 + 9);\r\ncsiParamStateHandler['$'] = (parser) => parser.setPostfix('$');\r\ncsiParamStateHandler['\"'] = (parser) => parser.setPostfix('\"');\r\ncsiParamStateHandler[' '] = (parser) => parser.setPostfix(' ');\r\ncsiParamStateHandler['\\''] = (parser) => parser.setPostfix('\\'');\r\ncsiParamStateHandler[';'] = (parser) => parser.finalizeParam();\r\ncsiParamStateHandler[C0.CAN] = (parser) => parser.setState(ParserState.NORMAL);\r\n\r\nconst csiStateHandler: {[key: string]: (handler: IInputHandler, params: number[], prefix: string, postfix: string, parser: Parser) => void} = {};\r\ncsiStateHandler['@'] = (handler, params, prefix) => handler.insertChars(params);\r\ncsiStateHandler['A'] = (handler, params, prefix) => handler.cursorUp(params);\r\ncsiStateHandler['B'] = (handler, params, prefix) => handler.cursorDown(params);\r\ncsiStateHandler['C'] = (handler, params, prefix) => handler.cursorForward(params);\r\ncsiStateHandler['D'] = (handler, params, prefix) => handler.cursorBackward(params);\r\ncsiStateHandler['E'] = (handler, params, prefix) => handler.cursorNextLine(params);\r\ncsiStateHandler['F'] = (handler, params, prefix) => handler.cursorPrecedingLine(params);\r\ncsiStateHandler['G'] = (handler, params, prefix) => handler.cursorCharAbsolute(params);\r\ncsiStateHandler['H'] = (handler, params, prefix) => handler.cursorPosition(params);\r\ncsiStateHandler['I'] = (handler, params, prefix) => handler.cursorForwardTab(params);\r\ncsiStateHandler['J'] = (handler, params, prefix) => handler.eraseInDisplay(params);\r\ncsiStateHandler['K'] = (handler, params, prefix) => handler.eraseInLine(params);\r\ncsiStateHandler['L'] = (handler, params, prefix) => handler.insertLines(params);\r\ncsiStateHandler['M'] = (handler, params, prefix) => handler.deleteLines(params);\r\ncsiStateHandler['P'] = (handler, params, prefix) => handler.deleteChars(params);\r\ncsiStateHandler['S'] = (handler, params, prefix) => handler.scrollUp(params);\r\ncsiStateHandler['T'] = (handler, params, prefix) => {\r\n  if (params.length < 2 && !prefix) {\r\n    handler.scrollDown(params);\r\n  }\r\n};\r\ncsiStateHandler['X'] = (handler, params, prefix) => handler.eraseChars(params);\r\ncsiStateHandler['Z'] = (handler, params, prefix) => handler.cursorBackwardTab(params);\r\ncsiStateHandler['`'] = (handler, params, prefix) => handler.charPosAbsolute(params);\r\ncsiStateHandler['a'] = (handler, params, prefix) => handler.HPositionRelative(params);\r\ncsiStateHandler['b'] = (handler, params, prefix) => handler.repeatPrecedingCharacter(params);\r\ncsiStateHandler['c'] = (handler, params, prefix) => handler.sendDeviceAttributes(params);\r\ncsiStateHandler['d'] = (handler, params, prefix) => handler.linePosAbsolute(params);\r\ncsiStateHandler['e'] = (handler, params, prefix) => handler.VPositionRelative(params);\r\ncsiStateHandler['f'] = (handler, params, prefix) => handler.HVPosition(params);\r\ncsiStateHandler['g'] = (handler, params, prefix) => handler.tabClear(params);\r\ncsiStateHandler['h'] = (handler, params, prefix) => handler.setMode(params);\r\ncsiStateHandler['l'] = (handler, params, prefix) => handler.resetMode(params);\r\ncsiStateHandler['m'] = (handler, params, prefix) => handler.charAttributes(params);\r\ncsiStateHandler['n'] = (handler, params, prefix) => handler.deviceStatus(params);\r\ncsiStateHandler['p'] = (handler, params, prefix) => {\r\n  switch (prefix) {\r\n    case '!': handler.softReset(params); break;\r\n  }\r\n};\r\ncsiStateHandler['q'] = (handler, params, prefix, postfix) => {\r\n  if (postfix === ' ') {\r\n    handler.setCursorStyle(params);\r\n  }\r\n};\r\ncsiStateHandler['r'] = (handler, params) => handler.setScrollRegion(params);\r\ncsiStateHandler['s'] = (handler, params) => handler.saveCursor(params);\r\ncsiStateHandler['u'] = (handler, params) => handler.restoreCursor(params);\r\ncsiStateHandler[C0.CAN] = (handler, params, prefix, postfix, parser) => parser.setState(ParserState.NORMAL);\r\n\r\nenum ParserState {\r\n  NORMAL = 0,\r\n  ESCAPED = 1,\r\n  CSI_PARAM = 2,\r\n  CSI = 3,\r\n  OSC = 4,\r\n  CHARSET = 5,\r\n  DCS = 6,\r\n  IGNORE = 7\r\n}\r\n\r\n/**\r\n * The terminal's parser, all input into the terminal goes through the parser\r\n * which parses and defers the actual input handling the the IInputHandler\r\n * specified in the constructor.\r\n */\r\nexport class Parser {\r\n  private _state: ParserState;\r\n  private _position: number;\r\n\r\n  // TODO: Remove terminal when handler can do everything\r\n  constructor(\r\n    private _inputHandler: IInputHandler,\r\n    private _terminal: any\r\n  ) {\r\n    this._state = ParserState.NORMAL;\r\n  }\r\n\r\n  /**\r\n   * Parse and handle data.\r\n   *\r\n   * @param data The data to parse.\r\n   */\r\n  public parse(data: string): ParserState {\r\n    let l = data.length, j, cs, ch, code, low;\r\n\r\n    if (this._terminal.debug) {\r\n      this._terminal.log('data: ' + data);\r\n    }\r\n\r\n    this._position = 0;\r\n    // apply leftover surrogate high from last write\r\n    if (this._terminal.surrogate_high) {\r\n      data = this._terminal.surrogate_high + data;\r\n      this._terminal.surrogate_high = '';\r\n    }\r\n\r\n    for (; this._position < l; this._position++) {\r\n      ch = data[this._position];\r\n\r\n      // FIXME: higher chars than 0xa0 are not allowed in escape sequences\r\n      //        --> maybe move to default\r\n      code = data.charCodeAt(this._position);\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        // we got a surrogate high\r\n        // get surrogate low (next 2 bytes)\r\n        low = data.charCodeAt(this._position + 1);\r\n        if (isNaN(low)) {\r\n          // end of data stream, save surrogate high\r\n          this._terminal.surrogate_high = ch;\r\n          continue;\r\n        }\r\n        code = ((code - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000;\r\n        ch += data.charAt(this._position + 1);\r\n      }\r\n      // surrogate low - already handled above\r\n      if (0xDC00 <= code && code <= 0xDFFF)\r\n        continue;\r\n\r\n      switch (this._state) {\r\n        case ParserState.NORMAL:\r\n          if (ch in normalStateHandler) {\r\n            normalStateHandler[ch](this, this._inputHandler);\r\n          } else {\r\n            this._inputHandler.addChar(ch, code);\r\n          }\r\n          break;\r\n        case ParserState.ESCAPED:\r\n          if (ch in escapedStateHandler) {\r\n            escapedStateHandler[ch](this, this._terminal);\r\n            // Skip switch as it was just handled\r\n            break;\r\n          }\r\n          switch (ch) {\r\n\r\n            // ESC (,),*,+,-,. Designate G0-G2 Character Set.\r\n            case '(': // <-- this seems to get all the attention\r\n            case ')':\r\n            case '*':\r\n            case '+':\r\n            case '-':\r\n            case '.':\r\n              switch (ch) {\r\n                case '(':\r\n                  this._terminal.gcharset = 0;\r\n                  break;\r\n                case ')':\r\n                  this._terminal.gcharset = 1;\r\n                  break;\r\n                case '*':\r\n                  this._terminal.gcharset = 2;\r\n                  break;\r\n                case '+':\r\n                  this._terminal.gcharset = 3;\r\n                  break;\r\n                case '-':\r\n                  this._terminal.gcharset = 1;\r\n                  break;\r\n                case '.':\r\n                  this._terminal.gcharset = 2;\r\n                  break;\r\n              }\r\n              this._state = ParserState.CHARSET;\r\n              break;\r\n\r\n            // Designate G3 Character Set (VT300).\r\n            // A = ISO Latin-1 Supplemental.\r\n            // Not implemented.\r\n            case '/':\r\n              this._terminal.gcharset = 3;\r\n              this._state = ParserState.CHARSET;\r\n              this._position--;\r\n              break;\r\n\r\n            // ESC N\r\n            // Single Shift Select of G2 Character Set\r\n            // ( SS2 is 0x8e). This affects next character only.\r\n            case 'N':\r\n              break;\r\n            // ESC O\r\n            // Single Shift Select of G3 Character Set\r\n            // ( SS3 is 0x8f). This affects next character only.\r\n            case 'O':\r\n              break;\r\n            // ESC n\r\n            // Invoke the G2 Character Set as GL (LS2).\r\n            case 'n':\r\n              this._terminal.setgLevel(2);\r\n              break;\r\n            // ESC o\r\n            // Invoke the G3 Character Set as GL (LS3).\r\n            case 'o':\r\n              this._terminal.setgLevel(3);\r\n              break;\r\n            // ESC |\r\n            // Invoke the G3 Character Set as GR (LS3R).\r\n            case '|':\r\n              this._terminal.setgLevel(3);\r\n              break;\r\n            // ESC }\r\n            // Invoke the G2 Character Set as GR (LS2R).\r\n            case '}':\r\n              this._terminal.setgLevel(2);\r\n              break;\r\n            // ESC ~\r\n            // Invoke the G1 Character Set as GR (LS1R).\r\n            case '~':\r\n              this._terminal.setgLevel(1);\r\n              break;\r\n\r\n            // ESC 7 Save Cursor (DECSC).\r\n            case '7':\r\n              this._inputHandler.saveCursor();\r\n              this._state = ParserState.NORMAL;\r\n              break;\r\n\r\n            // ESC 8 Restore Cursor (DECRC).\r\n            case '8':\r\n              this._inputHandler.restoreCursor();\r\n              this._state = ParserState.NORMAL;\r\n              break;\r\n\r\n            // ESC # 3 DEC line height/width\r\n            case '#':\r\n              this._state = ParserState.NORMAL;\r\n              this._position++;\r\n              break;\r\n\r\n            // ESC H Tab Set (HTS is 0x88).\r\n            case 'H':\r\n              this._terminal.tabSet();\r\n              this._state = ParserState.NORMAL;\r\n              break;\r\n\r\n            // ESC = Application Keypad (DECKPAM).\r\n            case '=':\r\n              this._terminal.log('Serial port requested application keypad.');\r\n              this._terminal.applicationKeypad = true;\r\n              this._terminal.viewport.syncScrollArea();\r\n              this._state = ParserState.NORMAL;\r\n              break;\r\n\r\n            // ESC > Normal Keypad (DECKPNM).\r\n            case '>':\r\n              this._terminal.log('Switching back to normal keypad.');\r\n              this._terminal.applicationKeypad = false;\r\n              this._terminal.viewport.syncScrollArea();\r\n              this._state = ParserState.NORMAL;\r\n              break;\r\n\r\n            default:\r\n              this._state = ParserState.NORMAL;\r\n              this._terminal.error('Unknown ESC control: %s.', ch);\r\n              break;\r\n          }\r\n          break;\r\n\r\n        case ParserState.CHARSET:\r\n          if (ch in CHARSETS) {\r\n            cs = CHARSETS[ch];\r\n            if (ch === '/') { // ISOLatin is actually /A\r\n              this.skipNextChar();\r\n            }\r\n          } else {\r\n            cs = DEFAULT_CHARSET;\r\n          }\r\n          this._terminal.setgCharset(this._terminal.gcharset, cs);\r\n          this._terminal.gcharset = null;\r\n          this._state = ParserState.NORMAL;\r\n          break;\r\n\r\n        case ParserState.OSC:\r\n          // OSC Ps ; Pt ST\r\n          // OSC Ps ; Pt BEL\r\n          //   Set Text Parameters.\r\n          if (ch === C0.ESC || ch === C0.BEL) {\r\n            if (ch === C0.ESC) this._position++;\r\n\r\n            this._terminal.params.push(this._terminal.currentParam);\r\n\r\n            switch (this._terminal.params[0]) {\r\n              case 0:\r\n              case 1:\r\n              case 2:\r\n                if (this._terminal.params[1]) {\r\n                  this._terminal.title = this._terminal.params[1];\r\n                  this._terminal.handleTitle(this._terminal.title);\r\n                }\r\n                break;\r\n              case 3:\r\n                // set X property\r\n                break;\r\n              case 4:\r\n              case 5:\r\n                // change dynamic colors\r\n                break;\r\n              case 10:\r\n              case 11:\r\n              case 12:\r\n              case 13:\r\n              case 14:\r\n              case 15:\r\n              case 16:\r\n              case 17:\r\n              case 18:\r\n              case 19:\r\n                // change dynamic ui colors\r\n                break;\r\n              case 46:\r\n                // change log file\r\n                break;\r\n              case 50:\r\n                // dynamic font\r\n                break;\r\n              case 51:\r\n                // emacs shell\r\n                break;\r\n              case 52:\r\n                // manipulate selection data\r\n                break;\r\n              case 104:\r\n              case 105:\r\n              case 110:\r\n              case 111:\r\n              case 112:\r\n              case 113:\r\n              case 114:\r\n              case 115:\r\n              case 116:\r\n              case 117:\r\n              case 118:\r\n                // reset colors\r\n                break;\r\n            }\r\n\r\n            this._terminal.params = [];\r\n            this._terminal.currentParam = 0;\r\n            this._state = ParserState.NORMAL;\r\n          } else {\r\n            if (!this._terminal.params.length) {\r\n              if (ch >= '0' && ch <= '9') {\r\n                this._terminal.currentParam =\r\n                  this._terminal.currentParam * 10 + ch.charCodeAt(0) - 48;\r\n              } else if (ch === ';') {\r\n                this._terminal.params.push(this._terminal.currentParam);\r\n                this._terminal.currentParam = '';\r\n              }\r\n            } else {\r\n              this._terminal.currentParam += ch;\r\n            }\r\n          }\r\n          break;\r\n\r\n        case ParserState.CSI_PARAM:\r\n          if (ch in csiParamStateHandler) {\r\n            csiParamStateHandler[ch](this);\r\n            break;\r\n          }\r\n          this.finalizeParam();\r\n          // Fall through the CSI as this character should be the CSI code.\r\n          this._state = ParserState.CSI;\r\n\r\n        case ParserState.CSI:\r\n          if (ch in csiStateHandler) {\r\n            if (this._terminal.debug) {\r\n              this._terminal.log(`CSI ${this._terminal.prefix ? this._terminal.prefix : ''} ${this._terminal.params ? this._terminal.params.join(';') : ''} ${this._terminal.postfix ? this._terminal.postfix : ''} ${ch}`);\r\n            }\r\n            csiStateHandler[ch](this._inputHandler, this._terminal.params, this._terminal.prefix, this._terminal.postfix, this);\r\n          } else {\r\n            this._terminal.error('Unknown CSI code: %s.', ch);\r\n          }\r\n\r\n          this._state = ParserState.NORMAL;\r\n          this._terminal.prefix = '';\r\n          this._terminal.postfix = '';\r\n          break;\r\n\r\n        case ParserState.DCS:\r\n          if (ch === C0.ESC || ch === C0.BEL) {\r\n            if (ch === C0.ESC) this._position++;\r\n            let pt;\r\n            let valid: boolean;\r\n\r\n            switch (this._terminal.prefix) {\r\n              // User-Defined Keys (DECUDK).\r\n              case '':\r\n                break;\r\n\r\n              // Request Status String (DECRQSS).\r\n              // test: echo -e '\\eP$q\"p\\e\\\\'\r\n              case '$q':\r\n                pt = this._terminal.currentParam;\r\n                valid = false;\r\n\r\n                switch (pt) {\r\n                  // DECSCA\r\n                  case '\"q':\r\n                    pt = '0\"q';\r\n                    break;\r\n\r\n                  // DECSCL\r\n                  case '\"p':\r\n                    pt = '61\"p';\r\n                    break;\r\n\r\n                  // DECSTBM\r\n                  case 'r':\r\n                    pt = ''\r\n                      + (this._terminal.buffer.scrollTop + 1)\r\n                      + ';'\r\n                      + (this._terminal.buffer.scrollBottom + 1)\r\n                      + 'r';\r\n                    break;\r\n\r\n                  // SGR\r\n                  case 'm':\r\n                    pt = '0m';\r\n                    break;\r\n\r\n                  default:\r\n                    this._terminal.error('Unknown DCS Pt: %s.', pt);\r\n                    pt = '';\r\n                    break;\r\n                }\r\n\r\n                this._terminal.send(C0.ESC + 'P' + +valid + '$r' + pt + C0.ESC + '\\\\');\r\n                break;\r\n\r\n              // Set Termcap/Terminfo Data (xterm, experimental).\r\n              case '+p':\r\n                break;\r\n\r\n              // Request Termcap/Terminfo String (xterm, experimental)\r\n              // Regular xterm does not even respond to this sequence.\r\n              // This can cause a small glitch in vim.\r\n              // test: echo -ne '\\eP+q6b64\\e\\\\'\r\n              case '+q':\r\n                pt = this._terminal.currentParam;\r\n                valid = false;\r\n\r\n                this._terminal.send(C0.ESC + 'P' + +valid + '+r' + pt + C0.ESC + '\\\\');\r\n                break;\r\n\r\n              default:\r\n                this._terminal.error('Unknown DCS prefix: %s.', this._terminal.prefix);\r\n                break;\r\n            }\r\n\r\n            this._terminal.currentParam = 0;\r\n            this._terminal.prefix = '';\r\n            this._state = ParserState.NORMAL;\r\n          } else if (!this._terminal.currentParam) {\r\n            if (!this._terminal.prefix && ch !== '$' && ch !== '+') {\r\n              this._terminal.currentParam = ch;\r\n            } else if (this._terminal.prefix.length === 2) {\r\n              this._terminal.currentParam = ch;\r\n            } else {\r\n              this._terminal.prefix += ch;\r\n            }\r\n          } else {\r\n            this._terminal.currentParam += ch;\r\n          }\r\n          break;\r\n\r\n        case ParserState.IGNORE:\r\n          // For PM and APC.\r\n          if (ch === C0.ESC || ch === C0.BEL) {\r\n            if (ch === C0.ESC) this._position++;\r\n            this._state = ParserState.NORMAL;\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    return this._state;\r\n  }\r\n\r\n  /**\r\n   * Set the parser's current parsing state.\r\n   *\r\n   * @param state The new state.\r\n   */\r\n  public setState(state: ParserState): void {\r\n    this._state = state;\r\n  }\r\n\r\n  /**\r\n   * Sets the parsier's current prefix. CSI codes can have prefixes of '?', '>'\r\n   * or '!'.\r\n   *\r\n   * @param prefix The prefix.\r\n   */\r\n  public setPrefix(prefix: string): void {\r\n    this._terminal.prefix = prefix;\r\n  }\r\n\r\n  /**\r\n   * Sets the parsier's current prefix. CSI codes can have postfixes of '$',\r\n   * '\"', ' ', '\\''.\r\n   *\r\n   * @param postfix The postfix.\r\n   */\r\n  public setPostfix(postfix: string): void {\r\n    this._terminal.postfix = postfix;\r\n  }\r\n\r\n  /**\r\n   * Sets the parser's current parameter.\r\n   *\r\n   * @param param the parameter.\r\n   */\r\n  public setParam(param: number) {\r\n    this._terminal.currentParam = param;\r\n  }\r\n\r\n  /**\r\n   * Gets the parser's current parameter.\r\n   */\r\n  public getParam(): number {\r\n    return this._terminal.currentParam;\r\n  }\r\n\r\n  /**\r\n   * Finalizes the parser's current parameter, adding it to the list of\r\n   * parameters and setting the new current parameter to 0.\r\n   */\r\n  public finalizeParam(): void {\r\n    this._terminal.params.push(this._terminal.currentParam);\r\n    this._terminal.currentParam = 0;\r\n  }\r\n\r\n  /**\r\n   * Tell the parser to skip the next character.\r\n   */\r\n  public skipNextChar(): void {\r\n    this._position++;\r\n  }\r\n\r\n  /**\r\n   * Tell the parser to repeat parsing the current character (for example if it\r\n   * needs parsing using a different state.\r\n   */\r\n  // public repeatChar(): void {\r\n  //   this._position--;\r\n  // }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { LinkMatcherOptions } from './Interfaces';\r\nimport { LinkMatcher, LinkMatcherHandler, LinkMatcherValidationCallback } from './Types';\r\n\r\nconst INVALID_LINK_CLASS = 'xterm-invalid-link';\r\n\r\nconst protocolClause = '(https?:\\\\/\\\\/)';\r\nconst domainCharacterSet = '[\\\\da-z\\\\.-]+';\r\nconst negatedDomainCharacterSet = '[^\\\\da-z\\\\.-]+';\r\nconst domainBodyClause = '(' + domainCharacterSet + ')';\r\nconst tldClause = '([a-z\\\\.]{2,6})';\r\nconst ipClause = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})';\r\nconst localHostClause = '(localhost)';\r\nconst portClause = '(:\\\\d{1,5})';\r\nconst hostClause = '((' + domainBodyClause + '\\\\.' + tldClause + ')|' + ipClause + '|' + localHostClause + ')' + portClause + '?';\r\nconst pathClause = '(\\\\/[\\\\/\\\\w\\\\.\\\\-%~]*)*';\r\nconst queryStringHashFragmentCharacterSet = '[0-9\\\\w\\\\[\\\\]\\\\(\\\\)\\\\/\\\\?\\\\!#@$%&\\'*+,:;~\\\\=\\\\.\\\\-]*';\r\nconst queryStringClause = '(\\\\?' + queryStringHashFragmentCharacterSet + ')?';\r\nconst hashFragmentClause = '(#' + queryStringHashFragmentCharacterSet + ')?';\r\nconst negatedPathCharacterSet = '[^\\\\/\\\\w\\\\.\\\\-%]+';\r\nconst bodyClause = hostClause + pathClause + queryStringClause + hashFragmentClause;\r\nconst start = '(?:^|' + negatedDomainCharacterSet + ')(';\r\nconst end = ')($|' + negatedPathCharacterSet + ')';\r\nconst strictUrlRegex = new RegExp(start + protocolClause + bodyClause + end);\r\n\r\n/**\r\n * The ID of the built in http(s) link matcher.\r\n */\r\nconst HYPERTEXT_LINK_MATCHER_ID = 0;\r\n\r\n/**\r\n * The Linkifier applies links to rows shortly after they have been refreshed.\r\n */\r\nexport class Linkifier {\r\n  /**\r\n   * The time to wait after a row is changed before it is linkified. This prevents\r\n   * the costly operation of searching every row multiple times, potentially a\r\n   * huge amount of times.\r\n   */\r\n  protected static TIME_BEFORE_LINKIFY = 200;\r\n\r\n  protected _linkMatchers: LinkMatcher[];\r\n\r\n  private _document: Document;\r\n  private _rows: HTMLElement[];\r\n  private _rowTimeoutIds: number[];\r\n  private _nextLinkMatcherId = HYPERTEXT_LINK_MATCHER_ID;\r\n\r\n  constructor() {\r\n    this._rowTimeoutIds = [];\r\n    this._linkMatchers = [];\r\n    this.registerLinkMatcher(strictUrlRegex, null, { matchIndex: 1 });\r\n  }\r\n\r\n  /**\r\n   * Attaches the linkifier to the DOM, enabling linkification.\r\n   * @param document The document object.\r\n   * @param rows The array of rows to apply links to.\r\n   */\r\n  public attachToDom(document: Document, rows: HTMLElement[]) {\r\n    this._document = document;\r\n    this._rows = rows;\r\n  }\r\n\r\n  /**\r\n   * Queues a row for linkification.\r\n   * @param {number} rowIndex The index of the row to linkify.\r\n   */\r\n  public linkifyRow(rowIndex: number): void {\r\n    // Don't attempt linkify if not yet attached to DOM\r\n    if (!this._document) {\r\n      return;\r\n    }\r\n\r\n    const timeoutId = this._rowTimeoutIds[rowIndex];\r\n    if (timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n    this._rowTimeoutIds[rowIndex] = setTimeout(this._linkifyRow.bind(this, rowIndex), Linkifier.TIME_BEFORE_LINKIFY);\r\n  }\r\n\r\n  /**\r\n   * Attaches a handler for hypertext links, overriding default <a> behavior\r\n   * for standard http(s) links.\r\n   * @param {LinkHandler} handler The handler to use, this can be cleared with\r\n   * null.\r\n   */\r\n  public setHypertextLinkHandler(handler: LinkMatcherHandler): void {\r\n    this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].handler = handler;\r\n  }\r\n\r\n  /**\r\n   * Attaches a validation callback for hypertext links.\r\n   * @param {LinkMatcherValidationCallback} callback The callback to use, this\r\n   * can be cleared with null.\r\n   */\r\n  public setHypertextValidationCallback(callback: LinkMatcherValidationCallback): void {\r\n    this._linkMatchers[HYPERTEXT_LINK_MATCHER_ID].validationCallback = callback;\r\n  }\r\n\r\n  /**\r\n   * Registers a link matcher, allowing custom link patterns to be matched and\r\n   * handled.\r\n   * @param {RegExp} regex The regular expression to search for, specifically\r\n   * this searches the textContent of the rows. You will want to use \\s to match\r\n   * a space ' ' character for example.\r\n   * @param {LinkHandler} handler The callback when the link is called.\r\n   * @param {LinkMatcherOptions} [options] Options for the link matcher.\r\n   * @return {number} The ID of the new matcher, this can be used to deregister.\r\n   */\r\n  public registerLinkMatcher(regex: RegExp, handler: LinkMatcherHandler, options: LinkMatcherOptions = {}): number {\r\n    if (this._nextLinkMatcherId !== HYPERTEXT_LINK_MATCHER_ID && !handler) {\r\n      throw new Error('handler must be defined');\r\n    }\r\n    const matcher: LinkMatcher = {\r\n      id: this._nextLinkMatcherId++,\r\n      regex,\r\n      handler,\r\n      matchIndex: options.matchIndex,\r\n      validationCallback: options.validationCallback,\r\n      priority: options.priority || 0\r\n    };\r\n    this._addLinkMatcherToList(matcher);\r\n    return matcher.id;\r\n  }\r\n\r\n  /**\r\n   * Inserts a link matcher to the list in the correct position based on the\r\n   * priority of each link matcher. New link matchers of equal priority are\r\n   * considered after older link matchers.\r\n   * @param matcher The link matcher to be added.\r\n   */\r\n  private _addLinkMatcherToList(matcher: LinkMatcher): void {\r\n    if (this._linkMatchers.length === 0) {\r\n      this._linkMatchers.push(matcher);\r\n      return;\r\n    }\r\n\r\n    for (let i = this._linkMatchers.length - 1; i >= 0; i--) {\r\n      if (matcher.priority <= this._linkMatchers[i].priority) {\r\n        this._linkMatchers.splice(i + 1, 0, matcher);\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._linkMatchers.splice(0, 0, matcher);\r\n  }\r\n\r\n  /**\r\n   * Deregisters a link matcher if it has been registered.\r\n   * @param {number} matcherId The link matcher's ID (returned after register)\r\n   * @return {boolean} Whether a link matcher was found and deregistered.\r\n   */\r\n  public deregisterLinkMatcher(matcherId: number): boolean {\r\n    // ID 0 is the hypertext link matcher which cannot be deregistered\r\n    for (let i = 1; i < this._linkMatchers.length; i++) {\r\n      if (this._linkMatchers[i].id === matcherId) {\r\n        this._linkMatchers.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Linkifies a row.\r\n   * @param {number} rowIndex The index of the row to linkify.\r\n   */\r\n  private _linkifyRow(rowIndex: number): void {\r\n    const row = this._rows[rowIndex];\r\n    if (!row) {\r\n      return;\r\n    }\r\n    const text = row.textContent;\r\n    for (let i = 0; i < this._linkMatchers.length; i++) {\r\n      const matcher = this._linkMatchers[i];\r\n      const linkElements = this._doLinkifyRow(row, matcher);\r\n        if (linkElements.length > 0) {\r\n        // Fire validation callback\r\n        if (matcher.validationCallback) {\r\n          for (let j = 0; j < linkElements.length; j++) {\r\n            const element = linkElements[j];\r\n            matcher.validationCallback(element.textContent, element, isValid => {\r\n              if (!isValid) {\r\n                element.classList.add(INVALID_LINK_CLASS);\r\n              }\r\n            });\r\n          }\r\n        }\r\n        // Only allow a single LinkMatcher to trigger on any given row.\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Linkifies a row given a specific handler.\r\n   * @param {HTMLElement} row The row to linkify.\r\n   * @param {LinkMatcher} matcher The link matcher for this line.\r\n   * @return The link element(s) that were added.\r\n   */\r\n  private _doLinkifyRow(row: HTMLElement, matcher: LinkMatcher): HTMLElement[] {\r\n    // Iterate over nodes as we want to consider text nodes\r\n    let result = [];\r\n    const isHttpLinkMatcher = matcher.id === HYPERTEXT_LINK_MATCHER_ID;\r\n    const nodes = row.childNodes;\r\n\r\n    // Find the first match\r\n    let match = row.textContent.match(matcher.regex);\r\n    if (!match || match.length === 0) {\r\n      return result;\r\n    }\r\n    let uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\r\n    // Set the next searches start index\r\n    let rowStartIndex = match.index + uri.length;\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i];\r\n      const searchIndex = node.textContent.indexOf(uri);\r\n      if (searchIndex >= 0) {\r\n        const linkElement = this._createAnchorElement(uri, matcher.handler, isHttpLinkMatcher);\r\n        if (node.textContent.length === uri.length) {\r\n          // Matches entire string\r\n          if (node.nodeType === 3 /*Node.TEXT_NODE*/) {\r\n            this._replaceNode(node, linkElement);\r\n          } else {\r\n            const element = (<HTMLElement>node);\r\n            if (element.nodeName === 'A') {\r\n              // This row has already been linkified\r\n              return result;\r\n            }\r\n            element.innerHTML = '';\r\n            element.appendChild(linkElement);\r\n          }\r\n        } else if (node.childNodes.length > 1) {\r\n          // Matches part of string in an element with multiple child nodes\r\n          for (let j = 0; j < node.childNodes.length; j++) {\r\n            const childNode = node.childNodes[j];\r\n            const childSearchIndex = childNode.textContent.indexOf(uri);\r\n            if (childSearchIndex !== -1) {\r\n              // Match found in currentNode\r\n              this._replaceNodeSubstringWithNode(childNode, linkElement, uri, childSearchIndex);\r\n              // Don't need to count nodesAdded by replacing the node as this\r\n              // is a child node, not a top-level node.\r\n              break;\r\n            }\r\n          }\r\n        } else {\r\n          // Matches part of string in a single text node\r\n          const nodesAdded = this._replaceNodeSubstringWithNode(node, linkElement, uri, searchIndex);\r\n          // No need to consider the new nodes\r\n          i += nodesAdded;\r\n        }\r\n        result.push(linkElement);\r\n\r\n        // Find the next match\r\n        match = row.textContent.substring(rowStartIndex).match(matcher.regex);\r\n        if (!match || match.length === 0) {\r\n          return result;\r\n        }\r\n        uri = match[typeof matcher.matchIndex !== 'number' ? 0 : matcher.matchIndex];\r\n        rowStartIndex += match.index + uri.length;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a link anchor element.\r\n   * @param {string} uri The uri of the link.\r\n   * @return {HTMLAnchorElement} The link.\r\n   */\r\n  private _createAnchorElement(uri: string, handler: LinkMatcherHandler, isHypertextLinkHandler: boolean): HTMLAnchorElement {\r\n    const element = this._document.createElement('a');\r\n    element.textContent = uri;\r\n    element.draggable = false;\r\n    if (isHypertextLinkHandler) {\r\n      element.href = uri;\r\n      // Force link on another tab so work is not lost\r\n      element.target = '_blank';\r\n      element.addEventListener('click', (event: MouseEvent) => {\r\n        if (handler) {\r\n          return handler(event, uri);\r\n        }\r\n      });\r\n    } else {\r\n      element.addEventListener('click', (event: MouseEvent) => {\r\n        // Don't execute the handler if the link is flagged as invalid\r\n        if (element.classList.contains(INVALID_LINK_CLASS)) {\r\n          return;\r\n        }\r\n        return handler(event, uri);\r\n      });\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /**\r\n   * Replace a node with 1 or more other nodes.\r\n   * @param {Node} oldNode The node to replace.\r\n   * @param {Node[]} newNodes The new nodes to insert in order.\r\n   */\r\n  private _replaceNode(oldNode: Node, ...newNodes: Node[]): void {\r\n    const parent = oldNode.parentNode;\r\n    for (let i = 0; i < newNodes.length; i++) {\r\n      parent.insertBefore(newNodes[i], oldNode);\r\n    }\r\n    parent.removeChild(oldNode);\r\n  }\r\n\r\n  /**\r\n   * Replace a substring within a node with a new node.\r\n   * @param {Node} targetNode The target node; either a text node or a <span>\r\n   * containing a single text node.\r\n   * @param {Node} newNode The new node to insert.\r\n   * @param {string} substring The substring to replace.\r\n   * @param {number} substringIndex The index of the substring within the string.\r\n   * @return The number of nodes to skip when searching for the next uri.\r\n   */\r\n  private _replaceNodeSubstringWithNode(targetNode: Node, newNode: Node, substring: string, substringIndex: number): number {\r\n    // If the targetNode is a non-text node with a single child, make the child\r\n    // the new targetNode.\r\n    if (targetNode.childNodes.length === 1) {\r\n      targetNode = targetNode.childNodes[0];\r\n    }\r\n\r\n    // The targetNode will be either a text node or a <span>. The text node\r\n    // (targetNode or its only-child) needs to be replaced with newNode plus new\r\n    // text nodes potentially on either side.\r\n    if (targetNode.nodeType !== 3/*Node.TEXT_NODE*/) {\r\n      throw new Error('targetNode must be a text node or only contain a single text node');\r\n    }\r\n\r\n    const fullText = targetNode.textContent;\r\n\r\n    if (substringIndex === 0) {\r\n      // Replace with <newNode><textnode>\r\n      const rightText = fullText.substring(substring.length);\r\n      const rightTextNode = this._document.createTextNode(rightText);\r\n      this._replaceNode(targetNode, newNode, rightTextNode);\r\n      return 0;\r\n    }\r\n\r\n    if (substringIndex === targetNode.textContent.length - substring.length) {\r\n      // Replace with <textnode><newNode>\r\n      const leftText = fullText.substring(0, substringIndex);\r\n      const leftTextNode = this._document.createTextNode(leftText);\r\n      this._replaceNode(targetNode, leftTextNode, newNode);\r\n      return 0;\r\n    }\r\n\r\n    // Replace with <textnode><newNode><textnode>\r\n    const leftText = fullText.substring(0, substringIndex);\r\n    const leftTextNode = this._document.createTextNode(leftText);\r\n    const rightText = fullText.substring(substringIndex + substring.length);\r\n    const rightTextNode = this._document.createTextNode(rightText);\r\n    this._replaceNode(targetNode, leftTextNode, newNode, rightTextNode);\r\n    return 1;\r\n  }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { IInputHandler, ITerminal } from './Interfaces';\r\nimport { C0 } from './EscapeSequences';\r\nimport { DEFAULT_CHARSET } from './Charsets';\r\n\r\n/**\r\n * The terminal's standard implementation of IInputHandler, this handles all\r\n * input from the Parser.\r\n *\r\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\r\n * each function's header comment.\r\n */\r\nexport class InputHandler implements IInputHandler {\r\n  // TODO: We want to type _terminal when it's pulled into TS\r\n  constructor(private _terminal: any) { }\r\n\r\n  public addChar(char: string, code: number): void {\r\n    if (char >= ' ') {\r\n      // calculate print space\r\n      // expensive call, therefore we save width in line buffer\r\n      const ch_width = wcwidth(code);\r\n\r\n      if (this._terminal.charset && this._terminal.charset[char]) {\r\n        char = this._terminal.charset[char];\r\n      }\r\n\r\n      let row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n      // insert combining char in last cell\r\n      // FIXME: needs handling after cursor jumps\r\n      if (!ch_width && this._terminal.buffer.x) {\r\n        // dont overflow left\r\n        if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1]) {\r\n          if (!this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][2]) {\r\n\r\n            // found empty cell after fullwidth, need to go 2 cells back\r\n            if (this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2])\r\n              this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 2][1] += char;\r\n\r\n          } else {\r\n            this._terminal.buffer.lines.get(row)[this._terminal.buffer.x - 1][1] += char;\r\n          }\r\n          this._terminal.updateRange(this._terminal.buffer.y);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // goto next line if ch would overflow\r\n      // TODO: needs a global min terminal width of 2\r\n      if (this._terminal.buffer.x + ch_width - 1 >= this._terminal.cols) {\r\n        // autowrap - DECAWM\r\n        if (this._terminal.wraparoundMode) {\r\n          this._terminal.buffer.x = 0;\r\n          this._terminal.buffer.y++;\r\n          if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\r\n            this._terminal.buffer.y--;\r\n            this._terminal.scroll(true);\r\n          } else {\r\n            // The line already exists (eg. the initial viewport), mark it as a\r\n            // wrapped line\r\n            this._terminal.buffer.lines.get(this._terminal.buffer.y).isWrapped = true;\r\n          }\r\n        } else {\r\n          if (ch_width === 2)  // FIXME: check for xterm behavior\r\n            return;\r\n        }\r\n      }\r\n      row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n      // insert mode: move characters to right\r\n      if (this._terminal.insertMode) {\r\n        // do this twice for a fullwidth char\r\n        for (let moves = 0; moves < ch_width; ++moves) {\r\n          // remove last cell, if it's width is 0\r\n          // we have to adjust the second last cell as well\r\n          const removed = this._terminal.buffer.lines.get(this._terminal.buffer.y + this._terminal.buffer.ybase).pop();\r\n          if (removed[2] === 0\r\n              && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2]\r\n              && this._terminal.buffer.lines.get(row)[this._terminal.cols - 2][2] === 2) {\r\n            this._terminal.buffer.lines.get(row)[this._terminal.cols - 2] = [this._terminal.curAttr, ' ', 1];\r\n          }\r\n\r\n          // insert empty cell at cursor\r\n          this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 0, [this._terminal.curAttr, ' ', 1]);\r\n        }\r\n      }\r\n\r\n      this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, char, ch_width];\r\n      this._terminal.buffer.x++;\r\n      this._terminal.updateRange(this._terminal.buffer.y);\r\n\r\n      // fullwidth char - set next cell width to zero and advance cursor\r\n      if (ch_width === 2) {\r\n        this._terminal.buffer.lines.get(row)[this._terminal.buffer.x] = [this._terminal.curAttr, '', 0];\r\n        this._terminal.buffer.x++;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * BEL\r\n   * Bell (Ctrl-G).\r\n   */\r\n  public bell(): void {\r\n    if (!this._terminal.visualBell) {\r\n      return;\r\n    }\r\n    this._terminal.element.style.borderColor = 'white';\r\n    setTimeout(() => this._terminal.element.style.borderColor = '', 10);\r\n    if (this._terminal.popOnBell) {\r\n      this._terminal.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * LF\r\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\r\n   */\r\n  public lineFeed(): void {\r\n    if (this._terminal.convertEol) {\r\n      this._terminal.buffer.x = 0;\r\n    }\r\n    this._terminal.buffer.y++;\r\n    if (this._terminal.buffer.y > this._terminal.buffer.scrollBottom) {\r\n      this._terminal.buffer.y--;\r\n      this._terminal.scroll();\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n    /**\r\n     * This event is emitted whenever the terminal outputs a LF or NL.\r\n     *\r\n     * @event lineFeed\r\n     */\r\n    this._terminal.emit('lineFeed');\r\n  }\r\n\r\n  /**\r\n   * CR\r\n   * Carriage Return (Ctrl-M).\r\n   */\r\n  public carriageReturn(): void {\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n  /**\r\n   * BS\r\n   * Backspace (Ctrl-H).\r\n   */\r\n  public backspace(): void {\r\n    if (this._terminal.buffer.x > 0) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * TAB\r\n   * Horizontal Tab (HT) (Ctrl-I).\r\n   */\r\n  public tab(): void {\r\n    this._terminal.buffer.x = this._terminal.nextStop();\r\n  }\r\n\r\n  /**\r\n   * SO\r\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\r\n   * G1 character set.\r\n   */\r\n  public shiftOut(): void {\r\n    this._terminal.setgLevel(1);\r\n  }\r\n\r\n  /**\r\n   * SI\r\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\r\n   * character set (the default).\r\n   */\r\n  public shiftIn(): void {\r\n    this._terminal.setgLevel(0);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps @\r\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\r\n   */\r\n  public insertChars(params: number[]): void {\r\n    let param, row, j, ch;\r\n\r\n    param = params[0];\r\n    if (param < 1) param = 1;\r\n\r\n    row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n    j = this._terminal.buffer.x;\r\n    ch = [this._terminal.eraseAttr(), ' ', 1]; // xterm\r\n\r\n    while (param-- && j < this._terminal.cols) {\r\n      this._terminal.buffer.lines.get(row).splice(j++, 0, ch);\r\n      this._terminal.buffer.lines.get(row).pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps A\r\n   * Cursor Up Ps Times (default = 1) (CUU).\r\n   */\r\n  public cursorUp(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y -= param;\r\n    if (this._terminal.buffer.y < 0) {\r\n      this._terminal.buffer.y = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps B\r\n   * Cursor Down Ps Times (default = 1) (CUD).\r\n   */\r\n  public cursorDown(params: number[]) {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps C\r\n   * Cursor Forward Ps Times (default = 1) (CUF).\r\n   */\r\n  public cursorForward(params: number[]) {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x += param;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps D\r\n   * Cursor Backward Ps Times (default = 1) (CUB).\r\n   */\r\n  public cursorBackward(params: number[]) {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n    this._terminal.buffer.x -= param;\r\n    if (this._terminal.buffer.x < 0) {\r\n      this._terminal.buffer.x = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps E\r\n   * Cursor Next Line Ps Times (default = 1) (CNL).\r\n   * same as CSI Ps B ?\r\n   */\r\n  public cursorNextLine(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI Ps F\r\n   * Cursor Preceding Line Ps Times (default = 1) (CNL).\r\n   * reuse CSI Ps A ?\r\n   */\r\n  public cursorPrecedingLine(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y -= param;\r\n    if (this._terminal.buffer.y < 0) {\r\n      this._terminal.buffer.y = 0;\r\n    }\r\n    this._terminal.buffer.x = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI Ps G\r\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\r\n   */\r\n  public cursorCharAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x = param - 1;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps H\r\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\r\n   */\r\n  public cursorPosition(params: number[]): void {\r\n    let row, col;\r\n\r\n    row = params[0] - 1;\r\n\r\n    if (params.length >= 2) {\r\n      col = params[1] - 1;\r\n    } else {\r\n      col = 0;\r\n    }\r\n\r\n    if (row < 0) {\r\n      row = 0;\r\n    } else if (row >= this._terminal.rows) {\r\n      row = this._terminal.rows - 1;\r\n    }\r\n\r\n    if (col < 0) {\r\n      col = 0;\r\n    } else if (col >= this._terminal.cols) {\r\n      col = this._terminal.cols - 1;\r\n    }\r\n\r\n    this._terminal.buffer.x = col;\r\n    this._terminal.buffer.y = row;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps I\r\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\r\n   */\r\n  public cursorForwardTab(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.x = this._terminal.nextStop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps J  Erase in Display (ED).\r\n   *     Ps = 0  -> Erase Below (default).\r\n   *     Ps = 1  -> Erase Above.\r\n   *     Ps = 2  -> Erase All.\r\n   *     Ps = 3  -> Erase Saved Lines (xterm).\r\n   * CSI ? Ps J\r\n   *   Erase in Display (DECSED).\r\n   *     Ps = 0  -> Selective Erase Below (default).\r\n   *     Ps = 1  -> Selective Erase Above.\r\n   *     Ps = 2  -> Selective Erase All.\r\n   */\r\n  public eraseInDisplay(params: number[]): void {\r\n    let j;\r\n    switch (params[0]) {\r\n      case 0:\r\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        j = this._terminal.buffer.y + 1;\r\n        for (; j < this._terminal.rows; j++) {\r\n          this._terminal.eraseLine(j);\r\n        }\r\n        break;\r\n      case 1:\r\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        j = this._terminal.buffer.y;\r\n        while (j--) {\r\n          this._terminal.eraseLine(j);\r\n        }\r\n        break;\r\n      case 2:\r\n        j = this._terminal.rows;\r\n        while (j--) this._terminal.eraseLine(j);\r\n        break;\r\n      case 3:\r\n        // Clear scrollback (everything not in viewport)\r\n        const scrollBackSize = this._terminal.buffer.lines.length - this._terminal.rows;\r\n        if (scrollBackSize > 0) {\r\n          this._terminal.buffer.lines.trimStart(scrollBackSize);\r\n          this._terminal.buffer.ybase = Math.max(this._terminal.buffer.ybase - scrollBackSize, 0);\r\n          this._terminal.buffer.ydisp = Math.max(this._terminal.buffer.ydisp - scrollBackSize, 0);\r\n          // Force a scroll event to refresh viewport\r\n          this._terminal.emit('scroll', 0);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps K  Erase in Line (EL).\r\n   *     Ps = 0  -> Erase to Right (default).\r\n   *     Ps = 1  -> Erase to Left.\r\n   *     Ps = 2  -> Erase All.\r\n   * CSI ? Ps K\r\n   *   Erase in Line (DECSEL).\r\n   *     Ps = 0  -> Selective Erase to Right (default).\r\n   *     Ps = 1  -> Selective Erase to Left.\r\n   *     Ps = 2  -> Selective Erase All.\r\n   */\r\n  public eraseInLine(params: number[]): void {\r\n    switch (params[0]) {\r\n      case 0:\r\n        this._terminal.eraseRight(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        break;\r\n      case 1:\r\n        this._terminal.eraseLeft(this._terminal.buffer.x, this._terminal.buffer.y);\r\n        break;\r\n      case 2:\r\n        this._terminal.eraseLine(this._terminal.buffer.y);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps L\r\n   * Insert Ps Line(s) (default = 1) (IL).\r\n   */\r\n  public insertLines(params: number[]): void {\r\n    let param, row, j;\r\n\r\n    param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n    j = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\r\n    j = this._terminal.rows - 1 + this._terminal.buffer.ybase - j + 1;\r\n\r\n    while (param--) {\r\n      if (this._terminal.buffer.lines.length === this._terminal.buffer.lines.maxLength) {\r\n        // Trim the start of lines to make room for the new line\r\n        this._terminal.buffer.lines.trimStart(1);\r\n        this._terminal.buffer.ybase--;\r\n        this._terminal.buffer.ydisp--;\r\n        row--;\r\n        j--;\r\n      }\r\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\r\n      // blankLine(true) - xterm/linux behavior\r\n      this._terminal.buffer.lines.splice(row, 0, this._terminal.blankLine(true));\r\n      this._terminal.buffer.lines.splice(j, 1);\r\n    }\r\n\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps M\r\n   * Delete Ps Line(s) (default = 1) (DL).\r\n   */\r\n  public deleteLines(params: number[]): void {\r\n    let param, row, j;\r\n\r\n    param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n\r\n    j = this._terminal.rows - 1 - this._terminal.buffer.scrollBottom;\r\n    j = this._terminal.rows - 1 + this._terminal.buffer.ybase - j;\r\n\r\n    while (param--) {\r\n      if (this._terminal.buffer.lines.length === this._terminal.buffer.lines.maxLength) {\r\n        // Trim the start of lines to make room for the new line\r\n        this._terminal.buffer.lines.trimStart(1);\r\n        this._terminal.buffer.ybase -= 1;\r\n        this._terminal.buffer.ydisp -= 1;\r\n      }\r\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\r\n      // blankLine(true) - xterm/linux behavior\r\n      this._terminal.buffer.lines.splice(j + 1, 0, this._terminal.blankLine(true));\r\n      this._terminal.buffer.lines.splice(row, 1);\r\n    }\r\n\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.y);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps P\r\n   * Delete Ps Character(s) (default = 1) (DCH).\r\n   */\r\n  public deleteChars(params: number[]): void {\r\n    let param, row, ch;\r\n\r\n    param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n\r\n    row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n    ch = [this._terminal.eraseAttr(), ' ', 1]; // xterm\r\n\r\n    while (param--) {\r\n      this._terminal.buffer.lines.get(row).splice(this._terminal.buffer.x, 1);\r\n      this._terminal.buffer.lines.get(row).push(ch);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\r\n   */\r\n  public scrollUp(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 1);\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 0, this._terminal.blankLine());\r\n    }\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\r\n   */\r\n  public scrollDown(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollBottom, 1);\r\n      this._terminal.buffer.lines.splice(this._terminal.buffer.ybase + this._terminal.buffer.scrollTop, 0, this._terminal.blankLine());\r\n    }\r\n    // this.maxRange();\r\n    this._terminal.updateRange(this._terminal.buffer.scrollTop);\r\n    this._terminal.updateRange(this._terminal.buffer.scrollBottom);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps X\r\n   * Erase Ps Character(s) (default = 1) (ECH).\r\n   */\r\n  public eraseChars(params: number[]): void {\r\n    let param, row, j, ch;\r\n\r\n    param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n\r\n    row = this._terminal.buffer.y + this._terminal.buffer.ybase;\r\n    j = this._terminal.buffer.x;\r\n    ch = [this._terminal.eraseAttr(), ' ', 1]; // xterm\r\n\r\n    while (param-- && j < this._terminal.cols) {\r\n      this._terminal.buffer.lines.get(row)[j++] = ch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\r\n   */\r\n  public cursorBackwardTab(params: number[]): void {\r\n    let param = params[0] || 1;\r\n    while (param--) {\r\n      this._terminal.buffer.x = this._terminal.prevStop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm `  Character Position Absolute\r\n   *   [column] (default = [row,1]) (HPA).\r\n   */\r\n  public charPosAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x = param - 1;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm a  Character Position Relative\r\n   *   [columns] (default = [row,col+1]) (HPR)\r\n   * reuse CSI Ps C ?\r\n   */\r\n  public HPositionRelative(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.x += param;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\r\n   */\r\n  public repeatPrecedingCharacter(params: number[]): void {\r\n    let param = params[0] || 1\r\n      , line = this._terminal.buffer.lines.get(this._terminal.buffer.ybase + this._terminal.buffer.y)\r\n      , ch = line[this._terminal.buffer.x - 1] || [this._terminal.defAttr, ' ', 1];\r\n\r\n    while (param--) {\r\n      line[this._terminal.buffer.x++] = ch;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps c  Send Device Attributes (Primary DA).\r\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\r\n   *     response depends on the decTerminalID resource setting.\r\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\r\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\r\n   *     -> CSI ? 6 c  (``VT102'')\r\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\r\n   *   The VT100-style response parameters do not mean anything by\r\n   *   themselves.  VT220 parameters do, telling the host what fea-\r\n   *   tures the terminal supports:\r\n   *     Ps = 1  -> 132-columns.\r\n   *     Ps = 2  -> Printer.\r\n   *     Ps = 6  -> Selective erase.\r\n   *     Ps = 8  -> User-defined keys.\r\n   *     Ps = 9  -> National replacement character sets.\r\n   *     Ps = 1 5  -> Technical characters.\r\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\r\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\r\n   * CSI > Ps c\r\n   *   Send Device Attributes (Secondary DA).\r\n   *     Ps = 0  or omitted -> request the terminal's identification\r\n   *     code.  The response depends on the decTerminalID resource set-\r\n   *     ting.  It should apply only to VT220 and up, but xterm extends\r\n   *     this to VT100.\r\n   *     -> CSI  > Pp ; Pv ; Pc c\r\n   *   where Pp denotes the terminal type\r\n   *     Pp = 0  -> ``VT100''.\r\n   *     Pp = 1  -> ``VT220''.\r\n   *   and Pv is the firmware version (for xterm, this was originally\r\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\r\n   *   nal, Pc indicates the ROM cartridge registration number and is\r\n   *   always zero.\r\n   * More information:\r\n   *   xterm/charproc.c - line 2012, for more information.\r\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\r\n   */\r\n  public sendDeviceAttributes(params: number[]): void {\r\n    if (params[0] > 0) {\r\n      return;\r\n    }\r\n\r\n    if (!this._terminal.prefix) {\r\n      if (this._terminal.is('xterm') || this._terminal.is('rxvt-unicode') || this._terminal.is('screen')) {\r\n        this._terminal.send(C0.ESC + '[?1;2c');\r\n      } else if (this._terminal.is('linux')) {\r\n        this._terminal.send(C0.ESC + '[?6c');\r\n      }\r\n    } else if (this._terminal.prefix === '>') {\r\n      // xterm and urxvt\r\n      // seem to spit this\r\n      // out around ~370 times (?).\r\n      if (this._terminal.is('xterm')) {\r\n        this._terminal.send(C0.ESC + '[>0;276;0c');\r\n      } else if (this._terminal.is('rxvt-unicode')) {\r\n        this._terminal.send(C0.ESC + '[>85;95;0c');\r\n      } else if (this._terminal.is('linux')) {\r\n        // not supported by linux console.\r\n        // linux console echoes parameters.\r\n        this._terminal.send(params[0] + 'c');\r\n      } else if (this._terminal.is('screen')) {\r\n        this._terminal.send(C0.ESC + '[>83;40003;0c');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm d  Vertical Position Absolute (VPA)\r\n   *   [row] (default = [1,column])\r\n   */\r\n  public linePosAbsolute(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y = param - 1;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm e  Vertical Position Relative (VPR)\r\n   *   [rows] (default = [row+1,column])\r\n   * reuse CSI Ps B ?\r\n   */\r\n  public VPositionRelative(params: number[]): void {\r\n    let param = params[0];\r\n    if (param < 1) {\r\n      param = 1;\r\n    }\r\n    this._terminal.buffer.y += param;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x--;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps f\r\n   *   Horizontal and Vertical Position [row;column] (default =\r\n   *   [1,1]) (HVP).\r\n   */\r\n  public HVPosition(params: number[]): void {\r\n    if (params[0] < 1) params[0] = 1;\r\n    if (params[1] < 1) params[1] = 1;\r\n\r\n    this._terminal.buffer.y = params[0] - 1;\r\n    if (this._terminal.buffer.y >= this._terminal.rows) {\r\n      this._terminal.buffer.y = this._terminal.rows - 1;\r\n    }\r\n\r\n    this._terminal.buffer.x = params[1] - 1;\r\n    if (this._terminal.buffer.x >= this._terminal.cols) {\r\n      this._terminal.buffer.x = this._terminal.cols - 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Ps g  Tab Clear (TBC).\r\n   *     Ps = 0  -> Clear Current Column (default).\r\n   *     Ps = 3  -> Clear All.\r\n   * Potentially:\r\n   *   Ps = 2  -> Clear Stops on Line.\r\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\r\n   */\r\n  public tabClear(params: number[]): void {\r\n    let param = params[0];\r\n    if (param <= 0) {\r\n      delete this._terminal.buffer.tabs[this._terminal.buffer.x];\r\n    } else if (param === 3) {\r\n      this._terminal.buffer.tabs = {};\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm h  Set Mode (SM).\r\n   *     Ps = 2  -> Keyboard Action Mode (AM).\r\n   *     Ps = 4  -> Insert Mode (IRM).\r\n   *     Ps = 1 2  -> Send/receive (SRM).\r\n   *     Ps = 2 0  -> Automatic Newline (LNM).\r\n   * CSI ? Pm h\r\n   *   DEC Private Mode Set (DECSET).\r\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\r\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\r\n   *     (DECANM), and set VT100 mode.\r\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\r\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\r\n   *     Ps = 5  -> Reverse Video (DECSCNM).\r\n   *     Ps = 6  -> Origin Mode (DECOM).\r\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\r\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\r\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\r\n   *     tion Mouse Tracking.\r\n   *     Ps = 1 0  -> Show toolbar (rxvt).\r\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\r\n   *     Ps = 1 8  -> Print form feed (DECPFF).\r\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\r\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\r\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\r\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\r\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\r\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\r\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\r\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\r\n   *     RCM).\r\n   *     Ps = 4 4  -> Turn On Margin Bell.\r\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\r\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\r\n   *     compile-time option.\r\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\r\n   *     abled by the titeInhibit resource).\r\n   *     Ps = 6 6  -> Application keypad (DECNKM).\r\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\r\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\r\n   *     release.  See the section Mouse Tracking.\r\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\r\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\r\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\r\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\r\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\r\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\r\n   *     (enables the eightBitInput resource).\r\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\r\n   *     Lock keys.  (This enables the numLock resource).\r\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\r\n   *     enables the metaSendsEscape resource).\r\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\r\n   *     key.\r\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\r\n   *     enables the altSendsEscape resource).\r\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\r\n   *     (This enables the keepSelection resource).\r\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\r\n   *     the selectToClipboard resource).\r\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\r\n   *     Control-G is received.  (This enables the bellIsUrgent\r\n   *     resource).\r\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\r\n   *     is received.  (enables the popOnBell resource).\r\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\r\n   *     disabled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\r\n   *     abled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\r\n   *     Screen Buffer, clearing it first.  (This may be disabled by\r\n   *     the titeInhibit resource).  This combines the effects of the 1\r\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\r\n   *     applications rather than the 4 7  mode.\r\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\r\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\r\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\r\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\r\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\r\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\r\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\r\n   * Modes:\r\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\r\n   */\r\n  public setMode(params: number[]): void {\r\n    if (params.length > 1) {\r\n      for (let i = 0; i < params.length; i++) {\r\n        this.setMode([params[i]]);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this._terminal.prefix) {\r\n      switch (params[0]) {\r\n        case 4:\r\n          this._terminal.insertMode = true;\r\n          break;\r\n        case 20:\r\n          // this._terminal.convertEol = true;\r\n          break;\r\n      }\r\n    } else if (this._terminal.prefix === '?') {\r\n      switch (params[0]) {\r\n        case 1:\r\n          this._terminal.applicationCursor = true;\r\n          break;\r\n        case 2:\r\n          this._terminal.setgCharset(0, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(1, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(2, DEFAULT_CHARSET);\r\n          this._terminal.setgCharset(3, DEFAULT_CHARSET);\r\n          // set VT100 mode here\r\n          break;\r\n        case 3: // 132 col mode\r\n          this._terminal.savedCols = this._terminal.cols;\r\n          this._terminal.resize(132, this._terminal.rows);\r\n          break;\r\n        case 6:\r\n          this._terminal.originMode = true;\r\n          break;\r\n        case 7:\r\n          this._terminal.wraparoundMode = true;\r\n          break;\r\n        case 12:\r\n          // this.cursorBlink = true;\r\n          break;\r\n        case 66:\r\n          this._terminal.log('Serial port requested application keypad.');\r\n          this._terminal.applicationKeypad = true;\r\n          this._terminal.viewport.syncScrollArea();\r\n          break;\r\n        case 9: // X10 Mouse\r\n          // no release, no motion, no wheel, no modifiers.\r\n        case 1000: // vt200 mouse\r\n          // no motion.\r\n          // no modifiers, except control on the wheel.\r\n        case 1002: // button event mouse\r\n        case 1003: // any event mouse\r\n          // any event - sends motion events,\r\n          // even if there is no button held down.\r\n\r\n          // TODO: Why are params[0] compares nested within a switch for params[0]?\r\n\r\n          this._terminal.x10Mouse = params[0] === 9;\r\n          this._terminal.vt200Mouse = params[0] === 1000;\r\n          this._terminal.normalMouse = params[0] > 1000;\r\n          this._terminal.mouseEvents = true;\r\n          this._terminal.element.classList.add('enable-mouse-events');\r\n          this._terminal.selectionManager.disable();\r\n          this._terminal.log('Binding to mouse events.');\r\n          break;\r\n        case 1004: // send focusin/focusout events\r\n          // focusin: ^[[I\r\n          // focusout: ^[[O\r\n          this._terminal.sendFocus = true;\r\n          break;\r\n        case 1005: // utf8 ext mode mouse\r\n          this._terminal.utfMouse = true;\r\n          // for wide terminals\r\n          // simply encodes large values as utf8 characters\r\n          break;\r\n        case 1006: // sgr ext mode mouse\r\n          this._terminal.sgrMouse = true;\r\n          // for wide terminals\r\n          // does not add 32 to fields\r\n          // press: ^[[<b;x;yM\r\n          // release: ^[[<b;x;ym\r\n          break;\r\n        case 1015: // urxvt ext mode mouse\r\n          this._terminal.urxvtMouse = true;\r\n          // for wide terminals\r\n          // numbers for fields\r\n          // press: ^[[b;x;yM\r\n          // motion: ^[[b;x;yT\r\n          break;\r\n        case 25: // show cursor\r\n          this._terminal.cursorHidden = false;\r\n          break;\r\n        case 1049: // alt screen buffer cursor\r\n          // TODO: Not sure if we need to save/restore after switching the buffer\r\n          // this.saveCursor(params);\r\n          // FALL-THROUGH\r\n        case 47: // alt screen buffer\r\n        case 1047: // alt screen buffer\r\n          this._terminal.buffers.activateAltBuffer();\r\n          this._terminal.viewport.syncScrollArea();\r\n          this._terminal.showCursor();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm l  Reset Mode (RM).\r\n   *     Ps = 2  -> Keyboard Action Mode (AM).\r\n   *     Ps = 4  -> Replace Mode (IRM).\r\n   *     Ps = 1 2  -> Send/receive (SRM).\r\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\r\n   * CSI ? Pm l\r\n   *   DEC Private Mode Reset (DECRST).\r\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\r\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\r\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\r\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\r\n   *     Ps = 5  -> Normal Video (DECSCNM).\r\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\r\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\r\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\r\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\r\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\r\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\r\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\r\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\r\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\r\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\r\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\r\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\r\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\r\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\r\n   *     NRCM).\r\n   *     Ps = 4 4  -> Turn Off Margin Bell.\r\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\r\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\r\n   *     compile-time option).\r\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\r\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\r\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\r\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\r\n   *     release.  See the section Mouse Tracking.\r\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\r\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\r\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\r\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\r\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\r\n   *     (rxvt).\r\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\r\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\r\n   *     the eightBitInput resource).\r\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\r\n   *     Lock keys.  (This disables the numLock resource).\r\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\r\n   *     (This disables the metaSendsEscape resource).\r\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\r\n   *     Delete key.\r\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\r\n   *     (This disables the altSendsEscape resource).\r\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\r\n   *     (This disables the keepSelection resource).\r\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\r\n   *     the selectToClipboard resource).\r\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\r\n   *     Control-G is received.  (This disables the bellIsUrgent\r\n   *     resource).\r\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\r\n   *     G is received.  (This disables the popOnBell resource).\r\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\r\n   *     first if in the Alternate Screen.  (This may be disabled by\r\n   *     the titeInhibit resource).\r\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\r\n   *     disabled by the titeInhibit resource).\r\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\r\n   *     as in DECRC.  (This may be disabled by the titeInhibit\r\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\r\n   *     4 8  modes.  Use this with terminfo-based applications rather\r\n   *     than the 4 7  mode.\r\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\r\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\r\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\r\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\r\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\r\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\r\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\r\n   */\r\n  public resetMode(params: number[]): void {\r\n    if (params.length > 1) {\r\n      for (let i = 0; i < params.length; i++) {\r\n        this.resetMode([params[i]]);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (!this._terminal.prefix) {\r\n      switch (params[0]) {\r\n        case 4:\r\n          this._terminal.insertMode = false;\r\n          break;\r\n        case 20:\r\n          // this._terminal.convertEol = false;\r\n          break;\r\n      }\r\n    } else if (this._terminal.prefix === '?') {\r\n      switch (params[0]) {\r\n        case 1:\r\n          this._terminal.applicationCursor = false;\r\n          break;\r\n        case 3:\r\n          if (this._terminal.cols === 132 && this._terminal.savedCols) {\r\n            this._terminal.resize(this._terminal.savedCols, this._terminal.rows);\r\n          }\r\n          delete this._terminal.savedCols;\r\n          break;\r\n        case 6:\r\n          this._terminal.originMode = false;\r\n          break;\r\n        case 7:\r\n          this._terminal.wraparoundMode = false;\r\n          break;\r\n        case 12:\r\n          // this.cursorBlink = false;\r\n          break;\r\n        case 66:\r\n          this._terminal.log('Switching back to normal keypad.');\r\n          this._terminal.applicationKeypad = false;\r\n          this._terminal.viewport.syncScrollArea();\r\n          break;\r\n        case 9: // X10 Mouse\r\n        case 1000: // vt200 mouse\r\n        case 1002: // button event mouse\r\n        case 1003: // any event mouse\r\n          this._terminal.x10Mouse = false;\r\n          this._terminal.vt200Mouse = false;\r\n          this._terminal.normalMouse = false;\r\n          this._terminal.mouseEvents = false;\r\n          this._terminal.element.classList.remove('enable-mouse-events');\r\n          this._terminal.selectionManager.enable();\r\n          break;\r\n        case 1004: // send focusin/focusout events\r\n          this._terminal.sendFocus = false;\r\n          break;\r\n        case 1005: // utf8 ext mode mouse\r\n          this._terminal.utfMouse = false;\r\n          break;\r\n        case 1006: // sgr ext mode mouse\r\n          this._terminal.sgrMouse = false;\r\n          break;\r\n        case 1015: // urxvt ext mode mouse\r\n          this._terminal.urxvtMouse = false;\r\n          break;\r\n        case 25: // hide cursor\r\n          this._terminal.cursorHidden = true;\r\n          break;\r\n        case 1049: // alt screen buffer cursor\r\n           // FALL-THROUGH\r\n        case 47: // normal screen buffer\r\n        case 1047: // normal screen buffer - clearing it first\r\n          // Ensure the selection manager has the correct buffer\r\n          this._terminal.buffers.activateNormalBuffer();\r\n          // TODO: Not sure if we need to save/restore after switching the buffer\r\n          // if (params[0] === 1049) {\r\n          //   this.restoreCursor(params);\r\n          // }\r\n          this._terminal.selectionManager.setBuffer(this._terminal.buffer.lines);\r\n          this._terminal.refresh(0, this._terminal.rows - 1);\r\n          this._terminal.viewport.syncScrollArea();\r\n          this._terminal.showCursor();\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI Pm m  Character Attributes (SGR).\r\n   *     Ps = 0  -> Normal (default).\r\n   *     Ps = 1  -> Bold.\r\n   *     Ps = 4  -> Underlined.\r\n   *     Ps = 5  -> Blink (appears as Bold).\r\n   *     Ps = 7  -> Inverse.\r\n   *     Ps = 8  -> Invisible, i.e., hidden (VT300).\r\n   *     Ps = 2 2  -> Normal (neither bold nor faint).\r\n   *     Ps = 2 4  -> Not underlined.\r\n   *     Ps = 2 5  -> Steady (not blinking).\r\n   *     Ps = 2 7  -> Positive (not inverse).\r\n   *     Ps = 2 8  -> Visible, i.e., not hidden (VT300).\r\n   *     Ps = 3 0  -> Set foreground color to Black.\r\n   *     Ps = 3 1  -> Set foreground color to Red.\r\n   *     Ps = 3 2  -> Set foreground color to Green.\r\n   *     Ps = 3 3  -> Set foreground color to Yellow.\r\n   *     Ps = 3 4  -> Set foreground color to Blue.\r\n   *     Ps = 3 5  -> Set foreground color to Magenta.\r\n   *     Ps = 3 6  -> Set foreground color to Cyan.\r\n   *     Ps = 3 7  -> Set foreground color to White.\r\n   *     Ps = 3 9  -> Set foreground color to default (original).\r\n   *     Ps = 4 0  -> Set background color to Black.\r\n   *     Ps = 4 1  -> Set background color to Red.\r\n   *     Ps = 4 2  -> Set background color to Green.\r\n   *     Ps = 4 3  -> Set background color to Yellow.\r\n   *     Ps = 4 4  -> Set background color to Blue.\r\n   *     Ps = 4 5  -> Set background color to Magenta.\r\n   *     Ps = 4 6  -> Set background color to Cyan.\r\n   *     Ps = 4 7  -> Set background color to White.\r\n   *     Ps = 4 9  -> Set background color to default (original).\r\n   *\r\n   *   If 16-color support is compiled, the following apply.  Assume\r\n   *   that xterm's resources are set so that the ISO color codes are\r\n   *   the first 8 of a set of 16.  Then the aixterm colors are the\r\n   *   bright versions of the ISO colors:\r\n   *     Ps = 9 0  -> Set foreground color to Black.\r\n   *     Ps = 9 1  -> Set foreground color to Red.\r\n   *     Ps = 9 2  -> Set foreground color to Green.\r\n   *     Ps = 9 3  -> Set foreground color to Yellow.\r\n   *     Ps = 9 4  -> Set foreground color to Blue.\r\n   *     Ps = 9 5  -> Set foreground color to Magenta.\r\n   *     Ps = 9 6  -> Set foreground color to Cyan.\r\n   *     Ps = 9 7  -> Set foreground color to White.\r\n   *     Ps = 1 0 0  -> Set background color to Black.\r\n   *     Ps = 1 0 1  -> Set background color to Red.\r\n   *     Ps = 1 0 2  -> Set background color to Green.\r\n   *     Ps = 1 0 3  -> Set background color to Yellow.\r\n   *     Ps = 1 0 4  -> Set background color to Blue.\r\n   *     Ps = 1 0 5  -> Set background color to Magenta.\r\n   *     Ps = 1 0 6  -> Set background color to Cyan.\r\n   *     Ps = 1 0 7  -> Set background color to White.\r\n   *\r\n   *   If xterm is compiled with the 16-color support disabled, it\r\n   *   supports the following, from rxvt:\r\n   *     Ps = 1 0 0  -> Set foreground and background color to\r\n   *     default.\r\n   *\r\n   *   If 88- or 256-color support is compiled, the following apply.\r\n   *     Ps = 3 8  ; 5  ; Ps -> Set foreground color to the second\r\n   *     Ps.\r\n   *     Ps = 4 8  ; 5  ; Ps -> Set background color to the second\r\n   *     Ps.\r\n   */\r\n  public charAttributes(params: number[]): void {\r\n    // Optimize a single SGR0.\r\n    if (params.length === 1 && params[0] === 0) {\r\n      this._terminal.curAttr = this._terminal.defAttr;\r\n      return;\r\n    }\r\n\r\n    let l = params.length\r\n    , i = 0\r\n    , flags = this._terminal.curAttr >> 18\r\n    , fg = (this._terminal.curAttr >> 9) & 0x1ff\r\n    , bg = this._terminal.curAttr & 0x1ff\r\n    , p;\r\n\r\n    for (; i < l; i++) {\r\n      p = params[i];\r\n      if (p >= 30 && p <= 37) {\r\n        // fg color 8\r\n        fg = p - 30;\r\n      } else if (p >= 40 && p <= 47) {\r\n        // bg color 8\r\n        bg = p - 40;\r\n      } else if (p >= 90 && p <= 97) {\r\n        // fg color 16\r\n        p += 8;\r\n        fg = p - 90;\r\n      } else if (p >= 100 && p <= 107) {\r\n        // bg color 16\r\n        p += 8;\r\n        bg = p - 100;\r\n      } else if (p === 0) {\r\n        // default\r\n        flags = this._terminal.defAttr >> 18;\r\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n        bg = this._terminal.defAttr & 0x1ff;\r\n        // flags = 0;\r\n        // fg = 0x1ff;\r\n        // bg = 0x1ff;\r\n      } else if (p === 1) {\r\n        // bold text\r\n        flags |= 1;\r\n      } else if (p === 4) {\r\n        // underlined text\r\n        flags |= 2;\r\n      } else if (p === 5) {\r\n        // blink\r\n        flags |= 4;\r\n      } else if (p === 7) {\r\n        // inverse and positive\r\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\r\n        flags |= 8;\r\n      } else if (p === 8) {\r\n        // invisible\r\n        flags |= 16;\r\n      } else if (p === 22) {\r\n        // not bold\r\n        flags &= ~1;\r\n      } else if (p === 24) {\r\n        // not underlined\r\n        flags &= ~2;\r\n      } else if (p === 25) {\r\n        // not blink\r\n        flags &= ~4;\r\n      } else if (p === 27) {\r\n        // not inverse\r\n        flags &= ~8;\r\n      } else if (p === 28) {\r\n        // not invisible\r\n        flags &= ~16;\r\n      } else if (p === 39) {\r\n        // reset fg\r\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n      } else if (p === 49) {\r\n        // reset bg\r\n        bg = this._terminal.defAttr & 0x1ff;\r\n      } else if (p === 38) {\r\n        // fg color 256\r\n        if (params[i + 1] === 2) {\r\n          i += 2;\r\n          fg = this._terminal.matchColor(\r\n            params[i] & 0xff,\r\n            params[i + 1] & 0xff,\r\n            params[i + 2] & 0xff);\r\n          if (fg === -1) fg = 0x1ff;\r\n          i += 2;\r\n        } else if (params[i + 1] === 5) {\r\n          i += 2;\r\n          p = params[i] & 0xff;\r\n          fg = p;\r\n        }\r\n      } else if (p === 48) {\r\n        // bg color 256\r\n        if (params[i + 1] === 2) {\r\n          i += 2;\r\n          bg = this._terminal.matchColor(\r\n            params[i] & 0xff,\r\n            params[i + 1] & 0xff,\r\n            params[i + 2] & 0xff);\r\n          if (bg === -1) bg = 0x1ff;\r\n          i += 2;\r\n        } else if (params[i + 1] === 5) {\r\n          i += 2;\r\n          p = params[i] & 0xff;\r\n          bg = p;\r\n        }\r\n      } else if (p === 100) {\r\n        // reset fg/bg\r\n        fg = (this._terminal.defAttr >> 9) & 0x1ff;\r\n        bg = this._terminal.defAttr & 0x1ff;\r\n      } else {\r\n        this._terminal.error('Unknown SGR attribute: %d.', p);\r\n      }\r\n    }\r\n\r\n    this._terminal.curAttr = (flags << 18) | (fg << 9) | bg;\r\n  }\r\n\r\n  /**\r\n   * CSI Ps n  Device Status Report (DSR).\r\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\r\n   *   CSI 0 n\r\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\r\n   *   Result is\r\n   *   CSI r ; c R\r\n   * CSI ? Ps n\r\n   *   Device Status Report (DSR, DEC-specific).\r\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\r\n   *     ? r ; c R (assumes page is zero).\r\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\r\n   *     or CSI ? 1 1  n  (not ready).\r\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\r\n   *     or CSI ? 2 1  n  (locked).\r\n   *     Ps = 2 6  -> Report Keyboard status as\r\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\r\n   *   The last two parameters apply to VT400 & up, and denote key-\r\n   *   board ready and LK01 respectively.\r\n   *     Ps = 5 3  -> Report Locator status as\r\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\r\n   *   CSI ? 5 0  n  No Locator, if not.\r\n   */\r\n  public deviceStatus(params: number[]): void {\r\n    if (!this._terminal.prefix) {\r\n      switch (params[0]) {\r\n        case 5:\r\n          // status report\r\n          this._terminal.send(C0.ESC + '[0n');\r\n          break;\r\n        case 6:\r\n          // cursor position\r\n          this._terminal.send(C0.ESC + '['\r\n                    + (this._terminal.buffer.y + 1)\r\n                    + ';'\r\n                    + (this._terminal.buffer.x + 1)\r\n                    + 'R');\r\n          break;\r\n      }\r\n    } else if (this._terminal.prefix === '?') {\r\n      // modern xterm doesnt seem to\r\n      // respond to any of these except ?6, 6, and 5\r\n      switch (params[0]) {\r\n        case 6:\r\n          // cursor position\r\n          this._terminal.send(C0.ESC + '[?'\r\n                    + (this._terminal.buffer.y + 1)\r\n                    + ';'\r\n                    + (this._terminal.buffer.x + 1)\r\n                    + 'R');\r\n          break;\r\n        case 15:\r\n          // no printer\r\n          // this.send(C0.ESC + '[?11n');\r\n          break;\r\n        case 25:\r\n          // dont support user defined keys\r\n          // this.send(C0.ESC + '[?21n');\r\n          break;\r\n        case 26:\r\n          // north american keyboard\r\n          // this.send(C0.ESC + '[?27;1;0;0n');\r\n          break;\r\n        case 53:\r\n          // no dec locator/mouse\r\n          // this.send(C0.ESC + '[?50n');\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * CSI ! p   Soft terminal reset (DECSTR).\r\n   * http://vt100.net/docs/vt220-rm/table4-10.html\r\n   */\r\n  public softReset(params: number[]): void {\r\n    this._terminal.cursorHidden = false;\r\n    this._terminal.insertMode = false;\r\n    this._terminal.originMode = false;\r\n    this._terminal.wraparoundMode = true;  // defaults: xterm - true, vt100 - false\r\n    this._terminal.applicationKeypad = false; // ?\r\n    this._terminal.viewport.syncScrollArea();\r\n    this._terminal.applicationCursor = false;\r\n    this._terminal.buffer.scrollTop = 0;\r\n    this._terminal.buffer.scrollBottom = this._terminal.rows - 1;\r\n    this._terminal.curAttr = this._terminal.defAttr;\r\n    this._terminal.buffer.x = this._terminal.buffer.y = 0; // ?\r\n    this._terminal.charset = null;\r\n    this._terminal.glevel = 0; // ??\r\n    this._terminal.charsets = [null]; // ??\r\n  }\r\n\r\n  /**\r\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\r\n   *   Ps = 0  -> blinking block.\r\n   *   Ps = 1  -> blinking block (default).\r\n   *   Ps = 2  -> steady block.\r\n   *   Ps = 3  -> blinking underline.\r\n   *   Ps = 4  -> steady underline.\r\n   *   Ps = 5  -> blinking bar (xterm).\r\n   *   Ps = 6  -> steady bar (xterm).\r\n   */\r\n  public setCursorStyle(params?: number[]): void {\r\n    const param = params[0] < 1 ? 1 : params[0];\r\n    switch (param) {\r\n      case 1:\r\n      case 2:\r\n        this._terminal.setOption('cursorStyle', 'block');\r\n        break;\r\n      case 3:\r\n      case 4:\r\n        this._terminal.setOption('cursorStyle', 'underline');\r\n        break;\r\n      case 5:\r\n      case 6:\r\n        this._terminal.setOption('cursorStyle', 'bar');\r\n        break;\r\n    }\r\n    const isBlinking = param % 2 === 1;\r\n    this._terminal.setOption('cursorBlink', isBlinking);\r\n  }\r\n\r\n  /**\r\n   * CSI Ps ; Ps r\r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\r\n   *   dow) (DECSTBM).\r\n   * CSI ? Pm r\r\n   */\r\n  public setScrollRegion(params: number[]): void {\r\n    if (this._terminal.prefix) return;\r\n    this._terminal.buffer.scrollTop = (params[0] || 1) - 1;\r\n    this._terminal.buffer.scrollBottom = (params[1] && params[1] <= this._terminal.rows ? params[1] : this._terminal.rows) - 1;\r\n    this._terminal.buffer.x = 0;\r\n    this._terminal.buffer.y = 0;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI s\r\n   *   Save cursor (ANSI.SYS).\r\n   */\r\n  public saveCursor(params: number[]): void {\r\n    this._terminal.buffer.savedX = this._terminal.buffer.x;\r\n    this._terminal.buffer.savedY = this._terminal.buffer.y;\r\n  }\r\n\r\n\r\n  /**\r\n   * CSI u\r\n   *   Restore cursor (ANSI.SYS).\r\n   */\r\n  public restoreCursor(params: number[]): void {\r\n    this._terminal.buffer.x = this._terminal.buffer.savedX || 0;\r\n    this._terminal.buffer.y = this._terminal.buffer.savedY || 0;\r\n  }\r\n}\r\n\r\nexport const wcwidth = (function(opts) {\r\n    // extracted from https://www.cl.cam.ac.uk/%7Emgk25/ucs/wcwidth.c\r\n    // combining characters\r\n    const COMBINING_BMP = [\r\n      [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\r\n      [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\r\n      [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\r\n      [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\r\n      [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\r\n      [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\r\n      [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\r\n      [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\r\n      [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\r\n      [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\r\n      [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\r\n      [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\r\n      [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\r\n      [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\r\n      [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\r\n      [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\r\n      [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\r\n      [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\r\n      [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\r\n      [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\r\n      [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\r\n      [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\r\n      [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\r\n      [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\r\n      [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\r\n      [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\r\n      [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\r\n      [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\r\n      [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\r\n      [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\r\n      [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\r\n      [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\r\n      [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\r\n      [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\r\n      [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\r\n      [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\r\n      [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\r\n      [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\r\n      [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\r\n      [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\r\n      [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\r\n      [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\r\n      [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB],\r\n    ];\r\n    const COMBINING_HIGH = [\r\n      [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\r\n      [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\r\n      [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\r\n      [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\r\n      [0xE0100, 0xE01EF]\r\n    ];\r\n    // binary search\r\n    function bisearch(ucs, data) {\r\n      let min = 0;\r\n      let max = data.length - 1;\r\n      let mid;\r\n      if (ucs < data[0][0] || ucs > data[max][1])\r\n        return false;\r\n      while (max >= min) {\r\n        mid = (min + max) >> 1;\r\n        if (ucs > data[mid][1])\r\n          min = mid + 1;\r\n        else if (ucs < data[mid][0])\r\n          max = mid - 1;\r\n        else\r\n          return true;\r\n      }\r\n      return false;\r\n    }\r\n    function wcwidthBMP(ucs) {\r\n      // test for 8-bit control characters\r\n      if (ucs === 0)\r\n        return opts.nul;\r\n      if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0))\r\n        return opts.control;\r\n      // binary search in table of non-spacing characters\r\n      if (bisearch(ucs, COMBINING_BMP))\r\n        return 0;\r\n      // if we arrive here, ucs is not a combining or C0/C1 control character\r\n      if (isWideBMP(ucs)) {\r\n        return 2;\r\n      }\r\n      return 1;\r\n    }\r\n    function isWideBMP(ucs) {\r\n      return (\r\n        ucs >= 0x1100 && (\r\n        ucs <= 0x115f ||                // Hangul Jamo init. consonants\r\n        ucs === 0x2329 ||\r\n        ucs === 0x232a ||\r\n        (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||  // CJK..Yi\r\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\r\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compat Ideographs\r\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\r\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compat Forms\r\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\r\n        (ucs >= 0xffe0 && ucs <= 0xffe6)));\r\n    }\r\n    function wcwidthHigh(ucs) {\r\n      if (bisearch(ucs, COMBINING_HIGH))\r\n        return 0;\r\n      if ((ucs >= 0x20000 && ucs <= 0x2fffd) || (ucs >= 0x30000 && ucs <= 0x3fffd)) {\r\n        return 2;\r\n      }\r\n      return 1;\r\n    }\r\n    const control = opts.control | 0;\r\n    let table = null;\r\n    function init_table() {\r\n      // lookup table for BMP\r\n      const CODEPOINTS = 65536;  // BMP holds 65536 codepoints\r\n      const BITWIDTH = 2;        // a codepoint can have a width of 0, 1 or 2\r\n      const ITEMSIZE = 32;       // using uint32_t\r\n      const CONTAINERSIZE = CODEPOINTS * BITWIDTH / ITEMSIZE;\r\n      const CODEPOINTS_PER_ITEM = ITEMSIZE / BITWIDTH;\r\n      table = (typeof Uint32Array === 'undefined')\r\n        ? new Array(CONTAINERSIZE)\r\n        : new Uint32Array(CONTAINERSIZE);\r\n      for (let i = 0; i < CONTAINERSIZE; ++i) {\r\n        let num = 0;\r\n        let pos = CODEPOINTS_PER_ITEM;\r\n        while (pos--)\r\n          num = (num << 2) | wcwidthBMP(CODEPOINTS_PER_ITEM * i + pos);\r\n        table[i] = num;\r\n      }\r\n    return table;\r\n    }\r\n    // get width from lookup table\r\n    //   position in container   : num / CODEPOINTS_PER_ITEM\r\n    //     ==> n = table[Math.floor(num / 16)]\r\n    //     ==> n = table[num >> 4]\r\n    //   16 codepoints per number:       FFEEDDCCBBAA99887766554433221100\r\n    //   position in number      : (num % CODEPOINTS_PER_ITEM) * BITWIDTH\r\n    //     ==> m = (n % 16) * 2\r\n    //     ==> m = (num & 15) << 1\r\n    //   right shift to position m\r\n    //     ==> n = n >> m     e.g. m=12  000000000000FFEEDDCCBBAA99887766\r\n    //   we are only interested in 2 LSBs, cut off higher bits\r\n    //     ==> n = n & 3      e.g.       000000000000000000000000000000XX\r\n    return function (num) {\r\n      num = num | 0;  // get asm.js like optimization under V8\r\n      if (num < 32)\r\n        return control | 0;\r\n      if (num < 127)\r\n        return 1;\r\n      let t = table || init_table();\r\n      if (num < 65536)\r\n        return t[num >> 4] >> ((num & 15) << 1) & 3;\r\n      // do a full search for high codepoints\r\n      return wcwidthHigh(num);\r\n    };\r\n})({nul: 0, control: 0});  // configurable options\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { IEventEmitter } from './Interfaces';\r\n\r\ninterface ListenerType {\r\n    (): void;\r\n    listener?: () => void;\r\n};\r\n\r\nexport class EventEmitter implements IEventEmitter {\r\n  private _events: {[type: string]: ListenerType[]};\r\n\r\n  constructor() {\r\n    // Restore the previous events if available, this will happen if the\r\n    // constructor is called multiple times on the same object (terminal reset).\r\n    this._events = this._events || {};\r\n  }\r\n\r\n  public on(type, listener): void {\r\n    this._events[type] = this._events[type] || [];\r\n    this._events[type].push(listener);\r\n  }\r\n\r\n  public off(type, listener): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n\r\n    let obj = this._events[type];\r\n    let i = obj.length;\r\n\r\n    while (i--) {\r\n      if (obj[i] === listener || obj[i].listener === listener) {\r\n        obj.splice(i, 1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public removeAllListeners(type): void {\r\n    if (this._events[type]) {\r\n       delete this._events[type];\r\n    }\r\n  }\r\n\r\n  public once(type, listener): any {\r\n    function on() {\r\n      let args = Array.prototype.slice.call(arguments);\r\n      this.off(type, on);\r\n      return listener.apply(this, args);\r\n    }\r\n    (<any>on).listener = listener;\r\n    return this.on(type, on);\r\n  }\r\n\r\n  public emit(type: string, ...args: any[]): void {\r\n    if (!this._events[type]) {\r\n      return;\r\n    }\r\n    let obj = this._events[type];\r\n    for (let i = 0; i < obj.length; i++) {\r\n      obj[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  public listeners(type): ListenerType[] {\r\n    return this._events[type] || [];\r\n  }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * C0 control codes\r\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\r\n */\r\nexport namespace C0 {\r\n  /** Null (Caret = ^@, C = \\0) */\r\n  export const NUL = '\\x00';\r\n  /** Start of Heading (Caret = ^A) */\r\n  export const SOH = '\\x01';\r\n  /** Start of Text (Caret = ^B) */\r\n  export const STX = '\\x02';\r\n  /** End of Text (Caret = ^C) */\r\n  export const ETX = '\\x03';\r\n  /** End of Transmission (Caret = ^D) */\r\n  export const EOT = '\\x04';\r\n  /** Enquiry (Caret = ^E) */\r\n  export const ENQ = '\\x05';\r\n  /** Acknowledge (Caret = ^F) */\r\n  export const ACK = '\\x06';\r\n  /** Bell (Caret = ^G, C = \\a) */\r\n  export const BEL = '\\x07';\r\n  /** Backspace (Caret = ^H, C = \\b) */\r\n  export const BS  = '\\x08';\r\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\r\n  export const HT  = '\\x09';\r\n  /** Line Feed (Caret = ^J, C = \\n) */\r\n  export const LF  = '\\x0a';\r\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\r\n  export const VT  = '\\x0b';\r\n  /** Form Feed (Caret = ^L, C = \\f) */\r\n  export const FF  = '\\x0c';\r\n  /** Carriage Return (Caret = ^M, C = \\r) */\r\n  export const CR  = '\\x0d';\r\n  /** Shift Out (Caret = ^N) */\r\n  export const SO  = '\\x0e';\r\n  /** Shift In (Caret = ^O) */\r\n  export const SI  = '\\x0f';\r\n  /** Data Link Escape (Caret = ^P) */\r\n  export const DLE = '\\x10';\r\n  /** Device Control One (XON) (Caret = ^Q) */\r\n  export const DC1 = '\\x11';\r\n  /** Device Control Two (Caret = ^R) */\r\n  export const DC2 = '\\x12';\r\n  /** Device Control Three (XOFF) (Caret = ^S) */\r\n  export const DC3 = '\\x13';\r\n  /** Device Control Four (Caret = ^T) */\r\n  export const DC4 = '\\x14';\r\n  /** Negative Acknowledge (Caret = ^U) */\r\n  export const NAK = '\\x15';\r\n  /** Synchronous Idle (Caret = ^V) */\r\n  export const SYN = '\\x16';\r\n  /** End of Transmission Block (Caret = ^W) */\r\n  export const ETB = '\\x17';\r\n  /** Cancel (Caret = ^X) */\r\n  export const CAN = '\\x18';\r\n  /** End of Medium (Caret = ^Y) */\r\n  export const EM  = '\\x19';\r\n  /** Substitute (Caret = ^Z) */\r\n  export const SUB = '\\x1a';\r\n  /** Escape (Caret = ^[, C = \\e) */\r\n  export const ESC = '\\x1b';\r\n  /** File Separator (Caret = ^\\) */\r\n  export const FS  = '\\x1c';\r\n  /** Group Separator (Caret = ^]) */\r\n  export const GS  = '\\x1d';\r\n  /** Record Separator (Caret = ^^) */\r\n  export const RS  = '\\x1e';\r\n  /** Unit Separator (Caret = ^_) */\r\n  export const US  = '\\x1f';\r\n  /** Space */\r\n  export const SP  = '\\x20';\r\n  /** Delete (Caret = ^?) */\r\n  export const DEL = '\\x7f';\r\n};\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal } from './Interfaces';\r\n\r\ninterface IPosition {\r\n  start: number;\r\n  end: number;\r\n}\r\n\r\n/**\r\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\r\n * events, displaying the in-progress composition to the UI and forwarding the final composition\r\n * to the handler.\r\n */\r\nexport class CompositionHelper {\r\n  /**\r\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\r\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\r\n   */\r\n  private isComposing: boolean;\r\n\r\n  /**\r\n   * The position within the input textarea's value of the current composition.\r\n   */\r\n  private compositionPosition: IPosition;\r\n\r\n  /**\r\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\r\n   * in-progress composition.\r\n   */\r\n  private isSendingComposition: boolean;\r\n\r\n  /**\r\n   * Creates a new CompositionHelper.\r\n   * @param textarea The textarea that xterm uses for input.\r\n   * @param compositionView The element to display the in-progress composition in.\r\n   * @param terminal The Terminal to forward the finished composition to.\r\n   */\r\n  constructor(\r\n    private textarea: HTMLTextAreaElement,\r\n    private compositionView: HTMLElement,\r\n    private terminal: ITerminal\r\n  ) {\r\n    this.isComposing = false;\r\n    this.isSendingComposition = false;\r\n    this.compositionPosition = { start: null, end: null };\r\n  }\r\n\r\n  /**\r\n   * Handles the compositionstart event, activating the composition view.\r\n   */\r\n  public compositionstart() {\r\n    this.isComposing = true;\r\n    this.compositionPosition.start = this.textarea.value.length;\r\n    this.compositionView.textContent = '';\r\n    this.compositionView.classList.add('active');\r\n  }\r\n\r\n  /**\r\n   * Handles the compositionupdate event, updating the composition view.\r\n   * @param {CompositionEvent} ev The event.\r\n   */\r\n  public compositionupdate(ev: CompositionEvent) {\r\n    this.compositionView.textContent = ev.data;\r\n    this.updateCompositionElements();\r\n    setTimeout(() => {\r\n      this.compositionPosition.end = this.textarea.value.length;\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Handles the compositionend event, hiding the composition view and sending the composition to\r\n   * the handler.\r\n   */\r\n  public compositionend() {\r\n    this.finalizeComposition(true);\r\n  }\r\n\r\n  /**\r\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\r\n   * @param ev The keydown event.\r\n   * @return Whether the Terminal should continue processing the keydown event.\r\n   */\r\n  public keydown(ev: KeyboardEvent) {\r\n    if (this.isComposing || this.isSendingComposition) {\r\n      if (ev.keyCode === 229) {\r\n        // Continue composing if the keyCode is the \"composition character\"\r\n        return false;\r\n      } else if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\r\n        // Continue composing if the keyCode is a modifier key\r\n        return false;\r\n      } else {\r\n        // Finish composition immediately. This is mainly here for the case where enter is\r\n        // pressed and the handler needs to be triggered before the command is executed.\r\n        this.finalizeComposition(false);\r\n      }\r\n    }\r\n\r\n    if (ev.keyCode === 229) {\r\n      // If the \"composition character\" is used but gets to this point it means a non-composition\r\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\r\n      this.handleAnyTextareaChanges();\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\r\n   * is ending.\r\n   * @param waitForPropogation Whether to wait for events to propogate before sending\r\n   *   the input. This should be false if a non-composition keystroke is entered before the\r\n   *   compositionend event is triggered, such as enter, so that the composition is send before\r\n   *   the command is executed.\r\n   */\r\n  private finalizeComposition(waitForPropogation: boolean) {\r\n    this.compositionView.classList.remove('active');\r\n    this.isComposing = false;\r\n    this.clearTextareaPosition();\r\n\r\n    if (!waitForPropogation) {\r\n      // Cancel any delayed composition send requests and send the input immediately.\r\n      this.isSendingComposition = false;\r\n      const input = this.textarea.value.substring(this.compositionPosition.start, this.compositionPosition.end);\r\n      this.terminal.handler(input);\r\n    } else {\r\n      // Make a deep copy of the composition position here as a new compositionstart event may\r\n      // fire before the setTimeout executes.\r\n      const currentCompositionPosition = {\r\n        start: this.compositionPosition.start,\r\n        end: this.compositionPosition.end,\r\n      };\r\n\r\n      // Since composition* events happen before the changes take place in the textarea on most\r\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\r\n      // complete. This ensures the correct character is retrieved, this solution was used\r\n      // because:\r\n      // - The compositionend event's data property is unreliable, at least on Chromium\r\n      // - The last compositionupdate event's data property does not always accurately describe\r\n      //   the character, a counter example being Korean where an ending consonsant can move to\r\n      //   the following character if the following input is a vowel.\r\n      this.isSendingComposition = true;\r\n      setTimeout(() => {\r\n        // Ensure that the input has not already been sent\r\n        if (this.isSendingComposition) {\r\n          this.isSendingComposition = false;\r\n          let input;\r\n          if (this.isComposing) {\r\n            // Use the end position to get the string if a new composition has started.\r\n            input = this.textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\r\n          } else {\r\n            // Don't use the end position here in order to pick up any characters after the\r\n            // composition has finished, for example when typing a non-composition character\r\n            // (eg. 2) after a composition character.\r\n            input = this.textarea.value.substring(currentCompositionPosition.start);\r\n          }\r\n          this.terminal.handler(input);\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\r\n   * This should be called when not currently composing but a keydown event with the \"composition\r\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\r\n   * IME is active.\r\n   */\r\n  private handleAnyTextareaChanges() {\r\n    const oldValue = this.textarea.value;\r\n    setTimeout(() => {\r\n      // Ignore if a composition has started since the timeout\r\n      if (!this.isComposing) {\r\n        const newValue = this.textarea.value;\r\n        const diff = newValue.replace(oldValue, '');\r\n        if (diff.length > 0) {\r\n          this.terminal.handler(diff);\r\n        }\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\r\n   * IME helper dialog is positioned correctly).\r\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\r\n   *   necessary as the IME events across browsers are not consistently triggered.\r\n   */\r\n  public updateCompositionElements(dontRecurse?: boolean) {\r\n    if (!this.isComposing) {\r\n      return;\r\n    }\r\n    const cursor = <HTMLElement>this.terminal.element.querySelector('.terminal-cursor');\r\n    if (cursor) {\r\n      // Take .xterm-rows offsetTop into account as well in case it's positioned absolutely within\r\n      // the .xterm element.\r\n      const xtermRows = <HTMLElement>this.terminal.element.querySelector('.xterm-rows');\r\n      const cursorTop = xtermRows.offsetTop + cursor.offsetTop;\r\n\r\n      this.compositionView.style.left = cursor.offsetLeft + 'px';\r\n      this.compositionView.style.top = cursorTop + 'px';\r\n      this.compositionView.style.height = cursor.offsetHeight + 'px';\r\n      this.compositionView.style.lineHeight = cursor.offsetHeight + 'px';\r\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\r\n      // text is.\r\n      const compositionViewBounds = this.compositionView.getBoundingClientRect();\r\n      this.textarea.style.left = cursor.offsetLeft + 'px';\r\n      this.textarea.style.top = cursorTop + 'px';\r\n      this.textarea.style.width = compositionViewBounds.width + 'px';\r\n      this.textarea.style.height = compositionViewBounds.height + 'px';\r\n      this.textarea.style.lineHeight = compositionViewBounds.height + 'px';\r\n    }\r\n    if (!dontRecurse) {\r\n      setTimeout(() => this.updateCompositionElements(true), 0);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Clears the textarea's position so that the cursor does not blink on IE.\r\n   * @private\r\n   */\r\n  private clearTextareaPosition() {\r\n    this.textarea.style.left = '';\r\n    this.textarea.style.top = '';\r\n  };\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * The character sets supported by the terminal. These enable several languages\r\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\r\n * for a discussion on character sets. Only VT100 character sets are supported.\r\n */\r\nexport const CHARSETS: {[key: string]: {[key: string]: string}} = {};\r\n\r\n/**\r\n * The default character set, US.\r\n */\r\nexport const DEFAULT_CHARSET = CHARSETS['B'];\r\n\r\n/**\r\n * DEC Special Character and Line Drawing Set.\r\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\r\n * A lot of curses apps use this if they see TERM=xterm.\r\n * testing: echo -e '\\e(0a\\e(B'\r\n * The xterm output sometimes seems to conflict with the\r\n * reference above. xterm seems in line with the reference\r\n * when running vttest however.\r\n * The table below now uses xterm's output from vttest.\r\n */\r\nCHARSETS['0'] = {\r\n  '`': '\\u25c6', // '◆'\r\n  'a': '\\u2592', // '▒'\r\n  'b': '\\u0009', // '\\t'\r\n  'c': '\\u000c', // '\\f'\r\n  'd': '\\u000d', // '\\r'\r\n  'e': '\\u000a', // '\\n'\r\n  'f': '\\u00b0', // '°'\r\n  'g': '\\u00b1', // '±'\r\n  'h': '\\u2424', // '\\u2424' (NL)\r\n  'i': '\\u000b', // '\\v'\r\n  'j': '\\u2518', // '┘'\r\n  'k': '\\u2510', // '┐'\r\n  'l': '\\u250c', // '┌'\r\n  'm': '\\u2514', // '└'\r\n  'n': '\\u253c', // '┼'\r\n  'o': '\\u23ba', // '⎺'\r\n  'p': '\\u23bb', // '⎻'\r\n  'q': '\\u2500', // '─'\r\n  'r': '\\u23bc', // '⎼'\r\n  's': '\\u23bd', // '⎽'\r\n  't': '\\u251c', // '├'\r\n  'u': '\\u2524', // '┤'\r\n  'v': '\\u2534', // '┴'\r\n  'w': '\\u252c', // '┬'\r\n  'x': '\\u2502', // '│'\r\n  'y': '\\u2264', // '≤'\r\n  'z': '\\u2265', // '≥'\r\n  '{': '\\u03c0', // 'π'\r\n  '|': '\\u2260', // '≠'\r\n  '}': '\\u00a3', // '£'\r\n  '~': '\\u00b7'  // '·'\r\n};\r\n\r\n/**\r\n * British character set\r\n * ESC (A\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\r\n */\r\nCHARSETS['A'] = {\r\n  '#': '£'\r\n};\r\n\r\n/**\r\n * United States character set\r\n * ESC (B\r\n */\r\nCHARSETS['B'] = null;\r\n\r\n/**\r\n * Dutch character set\r\n * ESC (4\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\r\n */\r\nCHARSETS['4'] = {\r\n  '#': '£',\r\n  '@': '¾',\r\n  '[': 'ij',\r\n  '\\\\': '½',\r\n  ']': '|',\r\n  '{': '¨',\r\n  '|': 'f',\r\n  '}': '¼',\r\n  '~': '´'\r\n};\r\n\r\n/**\r\n * Finnish character set\r\n * ESC (C or ESC (5\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\r\n */\r\nCHARSETS['C'] =\r\nCHARSETS['5'] = {\r\n  '[': 'Ä',\r\n  '\\\\': 'Ö',\r\n  ']': 'Å',\r\n  '^': 'Ü',\r\n  '`': 'é',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'å',\r\n  '~': 'ü'\r\n};\r\n\r\n/**\r\n * French character set\r\n * ESC (R\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\r\n */\r\nCHARSETS['R'] = {\r\n  '#': '£',\r\n  '@': 'à',\r\n  '[': '°',\r\n  '\\\\': 'ç',\r\n  ']': '§',\r\n  '{': 'é',\r\n  '|': 'ù',\r\n  '}': 'è',\r\n  '~': '¨'\r\n};\r\n\r\n/**\r\n * French Canadian character set\r\n * ESC (Q\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\r\n */\r\nCHARSETS['Q'] = {\r\n  '@': 'à',\r\n  '[': 'â',\r\n  '\\\\': 'ç',\r\n  ']': 'ê',\r\n  '^': 'î',\r\n  '`': 'ô',\r\n  '{': 'é',\r\n  '|': 'ù',\r\n  '}': 'è',\r\n  '~': 'û'\r\n};\r\n\r\n/**\r\n * German character set\r\n * ESC (K\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\r\n */\r\nCHARSETS['K'] = {\r\n  '@': '§',\r\n  '[': 'Ä',\r\n  '\\\\': 'Ö',\r\n  ']': 'Ü',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'ü',\r\n  '~': 'ß'\r\n};\r\n\r\n/**\r\n * Italian character set\r\n * ESC (Y\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\r\n */\r\nCHARSETS['Y'] = {\r\n  '#': '£',\r\n  '@': '§',\r\n  '[': '°',\r\n  '\\\\': 'ç',\r\n  ']': 'é',\r\n  '`': 'ù',\r\n  '{': 'à',\r\n  '|': 'ò',\r\n  '}': 'è',\r\n  '~': 'ì'\r\n};\r\n\r\n/**\r\n * Norwegian/Danish character set\r\n * ESC (E or ESC (6\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\r\n */\r\nCHARSETS['E'] =\r\nCHARSETS['6'] = {\r\n  '@': 'Ä',\r\n  '[': 'Æ',\r\n  '\\\\': 'Ø',\r\n  ']': 'Å',\r\n  '^': 'Ü',\r\n  '`': 'ä',\r\n  '{': 'æ',\r\n  '|': 'ø',\r\n  '}': 'å',\r\n  '~': 'ü'\r\n};\r\n\r\n/**\r\n * Spanish character set\r\n * ESC (Z\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\r\n */\r\nCHARSETS['Z'] = {\r\n  '#': '£',\r\n  '@': '§',\r\n  '[': '¡',\r\n  '\\\\': 'Ñ',\r\n  ']': '¿',\r\n  '{': '°',\r\n  '|': 'ñ',\r\n  '}': 'ç'\r\n};\r\n\r\n/**\r\n * Swedish character set\r\n * ESC (H or ESC (7\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\r\n */\r\nCHARSETS['H'] =\r\nCHARSETS['7'] = {\r\n  '@': 'É',\r\n  '[': 'Ä',\r\n  '\\\\': 'Ö',\r\n  ']': 'Å',\r\n  '^': 'Ü',\r\n  '`': 'é',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'å',\r\n  '~': 'ü'\r\n};\r\n\r\n/**\r\n * Swiss character set\r\n * ESC (=\r\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\r\n */\r\nCHARSETS['='] = {\r\n  '#': 'ù',\r\n  '@': 'à',\r\n  '[': 'é',\r\n  '\\\\': 'ç',\r\n  ']': 'ê',\r\n  '^': 'î',\r\n  '_': 'è',\r\n  '`': 'ô',\r\n  '{': 'ä',\r\n  '|': 'ö',\r\n  '}': 'ü',\r\n  '~': 'û'\r\n};\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, IBufferSet } from './Interfaces';\r\nimport { Buffer } from './Buffer';\r\nimport { EventEmitter } from './EventEmitter';\r\n\r\n/**\r\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\r\n * provides also utilities for working with them.\r\n */\r\nexport class BufferSet extends EventEmitter implements IBufferSet {\r\n  private _normal: Buffer;\r\n  private _alt: Buffer;\r\n  private _activeBuffer: Buffer;\r\n\r\n  /**\r\n   * Create a new BufferSet for the given terminal.\r\n   * @param {Terminal} terminal - The terminal the BufferSet will belong to\r\n   */\r\n  constructor(private _terminal: ITerminal) {\r\n    super();\r\n    this._normal = new Buffer(this._terminal);\r\n    this._normal.fillViewportRows();\r\n    this._alt = new Buffer(this._terminal);\r\n    this._activeBuffer = this._normal;\r\n  }\r\n\r\n  /**\r\n   * Returns the alt Buffer of the BufferSet\r\n   * @returns {Buffer}\r\n   */\r\n  public get alt(): Buffer {\r\n    return this._alt;\r\n  }\r\n\r\n  /**\r\n   * Returns the normal Buffer of the BufferSet\r\n   * @returns {Buffer}\r\n   */\r\n  public get active(): Buffer {\r\n    return this._activeBuffer;\r\n  }\r\n\r\n  /**\r\n   * Returns the currently active Buffer of the BufferSet\r\n   * @returns {Buffer}\r\n   */\r\n  public get normal(): Buffer {\r\n    return this._normal;\r\n  }\r\n\r\n  /**\r\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\r\n   */\r\n  public activateNormalBuffer(): void {\r\n    // The alt buffer should always be cleared when we switch to the normal\r\n    // buffer. This frees up memory since the alt buffer should always be new\r\n    // when activated.\r\n    this._alt.clear();\r\n\r\n    this._activeBuffer = this._normal;\r\n    this.emit('activate', this._normal);\r\n  }\r\n\r\n  /**\r\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\r\n   */\r\n  public activateAltBuffer(): void {\r\n    // Since the alt buffer is always cleared when the normal buffer is\r\n    // activated, we want to fill it when switching to it.\r\n    this._alt.fillViewportRows();\r\n\r\n    this._activeBuffer = this._alt;\r\n    this.emit('activate', this._alt);\r\n  }\r\n\r\n  /**\r\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\r\n   * @param newCols The new number of columns.\r\n   * @param newRows The new number of rows.\r\n   */\r\n  public resize(newCols: number, newRows: number): void {\r\n    this._normal.resize(newCols, newRows);\r\n    this._alt.resize(newCols, newRows);\r\n  }\r\n}\r\n","/**\r\n * @license MIT\r\n */\r\n\r\nimport { ITerminal, IBuffer } from './Interfaces';\r\nimport { CircularList } from './utils/CircularList';\r\n\r\n/**\r\n * This class represents a terminal buffer (an internal state of the terminal), where the\r\n * following information is stored (in high-level):\r\n *   - text content of this particular buffer\r\n *   - cursor position\r\n *   - scroll position\r\n */\r\nexport class Buffer implements IBuffer {\r\n  private _lines: CircularList<[number, string, number][]>;\r\n\r\n  public ydisp: number;\r\n  public ybase: number;\r\n  public y: number;\r\n  public x: number;\r\n  public scrollBottom: number;\r\n  public scrollTop: number;\r\n  public tabs: any;\r\n  public savedY: number;\r\n  public savedX: number;\r\n\r\n  /**\r\n   * Create a new Buffer.\r\n   * @param {Terminal} _terminal - The terminal the Buffer will belong to\r\n   * @param {number} ydisp - The scroll position of the Buffer in the viewport\r\n   * @param {number} ybase - The scroll position of the y cursor (ybase + y = the y position within the Buffer)\r\n   * @param {number} y - The cursor's y position after ybase\r\n   * @param {number} x - The cursor's x position after ybase\r\n   */\r\n  constructor(\r\n    private _terminal: ITerminal\r\n  ) {\r\n    this.clear();\r\n  }\r\n\r\n  public get lines(): CircularList<[number, string, number][]> {\r\n    return this._lines;\r\n  }\r\n\r\n  /**\r\n   * Fills the buffer's viewport with blank lines.\r\n   */\r\n  public fillViewportRows(): void {\r\n    if (this._lines.length === 0) {\r\n      let i = this._terminal.rows;\r\n      while (i--) {\r\n        this.lines.push(this._terminal.blankLine());\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears the buffer to it's initial state, discarding all previous data.\r\n   */\r\n  public clear(): void {\r\n    this.ydisp = 0;\r\n    this.ybase = 0;\r\n    this.y = 0;\r\n    this.x = 0;\r\n    this.scrollBottom = 0;\r\n    this.scrollTop = 0;\r\n    this.tabs = {};\r\n    this._lines = new CircularList<[number, string, number][]>(this._terminal.scrollback);\r\n    this.scrollBottom = this._terminal.rows - 1;\r\n  }\r\n\r\n  /**\r\n   * Resizes the buffer, adjusting its data accordingly.\r\n   * @param newCols The new number of columns.\r\n   * @param newRows The new number of rows.\r\n   */\r\n  public resize(newCols: number, newRows: number): void {\r\n    // Don't resize the buffer if it's empty and hasn't been used yet.\r\n    if (this._lines.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // Deal with columns increasing (we don't do anything when columns reduce)\r\n    if (this._terminal.cols < newCols) {\r\n      const ch: [number, string, number] = [this._terminal.defAttr, ' ', 1]; // does xterm use the default attr?\r\n      for (let i = 0; i < this._lines.length; i++) {\r\n        // TODO: This should be removed, with tests setup for the case that was\r\n        // causing the underlying bug, see https://github.com/sourcelair/xterm.js/issues/824\r\n        if (this._lines.get(i) === undefined) {\r\n          this._lines.set(i, this._terminal.blankLine(undefined, undefined, newCols));\r\n        }\r\n        while (this._lines.get(i).length < newCols) {\r\n          this._lines.get(i).push(ch);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Resize rows in both directions as needed\r\n    let addToY = 0;\r\n    if (this._terminal.rows < newRows) {\r\n      for (let y = this._terminal.rows; y < newRows; y++) {\r\n        if (this._lines.length < newRows + this.ybase) {\r\n          if (this.ybase > 0 && this._lines.length <= this.ybase + this.y + addToY + 1) {\r\n            // There is room above the buffer and there are no empty elements below the line,\r\n            // scroll up\r\n            this.ybase--;\r\n            addToY++;\r\n            if (this.ydisp > 0) {\r\n              // Viewport is at the top of the buffer, must increase downwards\r\n              this.ydisp--;\r\n            }\r\n          } else {\r\n            // Add a blank line if there is no buffer left at the top to scroll to, or if there\r\n            // are blank lines after the cursor\r\n            this._lines.push(this._terminal.blankLine(undefined, undefined, newCols));\r\n          }\r\n        }\r\n      }\r\n    } else { // (this._terminal.rows >= newRows)\r\n      for (let y = this._terminal.rows; y > newRows; y--) {\r\n        if (this._lines.length > newRows + this.ybase) {\r\n          if (this._lines.length > this.ybase + this.y + 1) {\r\n            // The line is a blank line below the cursor, remove it\r\n            this._lines.pop();\r\n          } else {\r\n            // The line is the cursor, scroll down\r\n            this.ybase++;\r\n            this.ydisp++;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Make sure that the cursor stays on screen\r\n    if (this.y >= newRows) {\r\n      this.y = newRows - 1;\r\n    }\r\n    if (addToY) {\r\n      this.y += addToY;\r\n    }\r\n\r\n    if (this.x >= newCols) {\r\n      this.x = newCols - 1;\r\n    }\r\n\r\n    this.scrollTop = 0;\r\n    this.scrollBottom = newRows - 1;\r\n  }\r\n}\r\n",null],"names":[],"mappings":"AsBAA;;;ADKA;AASA;AAqBA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAvIa;;;;;;;;;;;;;;;;;ADTb;AACA;AAMA;AAAA;AASA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;AACA;AAMA;AAAA;AACA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;;;AAAA;AAKA;AAIA;AAEA;AACA;AACA;AAKA;AAGA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AA3Ea;;;;;;;ADHA;AAKA;AAYbwpNa;;;;;;;ADRb;AAAA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAAC;;;;;;;ADpEA;AAED;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AA3Da;;;;;;;ADNb;AACA;AASA;AAEA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAIA;AAEA;AACA;AAGA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAauCA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAwFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAoFA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkyBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAAA;AA96Ca;AAg7CA;AAGbaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;ADnlDA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAKA;AAeA;AAFA;AAGA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AAOA;AACA;AACA;AAYA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAhUmB;AANN;;;;;;;ADhCbda;;;;;;;ADjKb;AAOA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAC;AAED;AAEA;AAQA;AAAA;AANA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAKA;AAQA;AACA;AACA;AACA;AACA;AACA;AAMA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAupWa;AAwWb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AD3YA;AACA;AAGA;AAEA;AACA;AAMA;AAKA;AAKA;AAMA;AAIA;AACA;AAEA;AACA;AAaA;AAAA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAiCA;AAAA;AACA;AACA;AACA;AACA;AATA;AAYA;AACA;AAEA;AACA;;AACA;AAKA;AAAA;AACA;AACA;AAEA;AAMA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AAAA;;;AAAA;AACA;AAAA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AA1lBa;;;;;;;AD1Db;AAuBA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AAAA;AAMA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAKA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AArHa;;;;;;;ADCb;AAaA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AArIa;;;;;;;ADWb;AACA;AACA;AACA;AACA;AACA;AALA;AAWA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AACA;AATA;AAgBA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBA;AAgCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AA4BA;AACA;AAGA;AACA;AACA;AANA;;;;;;;ADvGA;AAEA;AACA;AACA;AAEa;AACA;AAKA;AACA;AACA;AACA;AACA;;;;;;;ADhBb;AACA;AAYA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAnCA;;;;;;;;;;;;;;;;;ADdA;AAKA;AAAA;AAOA;AAAA;AAEA;AACA;;AACA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;;;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAnDa;;;;;;;;;;;;;;;;;ADJb;AAGA;AAAA;AAKA;AAAA;AAEA;AACA;AACA;;AACA;AAEA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAXA;AAaA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AATA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAAA;AAUA;AACA;AACA;AAUA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAWA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAAA;AAhMa;;;;;;;ADAb;AAYA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AAhE0B;AAET;AAHJ;;;;;;;ADEb;AACA;AACA;AAFA;AAEC;;;;;;;ADPD;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAgCA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAEA;AACA;AApBA;AAgCA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAVA;;;;;;;AD1DA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAcA;AAOA;AAMA;AAOA;AAkBA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAQA;AAGA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAKA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAOA;AACA;AAQA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AAKA;AACA;AAIA;AAGA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AAGA;AACA;AAAA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAQA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AAAA;AAGA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AAGA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AAKA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AASA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAKA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AAOA;AAKA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAOA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAQA;AACA;AACA;AAEA;;;"}