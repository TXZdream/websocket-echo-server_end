FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# go-online

go-online is a simple online application which allows people code, run and test anywhere.

## User Collection [/users]

### Register new user [POST]

You can create new user with some information.

+ Request (application/json)
    
        {
            "username": "golang",
            "email": "test@test.com",
            "password": "password"
        }

+ Response 200 (application/json)

    + Headers
    
            Location: /sessions/{userid}
            
    + Body

            {
                "error": false,
                "msg": ""
            }
            
### Get user information [GET]

Get basic user information

+ Response 200 (application/json)

        {
            "error": false,
            "msg": "",
            "username": "golang",
            "email": "test@test.com",
        }

## Session Collection [/sessions/{username}]

### Sign in [POST]

Users can sign in with some userful information.

+ Request (application/json)
        
        {
            "username": "golang",
            "email": "test@test.com"
        }
    
+ Response 200 (application/json)

        {
            "error": false,
            "msg": "",
            "token": "token field",
            "expired_in": "3600"
        }

+ Response 403 (application/json)

        {
            "error": true,
            "msg": "invalid user message"
        }
    
### Authenticate [GET]

+ Request

    + Headers

            token: Valid token
            
+ Response 200 (application/json)

        {
            "error": false,
            "msg": ""
        }
        
+ Response 401 (application/json)

        {
            "error": true,
            "msg": "Invalid token or username."
        }
        
## Project Collection [/projects]

### Add project [POST]

Add a new project

+ Request (application/json)

    + Headers
        
            token: valid token
        
    + Body
    
            {
                "username": "golang",
                "project_name": "golang_test",
                "type": 1
            }

+ Response 200 (application/json)

            {
                "error": false,
                "msg": ""
            }
            
## Command Collection [/ws]

### Init a connection

We should note that this collection uses ws to communicate with each other, so I can not show the IO with this document.
In general, the front end init a ws connection with server, and there should include some validation message in there's header.
All the message in a connection is a part of the initial command and once the connection was shutted down, it means the resources should be released.
A user can use one command now, and he can use one connection , that is , one docker container at the same time.